<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class User_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get user by id
     */
    function get_user($id)
    {
        return $this->db->get_where('users',array('id'=>$id))->row_array();
    }

    function get_user_email($email)
    {
        return $this->db->get_where('users',array('email'=>$email))->row_array();
    }

    function get_user_phone($phone)
    {
        return $this->db->get_where('users',array('phone'=>$phone))->row_array();
    }

    function get_user_role_by_user_id($id)
    {
        $this->db->where('user_id', $id);
        $this->db->order_by('id', 'ASC');
        $this->db->limit(1);
        return $this->db->get('user_roles')->result_array();
    }

    function get_all_user_role_by_user_id($id)
    {
        $this->db->join('roles','roles.id = user_roles.role_id');
        $this->db->where('user_id', $id);
        $this->db->order_by('user_roles.id', 'ASC');
        // $this->db->limit(1);
        return $this->db->get('user_roles')->result_array();
    }

    function get_user_role_user_by_user_id($id)
    {
        $this->db->where('user_id', $id);
        $this->db->join('roles','roles.id = user_roles.role_id');
        $this->db->order_by('user_roles.id', 'ASC');
        $this->db->limit(1);
        return $this->db->get('user_roles')->result_array();
    }
        
    /*
     * Get all users
     */
    function get_all_users()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('users')->result_array();
    }

    function get_all_user()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('users')->num_rows();
    }

    function get_all_society_exec()
    {
        $users = $this->db->query('SELECT * FROM users JOIN user_roles on users.id = user_roles.user_id WHERE role_id = 3');
        // $this->db->where('group_id', 1);
        // $this->db->or_where('group_id', 2);
        // $this->db->join('users_groups ug', 'u.id = ug.user_id');
        // $this->db->order_by('id', 'desc');
        return $users->result_array();
    }

    function get_all_utility_providers()
    {
        // $this->db->where('role_id', 9);
        $this->db->order_by('id', 'desc');
        return $this->db->get('users')->result_array();
    }

    function get_all_user_by_member_id($username)
    {
        // $this->db->where('society_id', $society_id);
        $this->db->where('username', $username);
        // $this->db->where('member_id', $member_id);
        return $this->db->get('users')->result_array();
    }
        
    /*
     * function to add new user
     */
    function add_user($params)
    {
        $this->db->insert('users',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update user
     */
    function update_user($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('users',$params);
    }

    // function assign_society($user_id,$params)
    // {
    //     $this->db->set($params);
    //     $this->db->where('id', $user_id);
    //     return $this->db->update('users');
    // }

    function assign_society($user_id,$params)
    {
        $this->db->set($params);
        $this->db->where('user_id', $user_id);
        return $this->db->update('society_accesses');
    }
    
    /*
     * function to delete user
     */
    function delete_user($id)
    {
        return $this->db->delete('users',array('id'=>$id));
    }

    function delete_user_by_member($id)
    {
        return $this->db->delete('users',array('member_id'=>$id));
    }

    public function read_user_information($username) {

        $condition = "username =" . "'" . $username . "'";
        $this->db->select('*');
        $this->db->from('users');
        $this->db->where($condition);
        $this->db->limit(1);
        $query = $this->db->get();
        
        if ($query->num_rows() == 1) {
            return $query->result();
        } else {
            return false;
        }
    }

    //Change password start
    public function getCurrPassword($user_id){
        $query = $this->db->where(['id'=>$user_id])->get('users');
          if($query->num_rows() > 0){
              return $query->row_array();
          } 
    }
      
    public function updatePassword($new_password, $user_id){
        $data = array('password'=> password_hash($new_password,PASSWORD_BCRYPT));
        return $this->db->where('id', $user_id)->update('users', $data); 
    }
    //Change password end

    //Login with mobile number via otp verification start
    public function get_otp($mobile){
        $otp_code = $rndno=rand(100000, 999999);
        $sql = "UPDATE users set otp_code='$otp_code' WHERE phone='$mobile' "; 
        $result = $this->db->query($sql);
        if($this->db->affected_rows() > 0){
           
            $token='P@$$word@4321';
            $message  = 'Please enter this One Time Password : '.$otp_code.' to verify your mobile number.';
            $post_data = array('From' => 'Msociety Login with mobile number','To' => $mobile,'Body' => $message);
            $bhashid = "PAYNET";
            $bash_token = $token;
            $url="http://bhashsms.com/api/sendmsg.php?user=Carnelian&pass=".$token."&sender=".$bhashid."&phone=".$mobile."&text=".urlencode($message)."&priority=ndnd&smstype=normal"; 
            $ch = curl_init();
            curl_setopt_array($ch, array(
                CURLOPT_URL => $url,
                CURLOPT_RETURNTRANSFER => true,
                // CURLOPT_POST => true,
                // CURLOPT_POSTFIELDS => $postData
                //,CURLOPT_FOLLOWLOCATION => true
            ));
    
            //Ignore SSL certificate verification
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    
            //get response
            $output = curl_exec($ch);
    
            curl_close($ch);
            return true;
            
            // echo json_encode(array('responseCode'=>1,'message'=>'Success'));
        }
        else {
            echo json_encode(array('responseCode'=>0,'message'=>'Failure'));
        }
    }

    public function get_otp_verify($otp,$phone){
        //echo $otp.' / '.$phone;
        $this->db->select("count(*) as otp_count");
        $this->db->where('otp_code=', $otp);
        $this->db->where('phone=', $phone);
        $result = $this->db->get('users');
        // echo $this->db->queries[0];
        $count = $result->row()->otp_count;
		if($count == "1" || $count == 1)
		{
			$sql = "UPDATE users set otp_code='' WHERE phone='$phone'"; 
			$result1 = $this->db->query($sql);
			
			return true;
		}
		else
		{
			return false;
		}
		//echo $result1.''.$id;
	}
    
    public function get_resend_otp($mobile){
        $otp_code = $rndno=rand(100000, 999999);
        $sql = "UPDATE users set otp_resend='$otp_code' WHERE phone='$mobile'"; 

        $result = $this->db->query($sql);
        if($this->db->affected_rows() > 0){
            // $token='P@$$word@4321';
            // $message  = 'Please enter this One Time Password : '.$otp_code.' to verify your mobile number.';
            // $post_data = array('From' => 'Msociety Login with mobile number','To' => $mobile,'Body' => $message);
            // $bhashid = "PAYNET";
            // $bash_token = $token;
            // $url="http://bhashsms.com/api/sendmsg.php?user=Carnelian&pass=".$token."&sender=".$bhashid."&phone=".$mobile."&text=".urlencode($message)."&priority=ndnd&smstype=normal"; 
            // $ch = curl_init();
			// curl_setopt_array($ch, array(
			// 	CURLOPT_URL => $url,
			// 	CURLOPT_RETURNTRANSFER => true,
			// 	// CURLOPT_POST => true,
			// 	// CURLOPT_POSTFIELDS => $postData
			// 	//,CURLOPT_FOLLOWLOCATION => true
			// ));

			// //Ignore SSL certificate verification
			// curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
			// curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);

			// //get response
			// $output = curl_exec($ch);

			// curl_close($ch);
            $message  = 'Your OTP is '.$otp_code.'. Note: Please DO NOT SHARE this OTP with anyone. Regards, PayNet Support.';
            $b_sender = "PayNet";
            
            $postData = array(
                'to' => "+91".$mobile,
                'body' => $message,
                'from' => $b_sender,
                "restrictions" => ["india" =>[
                    "templateId"=>1007257179454704382,
                    "entityId"=>1001034198501773685
                    ]
                ]
            );
            
            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://connect.routee.net/sms",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => json_encode($postData),
                CURLOPT_HTTPHEADER => array(
                    "authorization: Bearer 3b03fb0e-ae81-4f2e-80d4-2e93b446ae30",
                    "content-type: application/json"
                ),
            ));
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            $resp = '1';
            
        }
        else {
             $resp = 'mobile_error';
        }
         return $resp; 
    }
    //Login with mobile number via otp verification end

    public function update_login_time($user_id)
    {
        $this->db->where('id',$user_id);
        return $this->db->update('users',array('last_login'=>time()));
    }

    public function update_society_acceses($id, $groupData, $society_id)
    {
        
        $current_acceses = $this->db->get_where('society_accesses',array('user_id'=>$id, 'society_id'=>$society_id))->result_array();
       
        if(count($current_acceses)>0)
        {
            $this->db->delete('society_accesses',array('user_id'=>$id));
            foreach($groupData as $gd)
            {
                $params = array(
                    'user_id'=>$id,
                    'role_id'=>$gd,
                    'society_id'=>$society_id,
                    'created_at'=>date('Y-m-d h:i:s'),
                );
                $this->db->insert('society_accesses',$params);
            }
            return true;
        }
        else
        {
            foreach($groupData as $gd)
            {
                $params = array(
                    'user_id'=>$id,
                    'role_id'=>$gd,
                    'society_id'=>$society_id,
                    'created_at'=>date('Y-m-d h:i:s'),
                );
                $this->db->insert('society_accesses',$params);
            }

            return true;
        }
    }

    public function get_user_by_phone($phone)
    {
        return $this->db->get_where('users',array('phone'=>$phone))->row_array();
    }

    public function get_user_by_otp_phone($phone,$otp)
    {
        $user = $this->db->get_where('users',array('phone'=>$phone,'otp_code'=>$otp))->row_array();
        if($user)
        {
            $this->db->where(array('phone'=>$phone, 'otp_code'=>$otp));
            $this->db->update('users',array('otp_code'=>''));
            return true;
        }
        else
        {
            return false;
        }
    }

    public function reset_password($password, $phone)
    {
        $data = array('password'=> password_hash($password,PASSWORD_BCRYPT));
        return $this->db->where('phone', $phone)->update('users', $data); 
    }

    public function get_child_cp($user_id,$company)
    {
        $this->db->where(array('company'=>$company, 'id !='=>$user_id));
        $this->db->order_by('id', 'desc');
        return $this->db->get('users')->result_array();
    }
    // role_id base get all user info - sachhidanand -07-03-2022 
    function get_all_user_role_data($id)
    {
        
        $this->db->select('users.*,roles.name as role_name,user_roles.role_id');
        $this->db->from('users'); 
        $this->db->join('user_roles', 'user_roles.user_id=users.id', 'left');
        $this->db->join('roles', 'roles.id=user_roles.role_id', 'left');
         $this->db->where_in('user_roles.role_id', $id);
        $this->db->order_by('users.id', 'ASC');         
        $query = $this->db->get(); 
        if($query->num_rows() != 0)
        {
            return $query->result_array();
        }
        else
        {
            return false;
        }

        
    }

    // get user list by society id
    function get_user_by_society_id($society_id,$role_id=null)
    {
        $this->db->select('users.*,society_accesses.society_id');       
        $this->db->from('users');     
        $this->db->join('society_accesses', 'society_accesses.user_id = 
        users.id', 'left');
        $this->db->join('user_roles', 'user_roles.user_id = 
        users.id', 'left');
        $this->db->where('society_accesses.society_id', $society_id);
        $this->db->where_in('user_roles.role_id', $role_id);
        $this->db->order_by("users.id");
        return $this->db->get()->result_array();
      
    }

}
