<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Member_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get member by id
     */
    function get_member($id)
    {
        return $this->db->get_where('members',array('id'=>$id))->row_array();
    }

    function get_single_member($id)
    {
        return $this->db->get_where('members',array('id'=>$id))->result();
    }

    function get_member_single($id)
    {
        $this->db->select('flat_owner.user_id,first_name,last_name,flat_no,wing,members.id,users.phone,members.email_id');
        $this->db->join('flat_owner', 'members.id = flat_owner.flat_id');
        $this->db->join('users', 'flat_owner.user_id = users.id');
        $this->db->where('members.id', $id);
        $this->db->order_by('wing, flat_no ASC');
        return $this->db->get('members')->result();
    }

    function get_member_by_user_id($id)
    {
        return $this->db->get_where('members',array('user_id'=>$id))->result();
    }

    // function get_flat_user_id($id)
    // {
    //     $this->db->select('user_id')
    //     return $this->db->get_where('members',array('user_id'=>$id))->result();
    // }

    function get_member_by_user($id)
    {
        return $this->db->get_where('members',array('user_id'=>$id))->row_array();
    }

    function get_society_id_by_member_id($member_id){
        return $this->db->get_where('members',array('id'=>$member_id))->result_array()[0]['society_id'];
    }

    function get_member_by_details($society_id, $wing, $flat_no, $name, $phone, $email)
    {
        $this->db->where('society_id', $society_id);
        $this->db->where('wing', $wing);
        $this->db->where('flat_no', $flat_no);
        $this->db->where('name', $name);
        $this->db->where('phone', $phone);
        $this->db->where('email_id', $email);
        $member = $this->db->get('members');
        return $member->result();
    }

    function get_member_by_wingflat($wing, $flat_no, $society_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->where('wing', $wing);
        $this->db->where('flat_no', $flat_no);
        return $this->db->get('members')->result_array();
    }

    public function get_user_email($email,$phone){
        $this->db->select('*');
        $this->db->from('users');
        $this->db->where('email', $email);
        $this->db->or_where('phone', $phone);
        $query=$this->db->get();
       // echo $this->db->last_query();
        return $query->row(); 
           
    }

    public function get_society_name_by_member_id_api($user_id)
    {   

        
         $this->db->select('members.*,members.id as member_id,societies.id,societies.name');
         $this->db->from('members');
         $this->db->join('societies', 'members.society_id = societies.id');
         $this->db->where('members.user_id', $user_id);
         $this->db->order_by('members.id', 'desc');
         $query=$this->db->get();
       // echo $this->db->last_query();
        return $query->result(); 
        
    }
        
    /*
     * Get all members
     */
    function get_all_members($society_id)
    {
        $this->db->where('society_id', $society_id);
        // $this->db->where_in("id",array(7149));
        $this->db->order_by('id', 'asc');
        return $this->db->get('members')->result_array();
    }

    function get_members_count_society($society_id)
    {
        // $this->db->select_count('id');
        $this->db->where('society_id', $society_id);
        // $this->db->order_by('id', 'desc');
        return $this->db->get('members')->num_rows();
    }

    function get_members_count()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('members')->num_rows();
    }

    function get_total_outstanding_society($society_id)
    {
        $total_outstanding = 0;
        $member = $this->db->get_where('members',array('society_id'=>$society_id))->result_array();
        foreach($member as $m){
            // checking for the entry or not society_member_balance
            $check=$this->db->where(array('member_id'=>$m['id']))->limit(1)->order_by('member_balance_id DESC')->get('society_member_balance')->result();
            if(!empty($check)){
                $current_balance = $this->db->where(array('member_id'=>$m['id']))->limit(1)->order_by('member_balance_id DESC')->get('society_member_balance')->result_array()[0]['new_balance'];
                if($current_balance < 0){
                    $total_outstanding += -$current_balance;
                }
            }
           
        }
        if($total_outstanding != NULL || !empty($total_outstanding)):
            return $total_outstanding;
        else:
            return 0;
        endif;
    }

    function get_total_outstanding_bill($society_id)
    {
        $total_outstanding = $this->db->query("SELECT SUM(total_due) AS total_due FROM bill_details WHERE society_id = "."$society_id"." AND paid = 0")->row_array();
        $outstanding = $total_outstanding['total_due'];
        if($outstanding != NULL || !empty($outstanding)):
            return $total_outstanding;
        else:
            return 0;
        endif;
    }

    function get_all_members_by_society($society_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->order_by('wing', 'ASC');
        // $this->db->order_by('flat_no', 'ASC');
        return $this->db->get('members')->result_array();
    }

    function get_members_by_id($member_id)
    {
        $this->db->where('id', $member_id);
        $this->db->order_by('id', 'desc');
        return $this->db->get('members')->result_array();
    }

    function get_members_society($id)
    {
        //as discuss harsh change query - sachhidanadn 29-12-2021
        // $this->db->select('flat_owner.user_id,first_name,last_name,flat_no,wing,members.id,users.phone');
        // $this->db->join('flat_owner', 'members.id = flat_owner.flat_id');
        // $this->db->join('users', 'flat_owner.user_id = users.id');
        // $this->db->where('members.society_id', $id);
        // $this->db->order_by('wing, flat_no ASC');
        // return $this->db->get('members')->result_array();

        $this->db->select('flat_no,wing,members.id');       
        $this->db->where('members.society_id', $id);
        $this->db->order_by('wing, flat_no ASC');
        return $this->db->get('members')->result_array();
    }

    function get_members_by_society($id)
    {
        $this->db->select('name,flat_no,wing,members.id');
        // $this->db->select('flat_owner.user_id,first_name,last_name,flat_no,wing,users.phone,members.id');
        // $this->db->join('flat_owner', 'members.id = flat_owner.flat_id');
        // $this->db->join('users', 'flat_owner.user_id = users.id');
        $this->db->where('members.society_id', $id);
        $this->db->order_by('wing, flat_no ASC');
        return $this->db->get('members')->result_array();
    }

    function get_members_by_society_led($id)
    {
        $this->db->where('society_id', $id);
        $this->db->order_by('wing, flat_no ASC');
        return $this->db->get('members')->result_array();
    }

    function get_members_for_j($id)
    {
        // $this->db->join('users', 'users.id = members.user_id');
        // $this->db->join('users_groups', 'users_groups.user_id = members.user_id');
        $this->db->where('members.society_id', $id);
        $this->db->order_by('wing, flat_no ASC');
        return $this->db->get('members')->result_array();
    }

    function get_member_current_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_arrears')->result_array();
        // return $data;
        if(!empty($data) && $data[0]['new_arrears'] != 0){
            return $data[0]['new_arrears'];
        } else {
            return "0.00";
        }
    }
    //use this function member arrear table entry available or not sachhidanand gupta
    function exit_member_current_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_arrears')->row_array();
       
        if(!empty($data)){
            return 1;
        } else {
            return 0;
        }
    }

    function get_current_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_arrears')->result_array();
        // return $data;
        if(!empty($data)){
            return $data[0];
        } else {
            return NULL;
        }
    }

    function get_member_previous_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_arrears')->result_array();
        // return $data;
        if(!empty($data) && $data[0]['old_arrears'] != 0){
            return $data[0]['old_arrears'];
        } else {
            return "0.00";
        }
    }

    function get_member_current_intrest_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_interest')->result_array();
        // return $data;
        if(!empty($data) && $data[0]['new_interest'] != 0){
            return $data[0]['new_interest'];
        } else {
            return "0.00";
        }
    }

    function get_current_intrest_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_interest')->result_array();
        if(!empty($data) && $data[0]['new_interest'] != 0){
            return $data[0];
        } else {
            return NULL;
        }
    }

    function get_member_previous_intrest_arrears($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('id DESC')->limit('1')->get('member_interest')->result_array();
        // return $data;
        if(!empty($data) && $data[0]['old_interest'] != 0){
            return $data[0]['old_interest'];
        } else {
            return "0.00";
        }
    }

    function get_member_current_balance($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('member_balance_id DESC')->limit('1')->get('society_member_balance')->result_array();
        // return $data;
        if(!empty($data) && $data[0]['new_balance'] != 0){
            return $data[0]['new_balance'];
        } else {
            return NULL;
        }
    }

    function get_member_current_balance_report($member_id){
        // $data = $this->db->join('members', 'members.id = society_member_balance.member_id')->where(array('member_id'=>$member_id))->order_by('member_balance_id DESC')->limit('1')->get('society_member_balance')->row_array();
       
        // // return $data;
        // if(!empty($data) && $data[0]['new_balance'] != 0){
        //     return $data[0];
        // } else {
        //     return NULL;
        // }

        $this->db->select('name,flat_no,wing,phone,society_member_balance.new_balance');
        $this->db->join('members', 'members.id = society_member_balance.member_id');
        $this->db->order_by('society_member_balance.member_balance_id DESC');

        $this->db->order_by('society_member_balance.member_id ASC');

        $this->db->where(array('member_id'=>$member_id));
        $this->db->limit('1');
        $data= $this->db->get('society_member_balance')->row_array();      

        if(!empty($data)){
            return $data;
        } else {
            return NULL;
        }
    }    

    function get_current_balance($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('member_balance_id DESC')->limit('1')->get('society_member_balance')->result_array();
        if(!empty($data)){
            return $data[0];
        } else {
            return NULL;
        }
    }

    function get_member_previous_balance($member_id){
        $data = $this->db->where(array('member_id'=>$member_id))->order_by('member_balance_id DESC')->limit('1')->get('society_member_balance')->result_array();
        // return $data;
        if(!empty($data) && $data[0]['old_balance'] != 0){
            return $data[0]['old_balance'];
        } else {
            return NULL;
        }
    }

    function get_all_entries($member_id)
    {
        // $narration = 'Payment Received';
        $all_entries  = $this->db->query("select bill_date as date, 'bill' as type , id as id from bill_details where member_id = "."$member_id"." union select payment_date as date , 'payment' as type, id as id from payments where member_id = "."$member_id"." and narration = 'Payment Received' union select payment_date as date , 'credit_note' as type, id as id from payments where member_id = "."$member_id"." and is_credit_note = true union select payment_date as date , 'debit_note' as type, id as id from payments where member_id = "."$member_id"." and is_debit_note = true order by date asc")->result_array();
        return $all_entries;
    }

    // function get_member_ledger($member_id)
    // {
    //     // $narration = 'Payment Received';
    //     $ledger  = $this->db->query("select bd.bill_date as Entry_Date, bd.bill_no as Bill_No, null as Reciept_id, bd.details as Account, null as Narration, bd.total_due as Due, null as Amount_paid, p5.balance as Closing_Balance from bill_details as bd, payments as p5 where bd.payment_id = p5.id and bd.member_id = "."$member_id"." AND bd.total_due is not null union all select p.payment_date as Entry_Date, null as Bill_No, p.id as Reciept_No, p.paid_by as Account, p.narration as Narration, null as Due, p.debit as Amount_Paid, p.balance as Closing_Balance from payments as p where p.member_id = "."$member_id"." AND p.debit is not null and p.is_credit_note = false and p.is_debit_note = false and p.is_arrears = false union all select p1.payment_date as Entry_Date, null as Bill_No, p1.id as Reciept_No, null as Account, p1.narration as Narration, null as Due, p1.debit as Amount_Paid, p1.balance as Closing_Balance from payments as p1 where p1.member_id = "."$member_id"." AND p1.debit is not null and p1.is_credit_note = true and p1.is_debit_note = false and p1.is_arrears = false union all select p2.payment_date as Entry_Date, null as Bill_No, p2.id as Reciept_No, null as Account, p2.narration as Narration, p2.credit as Due, null as Amount_Paid, p2.balance as Closing_Balance from payments as p2 where p2.member_id = "."$member_id"." AND p2.credit is not null and p2.is_credit_note = false and p2.is_debit_note = true and p2.is_arrears = false union all select p3.payment_date as Entry_Date, null as Bill_No, p3.id as Reciept_No, null as Account, p3.narration as Narration, null as Due, p3.debit 0as Amount_Paid, p3.balance as Closing_Balance from payments as p3 where p3.member_id = "."$member_id"." AND p3.debit is not null and p3.is_credit_note = false and p3.is_debit_note = false and p3.is_arrears = true order by Entry_Date DESC")->result_array();
    //     return $ledger;
    // }
    function get_member_ledger($id)
    {
        $this->db->where('member_id', $id);
        $this->db->where('is_delete', 0);
        $this->db->order_by('id ASC');
        return $this->db->get('society_member_bill_payment_transaction_log')->result_array();
    }

   
    function get_all_member_ledger($member_id)
    {
        $this->db->join('members', 'members.id = society_member_bill_payment_transaction_log.member_id');        
        $this->db->where('member_id', $member_id);
        $this->db->where('is_delete', 0);
        $this->db->order_by('members.wing ASC');
        $this->db->order_by('members.flat_no ASC');
        return $this->db->get('society_member_bill_payment_transaction_log')->result_array();
    }
        
    /*
     * function to add new member
     */
    function add_member($params)
    {
        $this->db->insert('members',$params);
        return $this->db->insert_id();
    }

    /*Add society member bill payment logs*/
    function insert_bpm_logs($bpm_logs)
    {
        $this->db->insert('society_member_bill_payment_logs',$bpm_logs);
        return $this->db->insert_id();
    }

  

    /*Add society member bill payment logs*/
    function insert_bpm_txn_logs($bpm_txn_logs)
    {
        $this->db->insert('society_member_bill_payment_transaction_log',$bpm_txn_logs);
        return $this->db->insert_id();
    }
    
    /*
     * function to update member
     */
    function update_member($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('members',$params);
    }

    function insert_member_arrears($member_id,$principal_arrears){
        $dnt = time();
        $old_arrears = $this->get_member_current_arrears($member_id);
        $ins_mem_arrears = array('member_id'=>$member_id,'old_arrears'=>$old_arrears,'new_arrears'=>$principal_arrears,'dnt'=>$dnt);
        if($this->db->insert('member_arrears',$ins_mem_arrears))
            return true;
        else
            return false;
    }

    function insert_member_interest_arrears($member_id,$interest_arrears){
        $dnt = time();
        $old_interest = $this->get_member_current_intrest_arrears($member_id);
        $ins_mem_int_arrears = array('member_id'=>$member_id,'old_interest'=>$old_interest,'new_interest'=>$interest_arrears,'dnt'=>$dnt);
        if($this->db->insert('member_interest',$ins_mem_int_arrears))
            return true;
        else
            return false;
    }

    function insert_member_balance($member_id,$balance){
        $dnt = time();
        $old_balance = $this->get_member_current_balance($member_id);
        $ins_mem_balance = array('member_id'=>$member_id,'old_balance'=>$old_balance,'new_balance'=>$balance,'dnt'=>$dnt);
        if($this->db->insert('society_member_balance',$ins_mem_balance))
            return true;
        else
            return false;
    }

    function insert_society_member_transaction_log($member_id = 0, $amount = 0.00, $narration = "", $entity_id = 0, $description = ''){
        $params = array(
                "member_id"=>$member_id,
                "dnt"=>time(),
                "narration"=>$narration,
                "description"=>$description
        );
        switch ($narration) {
            case 'ARREARSTRANSFER':
                if($amount >= 0):
                    $params['debit'] = $amount;
                    $params['balance'] = $amount;
                else :
                    $params['credit'] = -$amount;
                    $params['balance'] = $amount;
                endif;
                $params['description'] = "Principal Arrears Transferred";
                break;
            case 'INTERESTARREARS':
                if($amount >= 0):
                    $params['debit'] = $amount;
                    $params['balance'] = $amount;
                endif;
                $params['description'] = "Interest Arrears Transferred";
                break;
            case 'BILLDUE':
                if($amount >= 0):
                    $params['debit'] = $amount;
                    $params['balance'] = $amount;
                else :
                    $params['credit'] = -$amount;
                    $params['balance'] = $amount;
                endif;
                break;
            case 'AMOUNTPAID':
                # code...
                break;
            case 'ARREARSPAID':
                # code...
                break;
            case 'INTERESTPAID':
                # code...
                break;
            case 'CREDITNOTE':
                # code...
                break;
            case 'DEBITNOTE':
                # code...
                break;
            default:
                # code...
                break;
        }

    }

    function update_member_balance($id,$params)
    {
        $this->db->set('member_balance', $params);
        $this->db->where('id',$id);
        return $this->db->update('members');
    }

    function update_member_by_user_id($id,$params)
    {
        $this->db->where('user_id',$id);
        return $this->db->update('members',$params);
    }

    function update_member_flat($member_id,$params)
    {
        $this->db->where('id',$member_id);
        return $this->db->update('members',$params);
    }
    
    /*
     * function to delete member
     */
    function delete_member($id, $user_id)
    {
        $this->db->delete('member_arrears',array('member_id'=>$id));
        $this->db->delete('member_interest',array('member_id'=>$id));
        $this->db->delete('society_member_balance',array('member_id'=>$id));
        $this->db->delete('society_member_bill_payment_logs',array('member_id'=>$id));
        $this->db->delete('society_member_bill_payment_transaction_log',array('member_id'=>$id));
        $this->db->delete('payments',array('member_id'=>$id));
        $this->db->delete('users',array('id'=>$user_id));
        if(!empty($user_id))
            $this->db->delete('users_roles',array('id'=>$user_id));
        //$this->db->delete('users_groups',array('user_id'=>$user_id));//discuss harsh sir users_groups table does not exit in live or test server  09-02-2022

        // if ($this->db->table_exists('sc_flat_acc_Details')) {
            // table exists (Your query)
        // } 
        $this->db->delete('sc_flat_acc_Details',array('flat_id'=>$id));               
        $this->db->delete('sc_flat_bill_accounting',array('flat_id'=>$id));

        return $this->db->delete('members',array('id'=>$id));
    }

    function delete_members_by_society_id($id)
    {
        $member = $this->db->get_where('members',array('society_id'=>$id))->result_array();
        foreach($member as $m){
            $this->db->delete('member_arrears',array('member_id'=>$m['id']));
            $this->db->delete('member_interest',array('member_id'=>$m['id']));
            $this->db->delete('society_member_balance',array('member_id'=>$m['id']));
            $this->db->delete('payments',array('member_id'=>$m['id']));
            $this->db->delete('society_member_bill_payment_logs',array('member_id'=>$m['id']));
            $this->db->delete('society_member_bill_payment_transaction_log',array('member_id'=>$m['id']));
            $this->db->delete('bill_details',array('member_id'=>$m['id']));
            $this->ion_auth->delete_user($m['user_id']);
        }
        return $this->db->delete('members',array('society_id'=>$id));
    }

    function delete_members_by_user_id($id)
    {
        return $this->db->delete('members',array('user_id'=>$id));
    }

    public function calculate_simple_interest($interest_rate, $last_month, $interestable_amount, $bill_date)
    {
        $principal_amount = $interestable_amount;
        $rate = $interest_rate;
        $bill_d = date('Y-m-d', strtotime($bill_date));
        $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

        $bill_month = date('m', strtotime($bill_date));
        $due_month = date('m', strtotime($due_date));

        $bill_year = date('Y', strtotime($bill_date));
        $due_year = date('Y', strtotime($due_date));

        $num = (($bill_year * 12) + $bill_month) - (($due_year * 12) + $due_month);

        $no_years = $num/12;
        $new_interest = $principal_amount * $no_years * $rate * 0.01;
        return round($new_interest, 2);
    }

    //calculate compound interest-monthly
    public function calculate_compound_interest($interest_rate, $last_month, $member_current_balance, $bill_date)
    {
        $bill_amount = $member_current_balance;
        $rate = $interest_rate;
        $bill_d = date('Y-m-d', strtotime($bill_date));
        $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

        $bill_month = date('m', strtotime($bill_date));
        $due_month = date('m', strtotime($due_date));

        $bill_year = date('Y', strtotime($bill_date));
        $due_year = date('Y', strtotime($due_date));

        $num = (($bill_year * 12) + $bill_month) - (($due_year * 12) + $due_month);

        $no_years = $num/12;
        $interest_rate = $rate/100;
        $interest = $bill_amount * $interest_rate * $no_years;
        return round($interest, 2);
    }

    // calculate fixed interest-monthly
    public function calculate_fixed_interest($interest_rate, $last_month, $member_current_balance, $bill_date)
    {
        $bill_amount = $member_current_balance;
        $interest = $interest_rate;
        $new_interest = 0;
        $num = 0;
        $bill_d = date('Y-m-d', strtotime($bill_date));
        $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

        $bill_month = date('m', strtotime($bill_date));
        $due_month = date('m', strtotime($due_date));

        $bill_year = date('Y', strtotime($bill_date));
        $due_year = date('Y', strtotime($due_date));

        $num = (($bill_year * 12) + $bill_month) - (($due_year * 12) + $due_month);

        $i = 0;
        while ($i <= $num)
        {
            $new_interest = $new_interest * $interest;
            $i +=1;
        }
        return round($new_interest, 2);
    }

    //calculate simple interest-daily
    public function calculate_simple_interest_daily($interest_rate, $last_month, $interestable_amount, $bill_date)
    {
        $interest = 0;
        $new_interest = 0;
        $principal_amount = $interestable_amount;
        $rate = $interest_rate/100;
        $bill_d = date('Y-m-d', strtotime($bill_date));
        $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

        $bill_month = date('m', strtotime($bill_date));
        $due_month = date('m', strtotime($due_date));

        $bill_year = date('Y', strtotime($bill_date));
        $due_year = date('Y', strtotime($due_date));

        $days_of_month = cal_days_in_month(CAL_GREGORIAN, $due_year, $due_month);
        $days = $bill_d - $due_date;
        $da = $days/365;
        $interest = $principal_amount * $interest_rate * $da;

        return round($interest, 2);
    }

    public function get_entity_date($entity_id,$entity_type,$member_id){
        $date = "2019-10-10";
        switch($entity_type){
            case "OPENINGBALANCE":
                $date = curret_fiscal_year_opening_date();
                break;
            case "BILLDUE":
                $res = $this->db->get_where('bill_details',array('member_id'=>$member_id,'bill_no'=>$entity_id))->result_array()[0]['bill_date'];
                $date = $res;
                break;
            case "AMOUNTPAID":
                $res = $this->db->get_where('payments',array('member_id'=>$member_id,'id'=>$entity_id))->result_array()[0]['payment_date'];
                $date = date('Y-m-d',strtotime($res));
                
                break;
            case "ARREARSPAID":
                $res = $this->db->get_where('payments',array('member_id'=>$member_id,'id'=>$entity_id,'is_arrears'=>1))->result_array()[0]['payment_date'];
                $date = $res;
                break;
            case "INTERESTPAID":
                # code...
                break;
            case "CREDITNOTE":
                $res = $this->db->get_where('payments',array('member_id'=>$member_id,'id'=>$entity_id,'paid_by'=>'Credit Note'))->result_array()[0]['payment_date'];
                $date = $res;
                break;
            case "DEBITNOTE":
                $res = $this->db->get_where('payments',array('member_id'=>$member_id,'id'=>$entity_id,'paid_by'=>'Debit Note'))->result_array()[0]['payment_date'];
                $date = $res;
                break;
        }
        return $date;
    }

    public function get_bill_register_op_balance($member_id,$bill_date){
        $rows = $this->db->get_where('society_member_bill_payment_transaction_log',array('member_id'=>$member_id,'is_delete'=>0))->result_array();
        foreach($rows as $index=>$row){
            $date = $this->get_entity_date($row['entity_id'],$row['narration'],$member_id);
            $rows[$index]['entity_date'] = $date;
        }

        $most_recent = 0;
        $now_date = date($bill_date);
        $bal = 0;
        $index = 0;

        foreach($rows as $i=>$r){
            $indexDate = $r['entity_date'];
            if($indexDate > $most_recent && $indexDate < $now_date){
                $most_recent = $indexDate;
                $index = $i;
                $bal = $r['balance']; 
            }
        }

        return $bal;
    }

    // API
    function get_all_members_by_userid_by_societyid($user_id,$society_id)
    {
        // $user_id = $this->session->userdata('user_id');
        $this->db->where('user_id', $user_id);
        $this->db->where('society_id', $society_id);
        $this->db->order_by('id', 'desc');
        return $this->db->get('members')->result_array();
    }

    function get_single_flat_details($id)
    {
        $this->db->where('id', $id);
        return $this->db->get('members')->result_array();
    }

    function members_arrears_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('member_arrears')->result_array();
    }

    function members_interest_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('member_interest')->result_array();
    }

    function society_member_balance_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('society_member_balance')->result_array();
    }

    function society_member_bill_payment_logs_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('society_member_bill_payment_logs')->result_array();
    }

    function society_member_bill_payment_transaction_log_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('society_member_bill_payment_transaction_log')->result_array();
    }

    function bill_details_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('bill_details')->result_array();
    }

    function payments_by_memberid($member_id)
    {
        $this->db->where('member_id', $member_id);
        return $this->db->get('payments')->result_array();
    }

    function get_flat_owner($member_id)
    {
        $this->db->select('first_name,last_name,users.phone as phone,email');
        $this->db->join('flat_owner', 'members.id = flat_owner.flat_id');
        $this->db->join('users', 'flat_owner.user_id = users.id');
        return $this->db->get_where('members',array('members.id'=>$member_id))->row_array();
    }


    /*
     * Get member by wing and flat no- sachhidanad 28-12-2021
     */
    function get_member_exit($wing,$flat_no,$society_id)
    {
        return $this->db->get_where('members',array('wing'=>$wing,'flat_no'=>$flat_no,"society_id"=>$society_id))->row();       
    }


    /*update society member bill payment logs  -sachhidanand 30-03-2022*/

    function update_bpm_logs($member_id,$params)
    {
        $this->db->where('type',"BILL");
        $this->db->where('member_id',$member_id);
        $this->db->order_by('id DESC');
        $this->db->limit(1);
        return $this->db->update('society_member_bill_payment_logs',$params);
    }

    function update_member_arrears($member_id,$params)
    {
        $this->db->where('member_id',$member_id);
        $this->db->order_by('id DESC');
        $this->db->limit(1);
        return $this->db->update('member_arrears',$params);
    }


    function update_society_member_balance($member_id,$balance){

        $this->db->where('member_id',$member_id);
        $this->db->order_by('member_balance_id DESC');
        $this->db->limit(1);
        return $this->db->update('society_member_balance',$balance);

       
    }

    
    
    /*Add society member bill payment logs*/
    function update_bpm_txn_logs($member_id,$bpm_txn_logs)
    {
        $this->db->where('member_id',$member_id);
        $this->db->order_by('id DESC');
        $this->db->limit(1);
        return $this->db->update('society_member_bill_payment_transaction_log',$bpm_txn_logs);
       
    }
    //check duplicate flat code -sachhidanand 
    function check_flat_code($flat_code)
    {       
        return $this->db->get_where('members',array('flat_code'=>$flat_code))->row();      
       
    }

    //get next member details-sachhidanand Gupta
    function get_next_member_details($society_id,$member_id,$type='')
    {
        if($type=="next"){
            $this->db->where(array('society_id'=>$society_id,'id >'=>$member_id));
            $this->db->limit(1);
            return $this->db->get('members')->row_array();
        }         

        if($type=="pre"){
            $this->db->where(array('society_id'=>$society_id,'id <'=>$member_id));
            $this->db->order_by('id DESC');
            $this->db->limit(1);
            return $this->db->get('members')->row_array();
        }
           
        
    }
    

}
