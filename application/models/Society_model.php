<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Society_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get society by id
     */
    function get_society($id)
    {
        return $this->db->get_where('societies',array('id'=>$id))->row_array();
    }

    function get_security_guard_indv($id)
    {
        return $this->db->get_where('security_guard',array('guard_id'=>$id))->row_array();
    }

    function get_security($id,$society_id)
    {
        return $this->db->get_where('security_guard',array('guard_id'=>$id, 'society_id'=>$society_id))->row_array();
    }

    function get_society_details($id)
    {
        return $this->db->get_where('societies',array('id'=>$id))->result();
    }
    
    function get_society_by_name_reg($society_name, $society_reg)
    {
        $this->db->where('name', $society_name);
        $this->db->where('registration_no', $society_reg);
        $society = $this->db->get('societies');
        return $society->result();
    }

    function get_noc_charge($society_id)
    {
        $this->db->select('noc_charge, noc_unit_value');
        $this->db->from('societies');
        $this->db->where('id', $society_id);
        return $this->db->get()->result_array();
    }  
    /*
     * Get all societies
     */
    function get_all_societies()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('societies')->result_array();
    }

    function get_security_guard($society_id)
    {
        $this->db->select('*');
        $this->db->from('security_guard');
        $this->db->where('society_id', $society_id);
        $this->db->order_by('security_guard_id', 'desc');
        return $this->db->get()->result_array();
    }

    function get_all_societies_for_access($ids)
    {
       
        $this->db->where_in('id', $ids);
        // $this->db->order_by('id', 'desc');
        return $this->db->get('societies')->result_array();
    }

    function get_all_societie()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('societies')->num_rows();
    }

    function get_all_bill_by_user($society_id)
    {
        $this->db->where('society_id', $society_id);
        // $this->db->not_like('bill_status', 'Paid');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_unpaid_by_user($society_id)
    {
        $this->db->join('members', 'members.id = bill_details.member_id');
        $this->db->where('bill_details.society_id', $society_id);
        $this->db->where('bill_status !=', 'Paid');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_unpaid_for_report($society_id)
    {
       $result= $this->db->query("SELECT  bd1.id as bill_id, m.id as member_id,bd1.bill_month,bd1.bill_amount,m.wing,m.flat_no,m.name,bd1.bill_status,bd1.total_due
       FROM members m
       JOIN bill_details bd1 ON (m.id = bd1.member_id)
       LEFT OUTER JOIN bill_details bd2 ON (m.id = bd2.member_id AND 
           (bd1.bill_month < bd2.bill_month OR (bd1.bill_month = bd2.bill_month AND bd1.id < bd2.id)))
       WHERE bd2.id IS NULL AND  bd1.`society_id` = '"."$society_id"."' AND bd1.`bill_status` != 'Paid' ")->result_array();
        return $result;

        // $this->db->join('members', 'members.id = bill_details.member_id');       
        // $this->db->where('bill_details.society_id', $society_id);
        // $this->db->where('bill_status !=', 'Paid');
        // return $this->db->get('bill_details')->result_array();
    }

    function get_expense_total($society_id)
    {
        $this->db->select_sum('amount');
        $this->db->where('society_id', $society_id);
        $this->db->group_by();
    }

    function bill_head($society_id)
    {
        $year = '2019';
        $bill_head_query = "SELECT 
            CASE WHEN MONTH(bill_month) = 1 THEN details END AS January,
            CASE WHEN MONTH(bill_month) = 2 THEN details END AS February,
            CASE WHEN MONTH(bill_month) = 3 THEN details END AS March,
            CASE WHEN MONTH(bill_month) = 4 THEN details END AS April,
            CASE WHEN MONTH(bill_month) = 5 THEN details END AS May,
            CASE WHEN MONTH(bill_month) = 6 THEN details END AS June,
            CASE WHEN MONTH(bill_month) = 7 THEN details END AS July,
            CASE WHEN MONTH(bill_month) = 8 THEN details END AS August,
            CASE WHEN MONTH(bill_month) = 9 THEN details END AS September,
            CASE WHEN MONTH(bill_month) = 10 THEN details END AS October,
            CASE WHEN MONTH(bill_month) = 11 THEN details END AS November,
            CASE WHEN MONTH(bill_month) = 12 THEN details END AS December
            FROM
            bill_details
            WHERE
            society_id = ".$society_id." and YEAR(bill_month) = ".$year;

        $bill_head = $this->db->query($bill_head_query)->result_array();
        return $bill_head;
    }

    function get_income_expense($society_id)
    {
        $year = date('Y',time());
        $income_query = "SELECT
            SUM(CASE WHEN MONTH(payment_date) = 1 THEN credit ELSE 0 END) AS January,
            SUM(CASE WHEN MONTH(payment_date) = 2 THEN credit ELSE 0 END) AS February,
            SUM(CASE WHEN MONTH(payment_date) = 3 THEN credit ELSE 0 END) AS March,
            SUM(CASE WHEN MONTH(payment_date) = 4 THEN credit ELSE 0 END) AS April,
            SUM(CASE WHEN MONTH(payment_date) = 5 THEN credit ELSE 0 END) AS May,
            SUM(CASE WHEN MONTH(payment_date) = 6 THEN credit ELSE 0 END) AS June,
            SUM(CASE WHEN MONTH(payment_date) = 7 THEN credit ELSE 0 END) AS July,
            SUM(CASE WHEN MONTH(payment_date) = 8 THEN credit ELSE 0 END) AS August,
            SUM(CASE WHEN MONTH(payment_date) = 9 THEN credit ELSE 0 END) AS September,
            SUM(CASE WHEN MONTH(payment_date) = 10 THEN credit ELSE 0 END) AS October,
            SUM(CASE WHEN MONTH(payment_date) = 11 THEN credit ELSE 0 END) AS November,
            SUM(CASE WHEN MONTH(payment_date) = 12 THEN credit ELSE 0 END) AS December
        FROM
            payments
        WHERE
            society_id = ".$society_id." and narration = 'Payment Recieved' and YEAR(payment_date) = ".$year;

        $income = $this->db->query($income_query)->result_array();

        $expense_query = "SELECT
            SUM(CASE WHEN MONTH(date) = 1 THEN amount ELSE 0 END) AS January,
            SUM(CASE WHEN MONTH(date) = 2 THEN amount ELSE 0 END) AS February,
            SUM(CASE WHEN MONTH(date) = 3 THEN amount ELSE 0 END) AS March,
            SUM(CASE WHEN MONTH(date) = 4 THEN amount ELSE 0 END) AS April,
            SUM(CASE WHEN MONTH(date) = 5 THEN amount ELSE 0 END) AS May,
            SUM(CASE WHEN MONTH(date) = 6 THEN amount ELSE 0 END) AS June,
            SUM(CASE WHEN MONTH(date) = 7 THEN amount ELSE 0 END) AS July,
            SUM(CASE WHEN MONTH(date) = 8 THEN amount ELSE 0 END) AS August,
            SUM(CASE WHEN MONTH(date) = 9 THEN amount ELSE 0 END) AS September,
            SUM(CASE WHEN MONTH(date) = 10 THEN amount ELSE 0 END) AS October,
            SUM(CASE WHEN MONTH(date) = 11 THEN amount ELSE 0 END) AS November,
            SUM(CASE WHEN MONTH(date) = 12 THEN amount ELSE 0 END) AS December
        FROM
            expenses
        WHERE
            society_id = ".$society_id." and YEAR(date) = ".$year;

        $expense = $this->db->query($expense_query)->result_array();

        $income_expense = array();
        foreach($income as $rows){
            foreach($rows as $key=>$value){
                $income_expense[$key]['income'] = $value;
            }
        }

        foreach($expense as $rows){
            foreach($rows as $key=>$value){
                $income_expense[$key]['expense'] = $value;
            }
        }
        return $income_expense;
    }
        
    /*
     * function to add new society
     */
    function add_society($params)
    {
        $this->db->insert('societies',$params);
        return $this->db->insert_id();
    }

    function add_security_guard($params)
    {
        $this->db->insert('security_guard',$params);
        return $this->db->insert_id();
    }

    function add_flat_owner($params)
    {
        $this->db->insert('flat_owner',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update society
     */
    function update_society($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('societies',$params);
    }

    function update_security_guard($id,$params)
    {
        $this->db->where('security_guard_id',$id);
        return $this->db->update('security_guard',$params);
    }

    function delete_guard($id)
    {
        return $this->db->delete('security_guard',array('security_guard_id'=>$id));
    }
    
    /*
     * function to delete society
     */
    function delete_society($id)
    {
        $this->db->delete('banks',array('society_id'=>$id));
        $this->db->delete('bank_transactions',array('society_id'=>$id));
        $this->db->delete('billing_heads',array('society_id'=>$id));
        $this->db->delete('bill_details',array('society_id'=>$id));
        $this->db->delete('expenses',array('society_id'=>$id));
        $this->db->delete('flat_types',array('society_id'=>$id));
        $this->db->delete('parking_charges',array('society_id'=>$id));
        $this->db->delete('payments',array('society_id'=>$id));
        $this->db->delete('society_accesses',array('society_id'=>$id));
        
        //add table for delete
        $this->db->delete('sc_acc_details',array('society_id'=>$id));
        $this->db->delete('sc_bank_acc_details',array('society_id'=>$id));
        $this->db->delete('sc_bill_head_accounting_details',array('society_id'=>$id));        
        $this->db->delete('sc_exp_category_accounting_details',array('society_id'=>$id));
        $this->db->delete('sc_flat_acc_Details',array('society_id'=>$id));
        $this->db->delete('sc_flat_bill_accounting',array('society_id'=>$id));
        $this->db->delete('sc_vendor_pay_accounting_details',array('society_id'=>$id));
               
        
        $member = $this->db->get_where('members',array('society_id'=>$id))->result_array();
        foreach($member as $m){
            $this->db->delete('member_arrears',array('member_id',$m['id']));
            $this->db->delete('member_interest',array('member_id',$m['id']));
            $this->db->delete('society_member_balance',array('member_id',$m['id']));
            $this->db->delete('society_member_bill_payment_logs',array('member_id',$m['id']));
            $this->db->delete('society_member_bill_payment_transaction_log',array('member_id',$m['id']));
            $this->db->delete('users',array('user_id',$m['user_id']));
            $this->db->delete('user_roles',array('id',$m['user_id']));
           
            // $this->db->delete('users_groups',array('user_id',$m['user_id']));
        }
        $this->db->delete('members',array('society_id'=>$id));
        return $this->db->delete('societies',array('id'=>$id));
    }

    function add_accounting_details($params)
    {
        $this->db->insert('sc_acc_details',$params);
        return $this->db->insert_id();
    }

    function accounting_details_insert($params)
    {
        $this->db->insert('sc_acc_details',$params);
        return $this->db->insert_id();
        
    }

    function get_society_accounting_details($society_id)
    {
        return $this->db->get_where('sc_acc_details',array('society_id'=>$society_id))->row();
    }

    function get_society_accounting_details_by_id($id)
    {
        return $this->db->get_where('sc_acc_details',array('sc_acc_id'=>$id))->row();
    }

    function update_society_accounting($society_id,$params)
    {
        $this->db->where('society_id',$society_id);
        $this->db->update('sc_acc_details',$params);
    }

    function get_accounting_group_by_name($group_name)
    {
        return $this->db->get_where('sc_bill_heads',array('bill_head_name'=>$group_name))->row();
    }
  
    function get_bill_heads($user_id=0)
    {
        $this->db->where('bill_head_id!=',10);
        $this->db->where('bill_head_id!=',11);
        $this->db->where('created_by',$user_id);
        $this->db->order_by('bill_head_name', 'asc');
        return $this->db->get('sc_bill_heads')->result_array();
    }

    // use society access -sachhidanand 06-12-2022
    function get_society_access($user_id)
    {
        $this->db->where('user_id', $user_id);
      
        $society = $this->db->get('society_accesses')->row();
        if(!empty($society)){
            return $society->society_id; 
        }else{
           return "0";
        }

      
    } 

    // available society for access -sachhidanand 06-12-2022
    function get_available_society_access($user_id)
    {
        $result= $this->db->query("select soc.id, soc.name from societies as soc where id not in (select soc_as.society_id from society_accesses as soc_as where soc_as.user_id = '"."$user_id"."')  order by soc.name ASC")->result_array();
        return $result;      
    } 

}
