<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Bill_detail_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Billing_head_model');
    }
    
    /*
     * Get bill_detail by id
     */
    function get_bill_detail($id)
    {
        return $this->db->get_where('bill_details',array('id'=>$id))->row_array();
    }

    function get_bill_page($bill_payment_id)
    {
        return $this->db->get_where('bill_details',array('bill_payment_id'=>$bill_payment_id))->row_array();
    }
        
    /*
     * Get all bill_details
     */
    function get_all_bill_details()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_by_month_society_id($society_id, $month)
    {
        $this->db->where('society_id', $society_id);
        $this->db->where('bill_month', $month);
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_by_month_society_member($society_id, $month, $member_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->where('bill_month', $month);
        $this->db->where('member_id', $member_id);
        return $this->db->get('bill_details')->result_array();
    }

    function get_member_bill_logs($member_id)
    {
        $this->db->select('id,bill_month,due_date,bill_amount,paid,bill_status,total_due');
        $this->db->where('member_id', $member_id);
        $this->db->order_by('bill_month', 'desc');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_by_date_member_id($bill_date, $member_id )
    {
        $this->db->where('bill_date <', $bill_date);
        $this->db->where('member_id', $member_id);
        $this->db->order_by('id', 'desc');
        $this->db->limit(1);
        return $this->db->get('bill_details')->result_array();
    }

    function get_bill_by_date_member_id($member_id, $bill_date)
    {
        $this->db->where('member_id', $member_id);
        $this->db->where('bill_date', $bill_date);
        // $this->db->order_by('id', 'ASC');
        // $this->db->limit(1);
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_by_member_society($society_id, $member_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->where('member_id', $member_id);
        $this->db->order_by('id', 'desc');
        return $this->db->get('bill_details')->result_array();
    }

    function get_last_bill_details($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->order_by('bill_no', 'ASC');
        $this->db->limit(1);
        return $this->db->get('bill_details')->result_array();
    }

    function get_last_bill_details_member($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->order_by('bill_month', 'desc');
        $this->db->limit(1);
        return $this->db->get('bill_details')->result_array();
    }

    function get_last_bill_by_society($society_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->order_by('bill_month', 'desc');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_by_member($member_id)
    {
        $this->db->where('member_id', $member_id);
        // $this->db->not_like('bill_status', 'Paid');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_unpaid_by_member($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->where('bill_status !=', 'Paid');
        $this->db->order_by('bill_month', 'desc');
        return $this->db->get('bill_details')->result_array();
    }

    function get_all_bill_unpaid_by_member_update($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->where('bill_status !=', 'Paid');
        $this->db->order_by('bill_month', 'asc');
        return $this->db->get('bill_details')->result_array();
    }

    function get_bill_month_bill_by_socioety($society_id)
    {
      $this->db->select('bill_month');
      $this->db->where('society_id', $society_id);
      $this->db->group_by('bill_month');
      $this->db->order_by('bill_month', 'desc');
      return $this->db->get('bill_details')->result_array();
    }

    function get_reciept_data($society_id, $bill_month)
    {
      $reciept_data = $this->db->query("select bd.*, m.id as member_id, m.flat_no, m. wing, m.flat_code,m.code_used,m.name as member_name, m.member_balance,m.flat_type_id as flat_type_id,m.flat_area as flat_area, m.principal_arrears as member_principal_arrears, m.interest_arrears as member_interest_arrears ,m.tenant,m.two_wheelers,m.four_wheelers, b.bank_name, b.branch, b.ifsc, b.ac_no,s.qr_code as qrCode,s.name as societyname, s.address,s.gstin,s.is_gst,s.registration_no from bill_details as bd join societies as s on bd.society_id = s.id join members as m on bd.member_id = m.id join banks as b on s.id = b.society_id where s.id ='"."$society_id"."' and b.is_default = 1 and bd.bill_month = '"."$bill_month"."' group by id order by bd.bill_no asc")->result_array();
      return $reciept_data;
    }

    function get_bill_data($society_id, $bill_month)
    {
      //add condition on this query for defaulr bank 
      
      //$reciept_data = $this->db->query("select bd.*, m.id as member_id, m.flat_no, m. wing, m.flat_code,m.code_used,m.name as member_name, m.member_balance,m.flat_area as flat_area, m.principal_arrears as member_principal_arrears, m.interest_arrears as member_interest_arrears,s.name as societyname, s.address,s.gstin,s.is_gst,s.registration_no,s.full_mode from bill_details as bd join societies as s on bd.society_id = s.id join members as m on bd.member_id = m.id where s.id ='"."$society_id"."' and bd.bill_month = '"."$bill_month"."' group by id order by bd.bill_no ASC")->result_array();
      $reciept_data = $this->db->query("select bd.*, m.id as member_id, m.flat_no, m. wing, m.flat_code,m.code_used,m.name as member_name, m.member_balance,m.flat_type_id as flat_type_id,m.flat_area as flat_area, m.principal_arrears as member_principal_arrears, m.interest_arrears as member_interest_arrears,m.tenant,m.two_wheelers,m.four_wheelers, b.bank_name, b.branch, b.ifsc, b.ac_no,s.qr_code as qrCode,s.name as societyname, s.address,s.gstin,s.is_gst,s.registration_no from bill_details as bd join societies as s on bd.society_id = s.id join members as m on bd.member_id = m.id join banks as b on s.id = b.society_id where s.id ='"."$society_id"."' and b.is_default = 1 and bd.bill_month = '"."$bill_month"."' group by id order by bd.bill_no asc")->result_array();
      return $reciept_data;
    }

    function get_register_data($society_id, $bill_month)
    {
      // $reciept_data = $this->db->query("select bd.*, m.id as member_id, m.flat_no, m. wing, m.name as member_name, m.member_balance,m.flat_type_id as flat_type_id,m.flat_area as flat_area, m.principal_arrears as member_principal_arrears, m.interest_arrears as member_interest_arrears, b.bank_name, b.branch, b.ifsc, b.ac_no, s.name as societyname, s.address, s.registration_no from bill_details as bd join societies as s on bd.society_id = s.id join members as m on bd.member_id = m.id join banks as b on s.id = b.society_id where s.id ='"."$society_id"."' and bd.bill_month = '"."$bill_month"."' group by id order by m.wing ASC, m.flat_no asc")->result_array();

      $reciept_data = $this->db->query("select bd.*, m.id as member_id, m.flat_no, m. wing, m.name as member_name, m.member_balance,m.flat_type_id as flat_type_id,m.flat_area as flat_area, m.principal_arrears as member_principal_arrears, m.interest_arrears as member_interest_arrears, s.name as societyname, s.address, s.registration_no from bill_details as bd join societies as s on bd.society_id = s.id join members as m on bd.member_id = m.id  where s.id ='"."$society_id"."' and bd.bill_month = '"."$bill_month"."' group by id order by m.wing ASC, m.flat_no asc")->result_array();


      return $reciept_data;
    }
    
    function total_opening_balance($society_id, $bill_month)
    {
      $total_opening_balance = $this->db->select_sum('previous_member_balance');
      $this->db->where('society_id', $society_id);
      $this->db->where('bill_month', $bill_month);
      return $this->db->get('bill_details')->result();
    }

    function total_interest($society_id, $bill_month)
    {
      $total_interest = $this->db->select_sum('interest');
      $this->db->where('society_id', $society_id);
      $this->db->where('bill_month', $bill_month);
      return $this->db->get('bill_details')->result();
    }

    function total_bill_amount($society_id, $bill_month)
    {
      $total_bill_amount = $this->db->select_sum('bill_amount');
      $this->db->where('society_id', $society_id);
      $this->db->where('bill_month', $bill_month);
      return $this->db->get('bill_details')->result();
    }

    function total_due($society_id, $bill_month)
    {
      $total_due = $this->db->select_sum('total_due');
      $this->db->where('society_id', $society_id);
      $this->db->where('bill_month', $bill_month);
      return $this->db->get('bill_details')->result();
    }
    /*
     * function to add new bill_detail
     */
    function add_bill_detail($params)
    {
        $this->db->insert('bill_details',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update bill_detail
     */
    function update_bill_detail($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('bill_details',$params);
    }
    
    /*
     * function to delete bill_detail
     */
    function delete_bill_detail($id)
    {
        return $this->db->delete('bill_details',array('id'=>$id));
    }

    function update_all_bill_status($member_id){
      $this->db->where('member_id',$member_id);
      $this->db->where('bill_status !=','Paid');
      return $this->db->update('bill_details',array('paid'=>1,'bill_status'=>'Paid'));
    }

    function update_all_bill_delayed($member_id){
      $this->db->where('member_id',$member_id);
      $this->db->where('bill_status !=','Paid');
      return $this->db->update('bill_details',array('is_delayed'=>1));
    }

    function update_old_bill_delayed($bill_id){
      $this->db->where('id !=',$bill_id);
      $this->db->where('bill_status !=','Paid');
      return $this->db->update('bill_details',array('is_delayed'=>1));
    }

    // function update_bill_partially_paid($member_id){
    //   $last_bill = $this->get_last_bill_details_member($member_id);
    //   $this->db->where('member_id',$member_id)->where('id != '.$last_bill[0]['id'])->update('bill_details',array('paid'=>'1','bill_status'=>'Paid'));
    //   $this->db->where('member_id',$member_id)->where('id',$last_bill[0]['id'])->update('bill_details',array('paid'=>'-1','bill_status'=>'Partially Paid'));
    //   return TRUE;
    // }

    function update_bill_partially_paid($member_id,$amount,$payment_id){
      $last_bill = $this->Bill_detail_model->get_all_bill_unpaid_by_member_update($member_id);
        $count_bills = count($last_bill);
        $remaining = $amount;
        $i = 0;
        for($i == 0; $i < count($last_bill);$i++)
        {
            if($remaining > 0)
            {
                $bill_amount = $last_bill[$i]['bill_amount'] + $last_bill[$i]['interest'];
                $remaining = $remaining - $bill_amount;
                if($remaining > 0 || $remaining == 0)
                {
                  $this->db->where('member_id',$member_id)->where('id',$last_bill[$i]['id'])->update('bill_details',array('paid'=>'1','bill_status'=>'Paid','payment_id'=>$payment_id));
                }
                elseif($remaining < 0){
                  $this->db->where('member_id',$member_id)->where('id',$last_bill[$i]['id'])->update('bill_details',array('paid'=>'-1','bill_status'=>'Partially Paid','payment_id'=>$payment_id));
                }
            }
        }
      return $count_bills;
    }

    public function update_bill_details($entry_id, $member_id, $member_initial_balance)
    {
        $entry_id = $entry_id;
        $member_id = $member_id;
        $member_initial_balance = $member_initial_balance;
        $response = array();
        $new_bill = $this->Bill_detail_model->get_bill_detail($entry_id);
        $bill_date = $new_bill['bill_date'];
        $society_id = $new_bill['society_id'];
        $society = $this->Society_model->get_society($society_id);
        $last_month = date('Y-m-d',strtotime($new_bill['bill_date']." -1 month"));
        $total_bill_amt = $new_bill['bill_amount'];
        $member = $this->Member_model->get_single_member($member_id);
        $last_bill = $this->Bill_detail_model->get_all_bill_by_date_member_id($bill_date, $member_id);
        $last_payment = $this->Payment_model->get_last_payment_details($member_id, $bill_date);
        $current_member_balance = $member_initial_balance;
        $flat_type = $this->Flat_type_model->get_flat_type($member[0]->flat_type_id);
        $billing_heads = $this->Billing_head_model->get_all_billing_heads($member[0]->flat_type_id);
        $last_total_interest_arrears = $last_bill != NULL ? $last_bill['total_interest_arrears'] : $member[0]->interest_arrears;
        $last_total_arrears = $last_bill != NULL ? $last_bill['total_arrears'] : $member[0]->principal_arrears;
        $last_total_due = $last_bill != NULL ? $last_bill['total_due'] : 0;
        $last_payment_date = $last_payment != NULL ? $last_payment[0]['payment_date'] : 0;
        $last_payment_balance = $last_payment != NULL ? $last_payment[0]['balance'] : $current_member_balance;
        $interest = 0;
        $interestable_amount = 0;
        $total_due = 0;

        if($last_bill == NULL && $last_payment != NULL):
          $amount = $last_payment[0]['debit'];
          $member_principal_arrears = $member[0]->principal_arrears;
          $member_interest_arrears = $member[0]->interest_arrears;
          if($amount - $member_interest_arrears >= 0):
            $remaining_balance = $amount - $member_interest_arrears;
            $last_total_interest_arrears = 0;
            if($remaining_balance - $member_principal_arrears >= 0):
              $remaining_balance = $remaining_balance - $member_principal_arrears;
              $last_total_arrears = 0;
            else:
              $last_total_arrears = $member_principal_arrears - $remaining_balance;
            endif;
          else:
            $last_total_interest_arrears = $member_interest_arrears - $amount;
          endif;
        endif;

        if($current_member_balance <= 0):
          #calculating interest for current bill
          $interestable_amount = -($current_member_balance) - $last_total_interest_arrears;
          if($society['interest_type'] == 'Compound Interest'):
            $interest = $this->Member_model->calculate_compound_interest($society['interest_rate'], $last_month, $current_member_balance, $bill_date);
          elseif($society['interest_type'] == 'Simple Interest'):
            $interest = $this->Member_model->calculate_simple_interest($society['interest_rate'], $last_month, $interestable_amount, $bill_date);
          elseif($society['interest_type'] == 'Fixed Interest'):
            $interest = $this->Member_model->calculate_fixed_interest($society['interest_rate'], $last_month, $interestable_amount, $bill_date);
          endif;
        else:
          $interest = 0;
          $interestable_amount = 0;
        endif;
        if ($last_payment != NULL && $last_bill != NULL):
          if ($last_payment['payment_date'] > $last_bill['due_date']): 
            #calculating interest for current bill
            $late_amount = $last_bill['total_due'] - $last_total_interest_arrears;
            if($society['interest_type'] == 'Compound Interest'):
                $interest = $this->Member_model->calculate_compound_interest($society['interest_rate'], $last_month, $current_member_balance, $bill_date);
            elseif($society['interest_type'] == 'Simple Interest'):
                $interest = $this->Member_model->calculate_simple_interest($society['interest_rate'], $last_month, $late_amount, $bill_date);
            elseif($society['interest_type'] == 'Fixed Interest'):
                $interest = $this->Member_model->calculate_fixed_interest($society['interest_rate'], $last_month, $late_amount, $bill_date);
            endif;
          endif;
        endif;


      $total_due = -($current_member_balance) + $total_bill_amt + $interest;

      $ret['interest'] = $new_bill['interest'] = $interest;
      $ret['bill_amount'] = $new_bill['bill_amount'] = $total_bill_amt;
      $ret['principal_arrears'] = $new_bill['principal_arrears'] = $interestable_amount;
      $ret['total_arrears'] = $new_bill['total_arrears'] = $interestable_amount;
      $ret['total_interest_arrears'] = $new_bill['total_interest_arrears'] = $last_total_interest_arrears + $interest;
      $ret['interest_arrears'] = $new_bill['interest_arrears'] = $last_total_interest_arrears;
      $ret['total_due'] = $new_bill['total_due'] = $total_due;
      $ret['previous_member_balance'] = $new_bill['previous_member_balance'] = $current_member_balance;
      if($total_due <= 0):
        $new_bill['bill_status'] = "Paid";
      else:
        $new_bill['bill_status'] = "Unpaid";
      endif;
      $id = $new_bill['id']; 
      $bill = $this->Bill_detail_model->update_bill_detail($id, $new_bill);

      $payment = $this->Payment_model->get_payment_bill_id($entry_id);
      // echo"<pre>";print_r($payment);die;
      if($payment != NULL):
        $payment['credit'] = $total_due;
        $ret['payment_balance'] = $payment['balance'] = $last_payment_balance + $total_due;
        $id = $payment['id'];
        $pay = $this->Payment_model->update_payment($id, $payment);
      else:
        $payment['credit'] = $total_due;
        $payment['due_date'] = $new_bill['due_date'];
        $ret['payment_balance'] = $payment['balance'] = $last_payment_balance + $total_due;
        $payment['member_id'] = $member[0]->id;
        $payment['society_id'] = $member[0]->society_id;
        $payment['bill_id'] = $new_bill['id'];
        $payment['narration'] = $new_bill['bill_month'].'_'.'Bill';
        $id = $payment['id'];
        $pay = $this->Payment_model->update_payment($id, $payment);
      endif;

      $balance = $ret['member_balance'] = $dat['member_balance'] = -($total_due);
      $member_id = $member[0]->id;
      $id = $member_id;
      // echo"<pre>"; print_r($balance);die;
      $mem = $this->Member_model->update_member_balance($id, $balance);
      return $ret;
  } #end_update_bill_detail method

  public function get_bills_by_date($bill_date, $society_id)
  {
    $this->db->where('bill_date', $bill_date);
    $this->db->where('society_id', $society_id);
    return $this->db->get('bill_details')->result_array();
  }

  public function delete_latest_bill($society_id)
  {
    $last_bill = $this->get_last_bill_by_society($society_id);
    $bill_date = $last_bill[0]['bill_date'];

    $bills = $this->get_bills_by_date($bill_date, $society_id);

    $ma_del = array();
    $mi_del = array();
    $mb_del = array();
    $bill_del = array();

    foreach($bills as $bill)
    {
      // echo"<pre>";print_r($bill);die;

      //delete bill in accounting module
      $this->ledger->bill_entry_delete($bill['society_id'],$bill['bill_ledger_id']);
     
        $current_arrear = $this->Member_model->get_current_arrears($bill['member_id']);
        $ma_del[$current_arrear['id']] = $this->db->delete('member_arrears',array('id' => $current_arrear['id']));

        $current_interest = $this->Member_model->get_current_intrest_arrears($bill['member_id']);
        if($current_interest )
            $mi_del[$current_interest['id']] = $this->db->delete('member_interest',array('id' => $current_interest['id']));

        $current_balance = $this->Member_model->get_current_balance($bill['member_id']);  
       
        $mb_del[$current_balance['member_balance_id']] = $this->db->delete('society_member_balance',array('member_balance_id' => $current_balance['member_balance_id']));

       
        $txn = array(
          'is_delete' => 1,
        );
        $this->update_society_member_bill_payment_txn_log($bill['bill_no'], $bill['member_id'], $txn);
      
      
    }
    
    $bill_del['bills'] = $this->db->delete('bill_details',array('society_id' => $society_id, 'bill_date' => $bill_date));
    $bill_del['ma_del'] = $ma_del;
    $bill_del['mi_del'] = $mi_del;
    $bill_del['mb_del'] = $mb_del;

    return $bill_del;
  }

  // function update_society_member_bill_payment_log($id, $member_id, $log)
  // {
  //     $this->db->where('entity_id',$id);
  //     $this->db->where('member_id',$member_id);
  //     $this->db->where('type','BILL');
  //     return $this->db->update('society_member_bill_payment_logs',$log);
  // }

  function update_society_member_bill_payment_txn_log($id, $member_id, $txn)
  {
      $this->db->where('entity_id',$id);
      $this->db->where('member_id',$member_id);
      $this->db->where('narration','BILLDUE');
      return $this->db->update('society_member_bill_payment_transaction_log',$txn);
  }

  function get_last_month_bill_by_society($society_id,$month)
  {
    $query  = $this->db->query("SELECT * FROM `bill_details` where `society_id` = $society_id AND month(`bill_date`) =  $month");
    return $query->result_array();
  }

  function get_that_bill($member_id,$society_id,$bill_date,$frequency)
  {
    // calculate the n th month
    $interestable_amount = 0.00;
    $search_in_date = date('Y-m-d', strtotime($bill_date.'-'.$frequency.' months'));
    $month = date('m',strtotime($search_in_date));
    // echo $search_in_date;echo"<br>";
    // echo $month;echo"<br>";
    // get bill of that n th month
    $this->db->where('member_id',$member_id);
    $this->db->where('society_id',$society_id);
    $this->db->where('bill_status !=',"Paid");
    $this->db->where('month(bill_date)',$month);
    $bill = $this->db->get('bill_details')->row_array();
    // print_r($this->db->last_query());echo"<br>";
    // print_r($bill);return;
    // if there is such bill go for further calculation
    if($bill)
    {
      // if bill is unpaid take only that bill amount as interestable amount
      if($bill['bill_status'] == 'Unpaid'){
        $interestable_amount = $bill['total_due'];
      }
      // if bill is partially paid get payment amount and subtract from total due amount of that bill
      // take result of substraction as interestable amount
      elseif($bill['bill_status'] == 'Partially Paid')
      {
          $this->db->where('member_id',$member_id);
          $this->db->where('society_id',$society_id);
          $this->db->where('id',$$bill['payment_id']);
          $payment = $this->db->get('payments')->row_array();
          $interestable_amount = $bill['total_due'] - $payment['credit'];
      }
      // else interestable amount will be 0
      else
      {
          $interestable_amount = $interestable_amount;
      }
    }
    return $interestable_amount;
  }


  /*
   Author -sachhidnand
   method -get society list for generate bill automatic every day
   date- 28-05-2022
   */

  
   function get_auto_society($get_day)
   {
       $this->db->where('bill_day', $get_day);
       $this->db->where('auto_create_bill', 1);
       $society = $this->db->get('societies');
       return $society->result();
   }

   
}
