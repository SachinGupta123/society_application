<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Payment_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }
    
    /*
     * Get payment by id
     */
    function get_payment($id)
    {
        return $this->db->get_where('payments',array('id'=>$id))->row_array();
    }

    function get_last_payment_details($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->where('narration', 'Payment Received');
        $this->db->order_by('receipt_id', 'desc');
        $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_payment_by_date_society($date, $society_id)
    {
      $this->db->where('payment_date >', $date);
      $this->db->where('society_id', $society_id);
      return $this->db->get('payments')->result_array();
    }

    function get_payment_by_member($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->order_by('id', 'ASC');
        // $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_payment_by_member_id($member_id)
    {
        $this->db->select('id,payment_date,paid_by,narration,credit,debit,status');
        $this->db->where('member_id', $member_id);
        $this->db->where('narration', 'Payment Received');
        $this->db->order_by('payment_date', 'desc');
        // $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_payment_history_by_member_id($member_id)
    {
        // $this->db->select('id,payment_date,paid_by,narration,credit,debit,status');
        $this->db->where('member_id', $member_id);
        $this->db->where('narration', 'Payment Received');
        $this->db->order_by('payment_date', 'desc');
        // $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_payment_list_by_member_id($member_id)
    {
        $this->db->select('id,payment_date,narration,credit,status');
        $this->db->where('member_id', $member_id);
        $this->db->where('narration', 'Payment Received');
        // $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_all_payment_list_by_member_id($member_id)
    {
        // $this->db->select('id,payment_date,narration,credit,status');
        $this->db->where('member_id', $member_id);
        $this->db->where('narration', 'Payment Received');
        // $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_payment_list_for_report($society_id)
    {
      $this->db->select('payments.id,payment_date,narration,debit,credit,paid_by,payments.society_id,member_id,name,wing,flat_no,phone');
      $this->db->join('members', 'members.id = payments.member_id');
      $this->db->where('payments.society_id', $society_id);
      $this->db->where('narration', 'Payment Received');
      $this->db->order_by('payment_date', 'ASC');
      return $this->db->get('payments')->result_array();
    }

    function get_payment_list_by_society_id($society_id)
    {
      $this->db->select('payments.id,payment_date,narration,debit,credit,paid_by,payments.society_id,member_id,name,wing,flat_no,phone');
      $this->db->join('members', 'members.id = payments.member_id');
      $this->db->where('payments.society_id', $society_id);
      $this->db->where('narration', 'Payment Received');
      $this->db->order_by('payment_date', 'desc');
      return $this->db->get('payments')->result_array();
    }

    function get_total_revenue_by_society_id($society_id)
    {
      $total_revenue = 0;
      $member = $this->db->get_where('members',array('society_id'=>$society_id))->result_array();
      foreach($member as $m){
        // $current_balance = $this->db->where(array('member_id'=>$m['id']))->limit(1)->order_by('member_balance_id DESC')->get('society_member_balance')->result_array()[0]['new_balance'];
        $rev = $this->db->select_sum('credit')->where(array('member_id'=>$m['id'], 'narration'=>'AMOUNTPAID'))->get('society_member_bill_payment_transaction_log')->result_array()[0]['credit'];
        $total_revenue += $rev;
      }
        // print_r($total_revenue);die;
        if($total_revenue <= 0):
          return 0.00;
        else:
          return $total_revenue;
        endif;
      //$this->db->get('bill_details')->result_array()[0]['total_due']
    }

    function get_late_payment($last_due_date, $current_bill_date, $member_id)
    {
      $this->db->select('*')->from('payments')
                        ->where('member_id', $member_id)
                        ->where("payment_date BETWEEN '".$last_due_date."' AND '".$current_bill_date."'");
      return $this->db->get()->result_array();
    }

    function get_payment_reciept($member_id, $payment_date,$bill_date)
    {
      // $narration = ("Bill Payment","Payment for interest_arrears","Payment for principal arrears")
      $this->db->where("payment_date BETWEEN '".$payment_date."' AND '".$bill_date."'");
      $this->db->where('narration', 'Payment Received');
      $this->db->where('member_id', $member_id);
        $this->db->order_by('receipt_id', 'desc');
        $data = $this->db->get('payments')->result_array();
        return $data;
    }

    function get_all_notes($member_id, $last_month, $bill_month)
    {
      $this->db->select('*')->from('payments')
                        ->where('member_id', $member_id)
                        ->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'")
                        ->group_start()
                          ->where('is_credit_note', 1)
                          ->or_where('is_debit_note', 1)
                        ->group_end();
      //var_dump($this->db->get_compiled_select('payments',false));
      return $this->db->get()->result_array();
    }

    function get_credit_notes_sum($society_id, $last_month, $bill_month)
    {
    // echo"<pre>";print_r($society_id);die;
      $this->db->select_sum('credit');
      $this->db->where('society_id', $society_id);
      $this->db->where('is_credit_note', 1);
      $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_debit_notes_sum($society_id, $last_month, $bill_month)
    {
      $this->db->select_sum('credit');
      $this->db->where('society_id', $society_id);
      $this->db->where('is_debit_note', 1);
      $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_debit_notes($society_id)
    {
      // $this->db->select_sum('credit');
      $this->db->where('society_id', $society_id);
      $this->db->where('is_debit_note', 1);
      // $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_credit_notes($society_id)
    {
      // $this->db->select_sum('credit');
      $this->db->where('society_id', $society_id);
      $this->db->where('is_credit_note', 1);
      // $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_debit_notes_member($member_id)
    {
      // $this->db->select_sum('credit');
      $this->db->where('member_id', $member_id);
      $this->db->where('is_debit_note', 1);
      // $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_credit_notes_member($member_id)
    {
      // $this->db->select_sum('credit');
      $this->db->where('member_id', $member_id);
      $this->db->where('is_credit_note', 1);
      // $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_credit_note_bill($member_id, $last_month, $bill_month)
    {
      $this->db->where('member_id', $member_id);
      // $this->db->where('society_id', $society_id);
      $this->db->where('is_credit_note', 1);
      $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_debit_note_bill($member_id, $last_month, $bill_month)
    {
      // $this->db->select_sum('credit');
      $this->db->where('member_id', $member_id);
      $this->db->where('is_debit_note', 1);
      $this->db->where("payment_date BETWEEN '".$last_month."' AND '".$bill_month."'");
      return $this->db->get('payments')->result_array();
    }

    function get_last_payment_by_date_member_id($member_id, $bill_date)
    {
        $this->db->where('member_id', $member_id);
        $this->db->where('payment_date <', $bill_date);
        $this->db->where('narration', "Payment Received");
        $this->db->order_by('id', 'desc');
        $this->db->limit(1);
        return $this->db->get('bill_details')->result_array();
    }

    function get_first_payment_details($member_id)
    {
        $this->db->where('member_id', $member_id);
        $this->db->order_by('receipt_id', 'ASC');
        $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }

    function get_last_receipt($society_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->order_by('receipt_id', 'desc');
        $this->db->limit(1);
        $pay = $this->db->get('payments')->result_array();
        if(!empty($pay) && $pay[0]['receipt_id'] != 0){
          return $pay[0]['receipt_id'];
        } else {
          return 0;
        }
    }

    function get_payment_bill_id($bill_id)
    {
        return $this->db->get_where('payments',array('bill_id'=>$bill_id))->row_array();
    }

    
    function get_all_payment_by_member_society($society_id, $member_id)
    {
        $this->db->where('society_id', $society_id);
        $this->db->where('member_id', $member_id);
        $this->db->order_by('payment_date', 'ASC');
        // $this->db->limit(1);
        return $this->db->get('payments')->result_array();
    }
        
    /*
     * Get all payments
     */
    function get_all_payments()
    {
        $this->db->order_by('id', 'desc');
        return $this->db->get('payments')->result_array();
    }
        
    /*
     * function to add new payment
     */
    function add_payment($params)
    {
        $this->db->insert('payments',$params);
        return $this->db->insert_id();
    }
    
    /*
     * function to update payment
     */
    function update_payment($id,$params)
    {
        $this->db->where('id',$id);
        return $this->db->update('payments',$params);
    }
    
    /*
     * function to delete payment
     */
    function delete_payment($id)
    {
        return $this->db->delete('payments',array('id'=>$id));
    }

    public function update_arrear_debit($payment_id,$member_id,$member_balance)
    {
    $ret = array();
    $ret['member_balance'] = $member_balance;
    $payment_id = $payment_id;
    $member_id = $member_id;
    $member_balance = $member_balance;

    $payment_entry = $this->Payment_model->get_payment($payment_id);

    $amount = $payment_entry['debit'];
    $member = $this->Member_model->get_single_member($member_id);
   
    $bill_detail = $this->Bill_detail_model->get_all_bill_by_date_member_id($payment_entry['payment_date'], $member_id);
    // echo"<pre>";print_r($bill_detail);die;
    $balance = $member_balance + $amount;

    if($balance >= 0):
      $balance1 = $ret['payment_balance'] = 0;
      $payment_entry['balance'] = 0;
    elseif($balance < 0):
      $balance1 = $ret['payment_balance'] = -($balance);
      $payment_entry['balance'] = -($balance);
    endif;

    $arrears = $bill_detail != NULL ? $bill_detail['total_arrears'] : $member['principal_arrears'];
    $interest_arrears = $bill_detail != NULL ? $bill_detail['total_interest_arrears'] : $member['interest_arrears'];
    $bal1 = $member_balance;

    if($amount - $interest_arrears >= 0):
      $last_payment_balance = $balance2 = -($member_balance) - $interest_arrears;
      if($bill_detail != NULL):
        $bill_detail['total_interest_arrears'] = $ret['total_interest_arrears'] = 0;
      endif;
      $remaining_balance = $amount - $interest_arrears;
      if($remaining_balance != 0 && $remaining_balance - $arrears >= 0):
        $last_payment_balance =  $balance3 = $last_payment_balance - $arrears;
        if($bill_detail != NULL):
          $bill_detail['total_arrears'] = $ret['total_arrears'] = 0;
        endif;
        $remaining_balance = $remaining_balance - $arrears;
        if($remaining_balance != 0 && $remaining_balance -(-($member_balance) - ($arrears + $interest_arrears)) >= 0):
          if($bill_detail != NULL):
            $bal1 = $balance4 = $last_payment_balance - (-($member_balance) - ($arrears + $interest_arrears)) > 0 ? 0 : $last_payment_balance - (-($member_balance) - ($arrears + $interest_arrears));
            $balance = $member['member_balance'] = $ret['member_balance'] = $remaining_balance - (-($member_balance) - ($arrears + $interest_arrears));
          else:
            $bal1 = (-($member_balance) - ($arrears + $interest_arrears)) - $remaining_balance;
          endif;
        else:
          $balance5 = $last_payment_balance - $remaining_balance;
          $bal1 = 0 - $balance5;
          if($bill_detail != NULL):
            $ret['total_arrears'] = $bill_detail['total_arrears'] - $remaining_balance;
            $bill_detail['total_arrears'] = $ret['total_arrears'];
          endif;
        endif;
      else:
        $balance6 = $last_payment_balance - $remaining_balance;
        if($bill_detail != NULL):
          $ret['total_arrears'] = $bill_detail['total_arrears'] - $remaining_balance;
          $bill_detail['total_arrears'] = $ret['total_arrears'];
        endif;
        $bal1 = 0 - $balance6;
      endif;
    else:
      $balance7 = $balance1;
      $bal1 = 0 - $balance7;
      if($bill_detail != NULL):
        $ret['total_interest_arrears'] = $bill_detail['total_interest_arrears'] - $amount;
        $bill_detail['total_interest_arrears'] = $ret['total_interest_arrears'];
      endif;
    endif;
    $ret['member_balance'] = $balance;
    if($bill_detail != NULL && $balance <= 0):
      $ret['total_arrears'] = -($member['member_balance']);
      $bill_detail['total_arrears'] = $ret['total_arrears'];
    endif;
    $mem = $this->Member_model->update_member_balance($member_id, $balance);
    if($bill_detail != NULL):
        $id = $bill_detail['id'];
        $bill = $this->Bill_detail_model->update_bill_detail($id, $bill_detail);
    endif;
    $pay = $this->Payment_model->update_payment($payment_id, $payment_entry);
    return $ret;

  } #end_arrear_debit

  public function update_credit_note($payment_id,$member_id,$member_balance)
  {
    $ret = array();
    $member_balance = $member_balance;
    $ret['member_balance'] = $member_balance;
    $payment_id = $payment_id;
    $member_id = $member_id;
    $member = $this->Member_model->get_single_member($member_id);
    $payment_entry = $this->Payment_model->get_payment($payment_id);
    $amount = $payment_entry['debit'];

    $bill_detail = $this->Bill_detail_model->get_all_bill_by_date_member_id($payment_entry['payment_date'], $member_id);
    if($bill_detail != NULL):
      $arrears = $bill_detail[0]['total_arrears'];
      $interest_arrears = $bill_detail[0]['total_interest_arrears'];
    endif;
    // $arrears = $bill_detail['total_arrears'];
    // $interest_arrears = $bill_detail['total_interest_arrears'];

    $last_balance = $member_balance > 0 ? 0 : -($member_balance);
    $payment_entry['balance'] = $ret["payment_balance"] = $last_balance - $amount;
    $pay = $this->Payment_model->update_payment($payment_id, $payment_entry);

    $balance = $member['member_balance'] = $ret['member_balance'] = $member_balance + $amount;
    $mem = $this->Member_model->update_member_balance($member_id, $balance);

    if($amount - $interest_arrears >= 0):
      $remaining_balance = $amount - $interest_arrears;
      $ret['interest_arrears'] = 0;
      $bill_detail[0]['total_interest_arrears'] = 0;
      if($remaining_balance - $arrears >= 0):
        $remaining_balance = $remaining_balance - $arrears;
        $ret['arrears'] = 0;
        $bill['total_arrears'] = $bill_detail[0]['total_arrears'] = 0;
      else:
        $ret['arrears'] = $arrears - $remaining_balance;
        $id = $bill_detail[0]['id'];
        $bill['total_arrears'] = $bill_detail[0]['total_arrears'] = $arrears - $remaining_balance;
      endif;
    else:
      $ret['interest_arrears'] = $interest_arrears - $amount;
      $bill['total_interest_arrears'] = $bill_detail[0]['total_interest_arrears'] = $interest_arrears - $amount;
      $id = $bill_detail[0]['id'];
    endif;
    $id = $bill_detail[0]['id'];
    // echo"<pre>";print_r($bill);die;
    $bill = $this->Bill_detail_model->update_bill_detail($id, $bill);
    return $ret;
  }

  public function update_debit_note($payment_id,$member_id,$member_balance)
  {
    $ret = array();
    $ret['member_balance'] = $member_balance;
    $member_id = $member_id;
    $payment_id = $payment_id;
    $member = $this->Member_model->get_single_member($member_id);

    $payment_entry = $this->Payment_model->get_payment($payment_id);

    $amount = $payment_entry['credit'];
    $last_balance = $member_balance > 0 ? 0 : -($member_balance);
    $payment_entry['balance'] = $ret['payment_balance'] = $last_balance + $amount;
    $pay = $this->Payment_model->update_payment($payment_id, $payment_entry);

    $balance = $member['member_balance'] = $ret['member_balance'] = $member_balance - $amount;
    $mem = $this->Member_model->update_member_balance($member_id, $balance);
    return $ret;
  }

  public function initial_arrears($params, $member)
  {
    $id = $member;
    $data = $params;
    $par = array(
      'narration' => 'Arrears Transfer',
      'credit' => (-($data['member_balance'])),
      'balance' => (-($data['member_balance'])),
      'member_id' => $id,
      'society_id' => $data['society_id']
    );

    $payment = $this->Payment_model->add_payment($par);
  }

    /*
     * Get flat onboarding data- sachhidanad 29-03-2021
     */
    function get_flat_onboarding_data($society_id)
    {
        
        $this->db->where('society_id', $society_id);
        $this->db->where('wing', '');
        $pay = $this->db->get('members')->result_array();
        if(!empty($pay)){
          return 1;
        } else {
          return 0;
        }

    }

}
