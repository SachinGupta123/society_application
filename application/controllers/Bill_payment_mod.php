<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Bill_payment_mod extends CI_Controller
{
    function __construct()
    {
        parent::__construct();

        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            //redirect('auth/login', 'refresh');
        }
        $this->load->model('Member_model');
        $this->load->helper(['url', 'language']);
        $this->load->model('Flat_type_model');
        $this->load->model('User_model');
        $this->load->model('Society_model');
        $this->load->model('Role_model');
        $this->load->model('Bank_model');
        $this->load->model('Bill_detail_model');
        $this->load->model('Society_access_model');
        $this->load->model('Payment_model');
        $this->load->model('Utility_service_provider_member_model');
        $this->load->model('Ion_auth_model');
        $this->load->model('Parking_charge_model');
        $this->load->model('Billing_head_model');
    } 

    /*
     * Listing of bill_details
     */
    function index($society_id)
    {
        // echo $society_id;die;
        // $data['bill_details'] = $this->Bill_detail_model->get_all_bill_details();
        $data['society_id'] = $society_id;
        $data['title'] = 'Generate Bills';
        $data['_view'] = 'bill_detail/index';
        $this->load->view('societies/bills/b_p_mod',$data);
    }

    function generate_bills($society_id)
    {
        // echo $society_id;die;
        if(is_uploaded_file($_FILES['bill_file']['tmp_name']))
        {
            $message = array();
            $bill_date = $this->input->post('bill_date');
            // echo $bill_date; echo"<br>";
            $due_date = $this->input->post('due_date');
            $bill_no = $this->Billing_head_model->get_last_bill_no($society_id);
            // echo $due_date; echo"<br>";
            $bill_summary = $this->input->post('bill_summary');
            // echo $bill_summary; echo"<br>";
            $file_name = $_FILES['bill_file'];
            // print_r ($file_name); echo"<br>";
            $name = $file_name['name'];
            $ext = pathinfo($name, PATHINFO_EXTENSION);
            // echo $ext; echo"<br>";
            if($ext == 'csv')
            {

                $this->load->library('CSVReader');
                // Parse data from CSV file
                $headers = array('member-wing','member-flat_no','member-tenant','member-phone','member-name','member-flat_area',/*'member-principal_arrears','member-interest_arrears',*/'member-email_id'/*,'member-two_wheelers','member-four_wheelers','bill-bill_amount'*/,'bill-sub_total','bill-interest','bill-tax_amount','bill-principal_arrears','bill-interest_arrears','bill-total_due'/*,'bill-late_payment_charges'*/);
                $csvData = $this->csvreader->parse_csv($_FILES['bill_file']['tmp_name']);
                $rowCount = 1;
                $insertCount = 0;
                $member_data = array();
                $bill_data = array();
                $billhead_data = array();
                if(!empty($csvData))
                {
                    // echo"<pre>";print_r($csvData);die;
                    $file = count(file($_FILES['bill_file']['tmp_name']));
                    $total_rows = $file-1;
                    $members_count = $this->Member_model->get_members_count_society($society_id);
                    if($members_count != 0)
                    {
                        foreach($csvData as $row=>$bow)
                        {
                            foreach($bow as $r=>$q)
                            {
                                $column[] = $r;                            
                            }
                            $difference = array_diff($headers, $column);
                        }
                        if($difference)
                        {
                            $message['status'] = "Fail";
                            $message['text'] = "Headers in uploaded file does not match required criteria!!!";
                            // print_r(array_merge($message));
                            $this->session->set_flashdata('message', $message);
                            $this->session->set_flashdata('error_count', $error_count);
                            redirect('bill_payment_mod/index/'.$society_id);
                        }
                        else
                        {
                            $error_count = 0;
                            foreach($csvData as $row=>$bow)
                            {
                                $data = array();
                                foreach($bow as $r=>$q)
                                {
                                    // echo"<pre>";print_r($r);echo"</pre>";
                                    $col = explode('-', $r);
                                    $col_name = trim($col[0]);
                                    if($col_name == 'member')
                                    {
                                        $member_data[$r] = $q;
                                    }
                                    if($col_name == 'bill')
                                    {
                                        $bill_data[$r] = $q;
                                    }
                                    if($col_name == 'billhead')
                                    {
                                        $billhead_data[$r] = $q;
                                    }
                                    $data[$row]['member_data'] = $member_data;
                                    $data[$row]['bill_data'] = $bill_data;
                                    $data[$row]['billhead_data'] = $billhead_data;
                                }
                            }
                            // echo"<pre>";print_r($bill_data[$row]);echo"</pre>";
                            // echo"<pre>";print_r($billhead_data[$row]);echo"</pre>";
                            // echo"<pre>";print_r($data);echo"</pre>";

                            foreach($data as $meta)
                            {
                                $insert_member = $meta['member_data'];
                                $insert_bill = $meta['bill_data'];

                                if(preg_match('/[\'^£$%&*()}{@#~?><>,|=_+¬-]/', $insert_member['member-flat_no'])){
                                    $message['text'] = "Mamber Flat No. is not valid on row ".$rowCount;
                                    $error_count++;
                                }
                                // elseif(!is_numeric($insert_bill['bill-bill_amount']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-bill_amount'])){
                                //     $message['text'] = "Please specify proper value for bill amount on row ".$rowCount;
                                //     $error_count++;
                                // }
                                elseif(!is_numeric($insert_bill['bill-sub_total']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-sub_total'])){
                                    $message['text'] = "Please specify proper value for sub total on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-interest']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-interest'])){
                                    $message['text'] = "Please specify proper value for bill interest on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-tax_amount']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-tax_amount'])){
                                    $message['text'] = "Please specify proper value for tax amount on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-principal_arrears']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-principal_arrears'])){
                                    $message['text'] = "Please specify proper value for principal arrears on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-interest_arrears']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-interest_arrears'])){
                                    $message['text'] = "Please specify proper value for interest arrears on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-total_due']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-total_due'])){
                                    $message['text'] = "Please specify proper value for total due on row ".$rowCount;
                                    $error_count++;
                                }
                                // elseif(!is_numeric($insert_bill['bill-late_payment_charges']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-late_payment_charges'])){
                                //     $message['text'] = "Please specify proper value for late payment charges on row ".$rowCount;
                                //     $error_count++;
                                // }
                                // elseif(!is_numeric($insert_bill['bill-bill_no']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-bill_no'])){
                                //     $message['text'] = "Please specify proper value for bill no. charges on row ".$rowCount;
                                //     $error_count++;
                                // }

                                $rowCount++;
                            }
                            if($error_count > 0)
                            {
                                // print_r($message);
                                // echo $error_count;echo"<br>";
                                // $error_count = $error_count;
                                // // var_dump($error_count);
                                // // die;
                                $message['status'] = "Fail";
                                $this->session->set_flashdata('message', $message);
                                $this->session->set_flashdata('error_count', $error_count);
                                redirect('bill_payment_mod/index/'.$society_id);
                            }
                            else
                            {
                                $error_count = 0;
                                    $data = array();
                                foreach($csvData as $row=>$bow)
                                {
                                    $data[$row]=array();
                                    foreach($bow as $r=>$q)
                                    {
                                        $col = explode('-', $r);
                                        $col_name = trim($col[0]);
                                        if($col_name == 'member')
                                        {
                                            $member_data[$r] = $q;
                                        }
                                        if($col_name == 'bill')
                                        {
                                            $bill_data[$r] = $q;
                                        }
                                        if($col_name == 'billhead')
                                        {
                                            $billhead_data[$r] = $q;
                                        }
                                        $data[$row]['member_data'] = $member_data;
                                        $data[$row]['bill_data'] = $bill_data;
                                        $data[$row]['billhead_data'] = $billhead_data;
                                    }
                                }
                                foreach($data as $meta)
                                { 
                                    $insert_member = $meta['member_data'];
                                    $insert_bill = $meta['bill_data'];
                                    $insert_bill_head = $meta['billhead_data'];
                                    // $insert_bill_head['sub_total'] = $insert_bill['sub_total'];

                                    $member = $this->Member_model->get_member_by_wingflat($insert_member['member-wing'],$insert_member['member-flat_no'],$society_id);
                                    // echo"<pre>";print_r($member);echo"</pre>";
                                    
                                    if($insert_member['member-wing'] == $member[0]['wing'] && $insert_member['member-flat_no'] == $member[0]['flat_no'] && $society_id == $member[0]['society_id'])
                                    {
                                        $month = date('m',strtotime($bill_date));
                                        $year = date('Y',strtotime($bill_date));
                                        $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));
                                        $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_member($society_id,$current_month,$member[0]['id']);
                                        if($check_bill != NULL || !empty($check_bill))
                                        {
                                            $message['status'] = "Fail";
                                            $message['text'] = "Bill for this month is already generated.";
                                            $this->session->set_flashdata('message', $message);
                                            $this->session->set_flashdata('error_count', $error_count);
                                            redirect('societies/details/'.$society_id);
                                        }
                                        $log_file_name = "logs/bill_gen_".$society_id."_".$bill_date."_".$due_date.".log";
                                        $log_file = fopen($log_file_name, "a") or die('fopen failed');
                                        $file_data = "Member ID : ".$member[0]['id']."\n";
                                        $file_data .= "Setting Basic Variable\n";
                                        $file_data .= "Calculating Values Before Bill Generation\n";
                                        $file_data .= "Bill Head Details : ".json_encode($insert_bill_head)."\n";
                                        $bill_no++;
                                        $principal_arrears = $insert_bill['bill-principal_arrears'];
                                        $interest_arrears = $insert_bill['bill-interest_arrears'];
                                        // $late_payment_charges = $insert_bill['bill-late_payment_charges'];
                                        // $current_bal = $this->Member_model->get_member_current_balance($member[0]['id']);
                                        $interest = $insert_bill['bill-interest'];
                                        $file_data .= "Last Princpal Arrears : ".$principal_arrears."\n";
                                        $file_data .= "Last Interest Arrears : ".$interest_arrears."\n";
                                        // $file_data .= "Current Balance : ".$current_bal."\n";
                                        $file_data .= "Current Month Interest: ".$interest."\n";

                                        $bill_head_amount = 0;
                                        foreach($insert_bill_head as $bl => $hd)
                                        {
                                            $bill_head_amount += $hd;
                                        }

                                        // $soft_total = $insert_bill['bill-sub_total'] + $principal_arrears + $interest_arrears + $interest + $late_payment_charges;
                                        $soft_total = $insert_bill['bill-sub_total'];
                                        // $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;
                                        $total_due = $insert_bill['bill-total_due'];
                                        $file_data .= "Soft Total: ".$soft_total."\n";
                                        $file_data .= "Bill Total Due: ".$total_due."\n"; 

                                        foreach($insert_bill_head as $head=>$hh)
                                        {
                                            $he = explode('-', $head);
                                            $hen = trim($he[1]);
                                            $bill_heads[$hen] = $hh;
                                        }
                                        $bill_heads['sub_total'] = $insert_bill['bill-sub_total'];
                                        $bill_array = array(
                                            'member_id' => $member[0]['id'],
                                            'society_id' => $society_id,
                                            'bill_date' => $bill_date,
                                            'due_date' => $due_date,
                                            'bill_month' => $current_month,
                                            'details' => serialize($bill_heads),
                                            'principal_arrears' => $principal_arrears,
                                            'interest_arrears' => $interest_arrears,
                                            'interest' => $interest,
                                            'tax_amount' => $insert_bill['bill-tax_amount'],
                                            'bill_amount' => $soft_total,
                                            'total_due' => $total_due,
                                            'bill_summary' => $bill_summary,
                                            'paid' => 0,
                                            'bill_status' => 'Unpaid',
                                            'bill_no' => $bill_no
                                        );
                                        if($this->db->insert('bill_details',$bill_array)):
                                            $bpm_logs = array(
                                                'entity_id' => $bill_no,
                                                'member_id' => $member[0]['id'],
                                                'amount' => $total_due,
                                                'type' => 'BILL',
                                                'dnt' => time(),
                                            );
                                            $this->Member_model->insert_bpm_logs($bpm_logs);
                                            $this->Member_model->insert_member_balance($member[0]['id'],-$total_due);

                                            $bpm_txn_logs = array(
                                                'entity_id' => $bill_no,
                                                'narration' => 'BILLDUE',
                                                'credit' => '',
                                                'debit' => $total_due,
                                                'balance' => -$total_due,
                                                'dnt' => time(),
                                                'member_id' => $member[0]['id'],
                                            );

                                            $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);

                                            $file_data .= "Inserting data in Database\n";
                                            $file_data .= "----------------------------------------------------------------------------------------------------------------------------------------------\n\n";
                                            fwrite($log_file, $file_data) or die('fwrite failed');
                                        endif;
                                    }
                                    
                                    else
                                    {
                                        $tables = $this->config->item('tables', 'ion_auth');
                                        $identity_column = $this->config->item('identity', 'ion_auth');
                                        $this->data['identity_column'] = $identity_column;
                                        $email = strtolower($insert_member['member-email_id']);
                                        $identity = ($identity_column === 'email') ? $email : $this->input->post('identity');
                                        $password = 'msociety123';

                                        $additional_data = [
                                            'first_name' => $insert_member['member-name'],
                                            'last_name' => '',
                                            'company' => '',
                                            'phone' => $insert_member['member-phone'],
                                        ];
                                        $group = array('8');
                                        $user_id = $this->ion_auth->register($identity, $password, $email, $additional_data,$group);
                                        
                                        $params = array(
                                            'wing' => $insert_member['member-wing'],
                                            'flat_no' => $insert_member['member-flat_no'],
                                            'name' => $insert_member['member-name'],
                                            'tenant' => $insert_member['member-tenant'],
                                            'phone' => $insert_member['member-phone'],
                                            'flat_area' => $insert_member['member-flat_area'],
                                            'principal_arrears' => 'NULL',
                                            'interest_arrears' => 'NULL',
                                            'email_id' => $insert_member['member-email_id'],
                                            'two_wheelers' => 'NULL',
                                            'four_wheelers' => 'NULL',
                                            'flat_type_id' => $this->input->post('member_flat_type'),
                                            'created_at' => date('Y-m-d h:i:s'),
                                            'society_id' => $society_id,
                                            'user_id' => $user_id,
                                            // 'member_balance' => $this->input->post('member_balance'),
                                            // 'flat_sub_type_id' => $this->input->post('flat_sub_type_id'),
                                        );
                                        if($member_id = $this->Member_model->add_member($params)):

                                            $getInvitationMsg = "Dear ".$insert_member['member-name']." Your society has been registered with ManageMod mSociety. Please download ManageMod mSociey mobile app from Google Playstore. Your login credentials are, username: ".$insert_member['member-email_id']." and password: ".$password;
                                            $authKey = 'P@$$word@4321';
                                            $mobileNumber = $insert_member['member-phone'];
                                            $senderId = 'PAYNET';
                                            $mess = $getInvitationMsg;
                                            $route = "4";
                                            $postData = array(
                                                'authkey' => $authKey,
                                                'mobiles' => $mobileNumber,
                                                'message' => $mess,
                                                'sender' => $senderId,
                                                'route' => $route
                                            );
                                
                                            $url="http://bhashsms.com/api/sendmsg.php?user=Carnelian&pass=".$authKey."&sender=".$senderId."&phone=".$mobileNumber."&text=".urlencode($mess)."&priority=ndnd&smstype=normal";
                                
                                            $ch = curl_init();
                                            curl_setopt_array($ch, array(
                                                CURLOPT_URL => $url,
                                                CURLOPT_RETURNTRANSFER => true,
                                            ));
                                            //Ignore SSL certificate verification
                                            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
                                            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                                            //get response
                                            $output = curl_exec($ch);
                                            curl_close($ch);

                                            // $principal_arrears = $insert_member['member-principal_arrears'];
                                            // $interest_arrears = $insert_member['member-interest_arrears'];

                                            // $this->Member_model->insert_member_balance($member_id,$principal_arrears+$interest_arrears);

                                            // $balance = -($principal_arrears+$interest_arrears);

                                            /*Add society member bill payment logs*/
                                            // $bpm_logs = array(
                                            //                 'entity_id' => $member_id,
                                            //                 'member_id' => $member_id,
                                            //                 'amount' => $balance,
                                            //                 'type' => 'OPENINGBALANCE',
                                            //                 'dnt' => time(),
                                            //             );
                                            // $this->Member_model->insert_bpm_logs($bpm_logs);
                                            // if($balance > 0):
                                            //     /*Add society member bill payment transaction logs*/
                                            //     $bpm_txn_logs = array(
                                            //         'entity_id' => $member_id,
                                            //         'narration' => 'OPENINGBALANCE',
                                            //         'credit' => '',
                                            //         'debit' => $balance,
                                            //         'balance' => $balance,
                                            //         'dnt' => time(),
                                            //         'member_id' => $member_id,
                                            //     );
                                            //     $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                            // elseif($balance < 0):
                                            //     /*Add society member bill payment transaction logs*/
                                            //     $bpm_txn_logs = array(
                                            //         'entity_id' => $member_id,
                                            //         'narration' => 'OPENINGBALANCE',
                                            //         'credit' => -($balance),
                                            //         'debit' => '',
                                            //         'balance' => $balance,
                                            //         'dnt' => time(),
                                            //         'member_id' => $member_id,
                                            //     );
                                            //     $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                            // endif;
                                            $params = array(
                                                'user_id' => $user_id,
                                                'role_id' => 8,
                                                'society_id' => $society_id,
                                                'created_at' => date('Y-m-d h:i:s'),
                                            );

                                            $society_access_id = $this->Society_access_model->add_society_access($params);
                                            if($member_id)
                                            {
                                                $insertCount++;
                                            }

                                            $month = date('m',strtotime($bill_date));
                                            $year = date('Y',strtotime($bill_date));
                                            $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));
                                            $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($society_id,$current_month,$member_id);
                                            if($check_bill != NULL || !empty($check_bill))
                                            {
                                                $message['status'] = "Fail";
                                                $message['text'] = "Bill for this month is already generated.";
                                                $this->session->set_flashdata('message', $message);
                                                $this->session->set_flashdata('error_count', $error_count);
                                                redirect('societies/details/'.$society_id);
                                            }
                                            $log_file_name = "logs/bill_gen_".$society_id."_".$bill_date."_".$due_date.".log";
                                            $log_file = fopen($log_file_name, "a") or die('fopen failed');
                                            $file_data = "Member ID : ".$member_id."\n";
                                            $bill_no++;
                                            $file_data .= "Setting Basic Variable\n";
                                            $file_data .= "Calculating Values Before Bill Generation\n";
                                            $file_data .= "Bill Head Details : ".json_encode($insert_bill_head)."\n";

                                            $principal_arrears = $insert_bill['bill-principal_arrears'];
                                            $interest_arrears = $insert_bill['bill-interest_arrears'];
                                            // $late_payment_charges = $insert_bill['bill-late_payment_charges'];
                                            // $current_bal = $this->Member_model->get_member_current_balance($member_id);
                                            $interest = $insert_bill['bill-interest'];
                                            $file_data .= "Last Princpal Arrears : ".$principal_arrears."\n";
                                            $file_data .= "Last Interest Arrears : ".$interest_arrears."\n";
                                            // $file_data .= "Current Balance : ".$current_bal."\n";
                                            $file_data .= "Current Month Interest: ".$interest."\n";

                                            $bill_head_amount = 0;
                                            foreach($insert_bill_head as $bl => $hd)
                                            {
                                                $bill_head_amount += $hd;
                                            }

                                            // $soft_total = $insert_bill['bill-sub_total'] + $principal_arrears + $interest_arrears + $interest + $late_payment_charges;
                                            $soft_total = $insert_bill['bill-sub_total'];
                                            // $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;
                                            $total_due = $insert_bill['bill-total_due'];
                                            $file_data .= "Soft Total: ".$soft_total."\n";
                                            $file_data .= "Bill Total Due: ".$total_due."\n"; 

                                            foreach($insert_bill_head as $head=>$hh)
                                            {
                                                $he = explode('-', $head);
                                                $hen = trim($he[1]);
                                                $bill_heads[$hen] = $hh;
                                            }
                                            $bill_heads['sub_total'] = $insert_bill['bill-sub_total'];
                                            $bill_array = array(
                                                'member_id' => $member_id,
                                                'society_id' => $society_id,
                                                'bill_date' => $bill_date,
                                                'due_date' => $due_date,
                                                'bill_month' => $current_month,
                                                'details' => serialize($bill_heads),
                                                'principal_arrears' => $principal_arrears,
                                                'interest_arrears' => $interest_arrears,
                                                'interest' => $interest,
                                                'tax_amount' => $insert_bill['bill-tax_amount'],
                                                'bill_amount' => $soft_total,
                                                'total_due' => $total_due,
                                                'bill_summary' => $bill_summary,
                                                'paid' => 0,
                                                'bill_status' => 'Unpaid',
                                                'bill_no' => $bill_no
                                            );
                                            if($this->db->insert('bill_details',$bill_array)):
                                                $bpm_logs = array(
                                                    'entity_id' => $bill_no,
                                                    'member_id' => $member_id,
                                                    'amount' => $total_due,
                                                    'type' => 'BILL',
                                                    'dnt' => time(),
                                                );
                                                $this->Member_model->insert_bpm_logs($bpm_logs);
                                                $this->Member_model->insert_member_balance($member_id,-$total_due);

                                                $bpm_txn_logs = array(
                                                    'entity_id' => $bill_no,
                                                    'narration' => 'BILLDUE',
                                                    'credit' => '',
                                                    'debit' => $total_due,
                                                    'balance' => -$total_due,
                                                    'dnt' => time(),
                                                    'member_id' => $member_id,
                                                );

                                                $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);

                                                $file_data .= "Inserting data in Database\n";
                                                $file_data .= "----------------------------------------------------------------------------------------------------------------------------------------------\n\n";
                                                fwrite($log_file, $file_data) or die('fwrite failed');
                                            endif;
                                        endif;
                                    }
                                }
                                $message['text'] = "Bill Generated successfully!!";
                                $message['status'] = "Success";
                                $this->session->set_flashdata('message', $message);
                                redirect('societies/details/'.$society_id);
                            }
                        }
                    }
                    else
                    {
                        $error_count = 0;
                        foreach($csvData as $row=>$bow)
                        {
                            foreach($bow as $r=>$q)
                            {
                                $column[] = $r;                            
                            }
                            $difference = array_diff($headers, $column);
                        }
                        if($difference)
                        {
                            $message['status'] = "Fail";
                            $message['text'] = "Headers in uploaded file does not match required criteria!!!";
                            // print_r(array_merge($message));
                            $this->session->set_flashdata('message', $message);
                            $this->session->set_flashdata('error_count', $error_count);
                            redirect('bill_payment_mod/index/'.$society_id);
                        }
                        else
                        {
                            foreach($csvData as $row=>$bow)
                            {
                                $data = array();
                                foreach($bow as $r=>$q)
                                {
                                    // echo"<pre>";print_r($r);echo"</pre>";
                                    $col = explode('-', $r);
                                    $col_name = trim($col[0]);
                                    if($col_name == 'member')
                                    {
                                        $member_data[$r] = $q;
                                    }
                                    if($col_name == 'bill')
                                    {
                                        $bill_data[$r] = $q;
                                    }
                                    if($col_name == 'billhead')
                                    {
                                        $billhead_data[$r] = $q;
                                    }
                                    $data[$row]['member_data'] = $member_data;
                                    $data[$row]['bill_data'] = $bill_data;
                                    $data[$row]['billhead_data'] = $billhead_data;
                                }
                            }
                                // echo"<pre>";print_r($bill_data[$row]);echo"</pre>";
                                // echo"<pre>";print_r($billhead_data[$row]);echo"</pre>";
                                // echo"<pre>";print_r($data);echo"</pre>";

                            foreach($data as $meta)
                            {
                                $insert_member = $meta['member_data'];
                                $insert_bill = $meta['bill_data'];

                                if(preg_match('/[\'^£$%&*()}{@#~?><>,|=_+¬-]/', $insert_member['member-flat_no'])){
                                    $message['text'] = "Mamber Flat No. is not valid on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif($insert_member['member-tenant'] == '' || !preg_match("/^[A-Za-z]+$/", $insert_member['member-tenant'])){
                                    $message['text'] = "Please specify proper values for tenant or owner on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!preg_match("/^[0-9]{10}$/", $insert_member['member-phone'])){
                                    $message['text'] = "Mamber Phone No. is invalid on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_member['member-flat_area']) || !preg_match("/^[-+]?\d+$/", $insert_member['member-flat_area'])){
                                    $message['text'] = "Mamber Flat Area is invalid or missing on row ".$rowCount;
                                    $error_count++;
                                }
                                // elseif(!is_numeric($insert_member['member-principal_arrears']) || !preg_match("/^[-+]?\d+$/", $insert_member['member-principal_arrears'])){
                                //     $message['text'] = "Mamber Principal Arrears is invalid or missing on row ".$rowCount;
                                //     $error_count++;
                                // }
                                // elseif(!is_numeric($insert_member['member-interest_arrears']) || !preg_match("/^[-+]?\d+$/", $insert_member['member-interest_arrears'])){
                                //     $message['text'] = "Mamber Interest Arrears is invalid or missing on row ".$rowCount;
                                //     $error_count++;
                                // }
                                elseif(!filter_var($insert_member['member-email_id'], FILTER_VALIDATE_EMAIL))
                                {
                                    $message['text'] = "Mamber Email is invalid or missing on row ".$rowCount;
                                    $error_count++;
                                }
                                // elseif(!is_numeric($insert_member['member-two_wheelers']) || !preg_match("/^[-+]?\d+$/", $insert_member['member-two_wheelers'])){
                                //     $message['text'] = "Mamber Two Wheeler is invalid or missing on row ".$rowCount;
                                //     $error_count++;
                                // }
                                // elseif(!is_numeric($insert_member['member-four_wheelers'])|| !preg_match("/^[-+]?\d+$/", $insert_member['member-four_wheelers'])){
                                //     $message['text'] = "Mamber Four Wheeler is invalid or missing on row ".$rowCount;
                                //     $error_count++;
                                // }
                                // elseif(!is_numeric($insert_bill['bill-bill_amount']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-bill_amount'])){
                                //     $message['text'] = "Please specify proper value for bill amount on row ".$rowCount;
                                //     $error_count++;
                                // }
                                elseif(!is_numeric($insert_bill['bill-sub_total']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-sub_total'])){
                                    $message['text'] = "Please specify proper value for sub total on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-interest']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-interest'])){
                                    $message['text'] = "Please specify proper value for bill interest on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-tax_amount']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-tax_amount'])){
                                    $message['text'] = "Please specify proper value for tax amount on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-principal_arrears']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-principal_arrears'])){
                                    $message['text'] = "Please specify proper value for principal arrears on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-interest_arrears']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-interest_arrears'])){
                                    $message['text'] = "Please specify proper value for interest arrears on row ".$rowCount;
                                    $error_count++;
                                }
                                elseif(!is_numeric($insert_bill['bill-total_due']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-total_due'])){
                                    $message['text'] = "Please specify proper value for total due on row ".$rowCount;
                                    $error_count++;
                                }
                                // elseif(!is_numeric($insert_bill['bill-late_payment_charges']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-late_payment_charges'])){
                                //     $message['text'] = "Please specify proper value for late payment charges on row ".$rowCount;
                                //     $error_count++;
                                // }
                                // elseif(!is_numeric($insert_bill['bill-bill_no']) || !preg_match("/^[-+]?\d+$/", $insert_bill['bill-bill_no'])){
                                //     $message['text'] = "Please specify proper value for bill no. charges on row ".$rowCount;
                                //     $error_count++;
                                // }

                                $rowCount++;
                            }
                            if($error_count > 0)
                            {
                                // print_r($message);
                                // echo $error_count;echo"<br>";
                                // $error_count = $error_count;
                                // // var_dump($error_count);
                                // // die;
                                $message['status'] = "Fail";
                                $this->session->set_flashdata('message', $message);
                                $this->session->set_flashdata('error_count', $error_count);
                                redirect('bill_payment_mod/index/'.$society_id);
                            }
                            else
                            {
                                $data = array();
                                    // echo"<pre>";print_r($csvData);echo"</pre>"; die();

                                foreach($csvData as $row=>$bow)
                                {
                                    // echo"<pre>";print_r($row);echo"</pre>";
                                    $data[$row]=array();
                                    foreach($bow as $r=>$q)
                                    {
                                        // echo"<pre>";print_r($r);echo"</pre>";
                                        $col = explode('-', $r);
                                        $col_name = trim($col[0]);
                                        if($col_name == 'member')
                                        {
                                            $member_data[$r] = $q;
                                        }
                                        if($col_name == 'bill')
                                        {
                                            $bill_data[$r] = $q;
                                        }
                                        if($col_name == 'billhead')
                                        {
                                            $billhead_data[$r] = $q;
                                        }
                                        $data[$row]['member_data'] = $member_data;
                                        $data[$row]['bill_data'] = $bill_data;
                                        $data[$row]['billhead_data'] = $billhead_data;
                                    }
                                }
                                    // echo"<pre>";print_r($data);echo"</pre>";
                                foreach($data as $meta)
                                {
                                    $insert_member = $meta['member_data'];
                                    $insert_bill = $meta['bill_data'];
                                    $insert_bill_head = $meta['billhead_data'];

                                    $tables = $this->config->item('tables', 'ion_auth');
                                    $identity_column = $this->config->item('identity', 'ion_auth');
                                    $this->data['identity_column'] = $identity_column;
                                    $email = strtolower($insert_member['member-email_id']);
                                    $identity = ($identity_column === 'email') ? $email : $this->input->post('identity');
                                    $password = 'msociety123';

                                    $additional_data = [
                                        'first_name' => $insert_member['member-name'],
                                        'last_name' => '',
                                        'company' => '',
                                        'phone' => $insert_member['member-phone'],
                                    ];
                                    $group = array('8');
                                    $user_id = $this->ion_auth->register($identity, $password, $email, $additional_data,$group);
                                    if($insert_member['member-tenant'] == 'yes' || $insert_member['member-tenant'] == 'Yes')
                                    {
                                        $tenant = 1;
                                    }
                                    elseif($insert_member['member-tenant'] == 'no' || $insert_member['member-tenant'] == 'No')
                                    {
                                        $tenant = 0;
                                    }
                                    
                                    $params = array(
                                        'wing' => $insert_member['member-wing'],
                                        'flat_no' => $insert_member['member-flat_no'],
                                        'name' => $insert_member['member-name'],
                                        'tenant' => $tenant,
                                        'phone' => $insert_member['member-phone'],
                                        'flat_area' => $insert_member['member-flat_area'],
                                        'principal_arrears' => 'NULL',
                                        'interest_arrears' => 'NULL',
                                        'email_id' => $insert_member['member-email_id'],
                                        'two_wheelers' => 'NULL',
                                        'four_wheelers' => 'NULL',
                                        'flat_type_id' => $this->input->post('member_flat_type'),
                                        'created_at' => date('Y-m-d h:i:s'),
                                        'society_id' => $society_id,
                                        'user_id' => $user_id,
                                        // 'member_balance' => $this->input->post('member_balance'),
                                        // 'flat_sub_type_id' => $this->input->post('flat_sub_type_id'),
                                    );
                                    if($member_id = $this->Member_model->add_member($params)):

                                        $getInvitationMsg = "Dear ".$insert_member['member-name']." Your society has been registered with ManageMod mSociety. Please download ManageMod mSociey mobile app from Google Playstore. Your login credentials are, username: ".$insert_member['member-email_id']." and password: ".$password;
                                        $authKey = 'P@$$word@4321';
                                        $mobileNumber = $insert_member['member-phone'];
                                        $senderId = 'PAYNET';
                                        $mess = $getInvitationMsg;
                                        $route = "4";
                                        $postData = array(
                                            'authkey' => $authKey,
                                            'mobiles' => $mobileNumber,
                                            'message' => $mess,
                                            'sender' => $senderId,
                                            'route' => $route
                                        );
                            
                                        $url="http://bhashsms.com/api/sendmsg.php?user=Carnelian&pass=".$authKey."&sender=".$senderId."&phone=".$mobileNumber."&text=".urlencode($mess)."&priority=ndnd&smstype=normal";
                            
                                        $ch = curl_init();
                                        curl_setopt_array($ch, array(
                                            CURLOPT_URL => $url,
                                            CURLOPT_RETURNTRANSFER => true,
                                        ));
                                        //Ignore SSL certificate verification
                                        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
                                        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
                                        //get response
                                        $output = curl_exec($ch);
                                        curl_close($ch);

                                        // $principal_arrears = $insert_member['member-principal_arrears'];
                                        // $interest_arrears = $insert_member['member-interest_arrears'];

                                        // $this->Member_model->insert_member_balance($member_id,$principal_arrears+$interest_arrears);

                                        // $balance = -($principal_arrears+$interest_arrears);

                                        // $balance = $insert_bill['bill-bill_amount'];

                                        /*Add society member bill payment logs*/
                                        // $bpm_logs = array(
                                        //                 'entity_id' => $member_id,
                                        //                 'member_id' => $member_id,
                                        //                 'amount' => $balance,
                                        //                 'type' => 'OPENINGBALANCE',
                                        //                 'dnt' => time(),
                                        //             );
                                        // $this->Member_model->insert_bpm_logs($bpm_logs);
                                        // if($balance > 0):
                                        //     /*Add society member bill payment transaction logs*/
                                        //     $bpm_txn_logs = array(
                                        //         'entity_id' => $member_id,
                                        //         'narration' => 'OPENINGBALANCE',
                                        //         'credit' => '',
                                        //         'debit' => $balance,
                                        //         'balance' => $balance,
                                        //         'dnt' => time(),
                                        //         'member_id' => $member_id,
                                        //     );
                                        //     $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                        // elseif($balance < 0):
                                        //     /*Add society member bill payment transaction logs*/
                                        //     $bpm_txn_logs = array(
                                        //         'entity_id' => $member_id,
                                        //         'narration' => 'OPENINGBALANCE',
                                        //         'credit' => -($balance),
                                        //         'debit' => '',
                                        //         'balance' => $balance,
                                        //         'dnt' => time(),
                                        //         'member_id' => $member_id,
                                        //     );
                                        //     $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                        // endif;
                                        $params = array(
                                            'user_id' => $user_id,
                                            'role_id' => 8,
                                            'society_id' => $society_id,
                                            'created_at' => date('Y-m-d h:i:s'),
                                        );

                                        $society_access_id = $this->Society_access_model->add_society_access($params);
                                        if($member_id)
                                        {
                                            $insertCount++;
                                        }

                                        $month = date('m',strtotime($bill_date));
                                        $year = date('Y',strtotime($bill_date));
                                        $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));
                                        $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($society_id,$current_month,$member_id);
                                        $log_file_name = "logs/bill_gen_".$society_id."_".$bill_date."_".$due_date.".log";
                                        $log_file = fopen($log_file_name, "a") or die('fopen failed');
                                        $file_data = "Member ID : ".$member_id."\n";
                                        $bill_no++;
                                        $file_data .= "Setting Basic Variable\n";
                                        $file_data .= "Calculating Values Before Bill Generation\n";
                                        $file_data .= "Bill Head Details : ".json_encode($insert_bill_head)."\n";

                                        $principal_arrears = $insert_bill['bill-principal_arrears'];
                                        $interest_arrears = $insert_bill['bill-interest_arrears'];
                                        // $late_payment_charges = $insert_bill['bill-late_payment_charges'];
                                        // $current_bal = $this->Member_model->get_member_current_balance($member_id);
                                        $interest = $insert_bill['bill-interest'];
                                        $file_data .= "Last Princpal Arrears : ".$principal_arrears."\n";
                                        $file_data .= "Last Interest Arrears : ".$interest_arrears."\n";
                                        // $file_data .= "Current Balance : ".$current_bal."\n";
                                        $file_data .= "Current Month Interest: ".$interest."\n";

                                        $bill_head_amount = 0;
                                        foreach($insert_bill_head as $bl => $hd)
                                        {
                                            $bill_head_amount += $hd;
                                        }

                                        // $soft_total = $insert_bill['bill-sub_total'] + $principal_arrears + $interest_arrears + $interest + $late_payment_charges;
                                        $soft_total = $insert_bill['bill-sub_total'];
                                        // $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;
                                        $total_due = $insert_bill['bill-total_due'];
                                        $file_data .= "Soft Total: ".$soft_total."\n";
                                        $file_data .= "Bill Total Due: ".$total_due."\n"; 

                                        foreach($insert_bill_head as $head=>$hh)
                                        {
                                            $he = explode('-', $head);
                                            $hen = trim($he[1]);
                                            $bill_heads[$hen] = $hh;
                                        }
                                        $bill_heads['sub_total'] = $insert_bill['bill-sub_total'];
                                        $bill_array = array(
                                            'member_id' => $member_id,
                                            'society_id' => $society_id,
                                            'bill_date' => $bill_date,
                                            'due_date' => $due_date,
                                            'bill_month' => $current_month,
                                            'details' => serialize($bill_heads),
                                            'principal_arrears' => $principal_arrears,
                                            'interest_arrears' => $interest_arrears,
                                            'interest' => $interest,
                                            'tax_amount' => $insert_bill['bill-tax_amount'],
                                            // 'late_payment_charges' => $insert_bill['bill-late_payment_charges'],
                                            'bill_amount' => $soft_total,
                                            'total_due' => $total_due,
                                            'bill_summary' => $bill_summary,
                                            'paid' => 0,
                                            'bill_status' => 'Unpaid',
                                            'bill_no' => $bill_no
                                        );
                                        if($this->db->insert('bill_details',$bill_array)):
                                            $bpm_logs = array(
                                                'entity_id' => $bill_no,
                                                'member_id' => $member_id,
                                                'amount' => $total_due,
                                                'type' => 'BILL',
                                                'dnt' => time(),
                                            );
                                            $this->Member_model->insert_bpm_logs($bpm_logs);
                                            $this->Member_model->insert_member_balance($member_id,-$total_due);

                                            $bpm_txn_logs = array(
                                                'entity_id' => $bill_no,
                                                'narration' => 'BILLDUE',
                                                'credit' => '',
                                                'debit' => $total_due,
                                                'balance' => -$total_due,
                                                'dnt' => time(),
                                                'member_id' => $member_id,
                                            );

                                            $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);

                                            $file_data .= "Inserting data in Database\n";
                                            $file_data .= "----------------------------------------------------------------------------------------------------------------------------------------------\n\n";
                                            fwrite($log_file, $file_data) or die('fwrite failed');
                                        endif;
                                    endif;
                                }
                                $message['status'] = "Success";
                                $message['text'] = "Bill Generated successfully!!";
                                $this->session->set_flashdata('message', $message);
                                redirect('societies/details/'.$society_id);
                                // echo"<pre>";print_r($data);echo"</pre>";echo"yaha pe aa k mara h!!!!!";
                            }
                        }
                    }
                    $message['status'] = "Success";
                    $message['text'] = "Bill Generated successfully!!";
                    $this->session->set_flashdata('message', $message);
                    redirect('societies/details/'.$society_id);
                }
                else
                {
                    $message['status'] = "Fail";
                    $message['text'] = "Uploaded file is not readable. Please Check Your Input!!";
                    $this->session->set_flashdata('message', $message);
                    redirect('bill_payment_mod/index/'.$society_id);
                }
            }
            elseif($ext == 'xls' || $ext == 'xlsx')
            {
                $this->load->library('excel');
                $inputFileName = $_FILES['bill_file']['tmp_name'];

                $objReader     = PHPExcel_IOFactory::createReader("Excel5"); 
                $worksheetData = $objReader->listWorksheetInfo($inputFileName);
                $totalRows     = $worksheetData[0]['totalRows'];
                $totalColumns  = $worksheetData[0]['totalColumns'];
                // echo"<pre>";print_r($worksheetData);die;
                // $file=$_FILES['wallet_users']['tmp_name'];
                $objPHPExcel = PHPExcel_IOFactory::load($inputFileName);
                $headers = array('member-wing','member-flat_no','member-tenant','member-phone','member-name','member-flat_area','member-principal_arrears','member-interest_arrears','member-email_id','member-two_wheelers','member-four_wheelers','bill-bill_amount','bill-sub_total','bill-interest','bill-tax_amount','bill-principal_arrears','bill-interest_arrears','bill-total_due','bill-late_payment_charges');
                foreach($objPHPExcel->getWorksheetIterator() as $worksheet)
                {
                    $objValidation = $objPHPExcel->getActiveSheet()->getCell('A1')->getDataValidation();
                    $highestRow = $worksheet->getHighestRow();
                    $highestColumn = $worksheet->getHighestColumn();
                    // echo $totalColumns;die;
                    // echo"<pre>";print_r($worksheet);die;
                    for($column=0; $column<=$totalColumns-1;)
                    {
                        for($row=1; $row<=$highestRow;$row++)
                        {
                            if($row==1)
                            {
                                $data[]=trim($worksheet->getCellByColumnAndRow($column,$row)->getValue());
                            }
                        }
                        $column++;
                    }
                }
                foreach($data as $a => $b)
                {
                    $col_head[$b] = $b;
                }
                $difference = array_diff($headers, $col_head);
                if($difference)
                {
                    echo "diff";die;
                }
                else
                {
                    echo "nodiff";die;
                }
            }
        }
    }

    public function download_sample_file()
    {
        $data = array(
            array(
                'member-wing' => 'A',
                'member-flat_no' => 101,
                'member-tenant' => 'No',
                'member-phone' => '9887654321',
                'member-name' => 'Member One',
                'member-flat_area' => 560,
                // 'member-principal_arrears' => 3000,
                // 'member-interest_arrears' => 50,
                'member-email_id' => 'member@one.com',
                // 'member-two_wheelers' => 0,
                // 'member-four_wheelers' => 1,
                'billhead-Repair Funds' => 350,
                'billhead-Service Charges' => 200,
                'billhead-Sinking Fund' => 75,
                'billhead-Maintenance Charges' => 840,
                // 'billhead-Normal Charge' => 50,
                'billhead-Parking Charges' => 100,
                'billhead-NOC Charges' => 0,
                'bill-sub_total' => 1615,
                'bill-interest' => 0,
                'bill-tax_amount' => 0,
                'bill-principal_arrears' => 0,
                'bill-interest_arrears' => 0,
                // 'bill-late_payment_charges' => 0,
                // 'bill-bill_amount' => 1625,
                'bill-total_due' => 1615,
                // 'bill-bill_no' => 1
            ),
            array(
                'member-wing' => 'B',
                'member-flat_no' => 101,
                'member-tenant' => 'No',
                'member-phone' => '1234567834',
                'member-name' => 'Member Six',
                'member-flat_area' => 600,
                // 'member-principal_arrears' => 0,
                // 'member-interest_arrears' => 0,
                'member-email_id' => 'member@six.com',
                // 'member-two_wheelers' => 1,
                // 'member-four_wheelers' => 0,
                'billhead-Repair Funds' => 400,
                'billhead-Service Charges' => 200,
                'billhead-Sinking Fund' => 75,
                'billhead-Maintenance Charges' => 900,
                // 'billhead-Normal Charge' => 50,
                'billhead-Parking Charges' => 50,
                'billhead-NOC Charges' => 0,
                'bill-sub_total' => 1675,
                'bill-interest' => 0,
                'bill-tax_amount' => 0,
                'bill-principal_arrears' => 0,
                'bill-interest_arrears' => 0,
                // 'bill-late_payment_charges' => 0,
                // 'bill-bill_amount' => 1625,
                'bill-total_due' => 1675,
                // 'bill-bill_no' => 2,
            ),
            array(
                'member-wing' => 'C',
                'member-flat_no' => 101,
                'member-tenant' => 'No',
                'member-phone' => 2343214567,
                'member-name' => 'Member Eleven',
                'member-flat_area' => 560,
                // 'member-principal_arrears' => 0,
                // 'member-interest_arrears' => 0,
                'member-email_id' => 'member@eleven.com',
                // 'member-two_wheelers' => 0,
                // 'member-four_wheelers' => 0,
                'billhead-Repair Funds' => 350,
                'billhead-Service Charges' => 200,
                'billhead-Sinking Fund' => 75,
                'billhead-Maintenance Charges' => 840,
                // 'billhead-Normal Charge' => 50,
                'billhead-Parking Charges' => 0,
                'billhead-NOC Charges' => 0,
                'bill-sub_total' => 1515,
                'bill-interest' => 0,
                'bill-tax_amount' => 0,
                'bill-principal_arrears' => 0,
                'bill-interest_arrears' => 0,
                // 'bill-late_payment_charges' => 0,
                // 'bill-bill_amount' => 1465,
                'bill-total_due' => 1515,
                // 'bill-bill_no' => 3,
            ),
            array(
                'member-wing' => 'A',
                'member-flat_no' => 102,
                'member-tenant' => 'Yes',
                'member-phone' => '8765567890',
                'member-name' => 'Member Two',
                'member-flat_area' => 560,
                // 'member-principal_arrears' => 0,
                // 'member-interest_arrears' => 0,
                'member-email_id' => 'member@two.com',
                // 'member-two_wheelers' => 2,
                // 'member-four_wheelers' => 0,
                'billhead-Repair Funds' => 350,
                'billhead-Service Charges' => 200,
                'billhead-Sinking Fund' => 75,
                'billhead-Maintenance Charges' => 840,
                // 'billhead-Normal Charge' => 50,
                'billhead-Parking Charges' => 100,
                'billhead-NOC Charges' => 100,
                'bill-sub_total' => 1715,
                'bill-interest' => 0,
                'bill-tax_amount' => 0,
                'bill-principal_arrears' => 0,
                'bill-interest_arrears' => 0,
                // 'bill-late_payment_charges' => 0,
                // 'bill-bill_amount' => 1665,
                'bill-total_due' => 1715,
                // 'bill-bill_no' => 4
            )
        );

        // print_r($data);die;
        $filename = 'sample_bill_member_'.date('Ymd').'.csv';
        header("Content-Description: File Transfer");
        header("Content-Disposition: attachment; filename=$filename");
        header("Content-Type: application/csv; ");
 
        // file creation
        $file = fopen('php://output', 'w');
 
        $header = array("member-wing","member-flat_no","member-tenant","member-phone", "member-name", "member-flat_area"/*, "member-principal_arrears", "member-interest_arrears"*/, "member-email_id"/*, "member-two_wheelers", "member-four_wheelers"*/, "billhead-Repair Fund", "billhead-Service Charges", "billhead-Sinking Fund", "billhead-Maintenance Charges", "billhead-Parking Charges", "billhead-NOC Charges", "bill-sub_total", "bill-interest", "bill-tax_amount", "bill-principal_arrears", "bill-interest_arrears",/* "bill-late_payment_charges" ,"bill-bill_amount", */"bill-total_due");
        fputcsv($file, $header);


 
        foreach ($data as $key => $value){
            fputcsv($file,$value);
        }
 
        fclose($file);
        exit;
    }
    
}
