<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Member extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        }
        $this->load->model('Member_model');
        $this->load->helper(['url', 'language']);
        $this->load->model('Flat_type_model');
        $this->load->model('User_model');
        $this->load->model('Society_model');
        $this->load->model('Role_model');
        $this->load->model('Bank_model');
        $this->load->model('Bill_detail_model');
        $this->load->model('Society_access_model');
        $this->load->model('Payment_model');
        $this->load->model('Billing_head_model');
        $this->load->model('Utility_service_provider_member_model');
        $this->load->model('Ion_auth_model');
        $this->load->library(['ion_auth', 'form_validation']);
        $this->form_validation->set_error_delimiters($this->config->item('error_start_delimiter', 'ion_auth'), $this->config->item('error_end_delimiter', 'ion_auth'));
        $this->lang->load('auth');
    } 

    /*
     * Listing of members
     */
    function manage_member()
    {
        $da = $this->session->userdata();
        $data = array(
            'title' => "Manage Flats"
        );
        $society_id = $this->uri->segment(3);
        $data['members'] = $this->Member_model->get_all_members($society_id);
        $data['society_details'] = $this->Society_model->get_society($society_id);
       
        $data['_view'] = 'member/index';
        $this->load->view('societies/members/manage_member',$data);
    }

    /*
     * Adding a new member
     */
    function add_new_member()
    {
       
        $data = array(
            'title' => "Add New FLat"
        );

        $this->load->library('form_validation');
        $society_id = $this->uri->segment(3);		
		$this->form_validation->set_rules('member_flat_no','Flat No','required');
		$this->form_validation->set_rules('member_name','Name','required');		
		$this->form_validation->set_rules('member_flat_area','Flat Area','required');
		
		if($this->form_validation->run())     
        {
           
            $society_id = $this->input->post('society_id');
            $flat_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 6);
            
            //check duplicate flat code- 24-08-2022 sachhidanand gupta
            $check_flat_code=$this->Member_model->check_flat_code($flat_code);
            if(!empty($exit_flat)){
                $flat_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 6);
            }
            
            
            $params = array(
                'wing' => $this->input->post('member_wing'),
                'flat_no' => $this->input->post('member_flat_no'),
                'name' => $this->input->post('member_name'),
                // 'tenant' => $this->input->post('tenant'), 
                'tenant' =>($this->input->post('tenant') !=''?$this->input->post('tenant'):0),                  
                'flat_area' => $this->input->post('member_flat_area'),
                'principal_arrears' => $this->input->post('principal_arrears'),
                'interest_arrears' => $this->input->post('interest_arrears'),
                'two_wheelers' => $this->input->post('member_two_wheeler'),
                'four_wheelers' => $this->input->post('member_four_wheeler'),
                'flat_type_id' => $this->input->post('member_flat_type'),
                'created_at' => date('Y-m-d h:i:s'),
                'updated_at' => $this->input->post('updated_at'),
                'society_id' => $this->input->post('society_id'),
                'flat_code' => $flat_code,              
            );  
            $member_exit=$this->Member_model->get_member_exit($this->input->post('member_wing'),$this->input->post('member_flat_no'),$this->input->post('society_id'));
            if(empty($member_exit)){
                $this->db->trans_begin();
                if($member_id = $this->Member_model->add_member($params)){
                    $principal_arrears = $this->input->post('principal_arrears');
                    $interest_arrears = $this->input->post('interest_arrears');    
                    if($principal_arrears > 0){
                        $this->Member_model->insert_member_arrears($member_id,$principal_arrears);
                    }
                    // //add this condition for principal arrears is nagative value 
                    // else{
                    //     $this->Member_model->insert_member_arrears($member_id,$principal_arrears);
                    // }
    
                    if($interest_arrears > 0){
                        $this->Member_model->insert_member_interest_arrears($member_id,$interest_arrears);
                    }
    
                    $this->Member_model->insert_member_balance($member_id,-($principal_arrears+$interest_arrears));
                    
                    $balance = -($principal_arrears+$interest_arrears);
    
                    /*Add society member bill payment logs*/
                    $bpm_logs = array(
                        'entity_id' => $member_id,
                        'member_id' => $member_id,
                        'amount' => $balance,
                        'type' => 'OPENINGBALANCE',
                        'dnt' => time(),
                    );
                    $this->Member_model->insert_bpm_logs($bpm_logs);
                    if($balance > 0):
                        /*Add society member bill payment transaction logs*/
                        $bpm_txn_logs = array(
                            'entity_id' => $member_id,
                            'narration' => 'OPENINGBALANCE',
                            'credit' => '',
                            'debit' => $balance,
                            'balance' => $balance,
                            'dnt' => time(),
                            'member_id' => $member_id,
                        );
                        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                    elseif($balance < 0):
                        /*Add society member bill payment transaction logs*/
                        $bpm_txn_logs = array(
                            'entity_id' => $member_id,
                            'narration' => 'OPENINGBALANCE',
                            'credit' => -($balance),
                            'debit' => '',
                            'balance' => $balance,
                            'dnt' => time(),
                            'member_id' => $member_id,
                        );
                        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                    endif;
                    //checking society accounting details present or not-03-03-2022
                    $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                    if(!empty($accounting_db_details)){
                        if($this->input->post('member_wing')!=''){
                            $ledger_name="Flat-".$this->input->post('member_wing')."-".$this->input->post('member_flat_no');
                        }else{
                            $ledger_name="Flat-".$this->input->post('member_flat_no');
                        }
                        $bal = $principal_arrears+$interest_arrears;
                        if($bal >= 0):
                            $debit_crdit="D";
                            // $group_id=6;
                            $group_id=$this->ledger->get_group_id("Current Assets");
    
                        elseif($bal< 0):
                            $debit_crdit="C";                          
                            // $group_id=11;
                            $group_id=$this->ledger->get_group_id("Current Liabilities");
                        endif;
                        
                        $flat_ledger_id=$this->ledger->create_ledger($ledger_name,"flat",$this->input->post('society_id'),"sc_flat_acc_Details",abs($bal),$group_id,$debit_crdit,$member_id);
                    }
                    $this->db->trans_commit();
                    $message['text'] = "Member Added successfully!!";
                    $message['status'] = "Success";
                }
                else{
                    $this->db->trans_rollback(); 
                    $data['_view'] = 'member/add';
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                   
                }  
                
                $this->session->set_flashdata('message', $message);
                redirect('member/manage'.'/'.$society_id);
            }else{
               
                $data['_view'] = 'member/add';
                $message['text'] = "Already Availabe!!";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                // $this->load->view('societies/members/add_new_member',$data);
                redirect('member/add'.'/'.$society_id);
            }   
            
        }
        else
        {
			$data['all_societies'] = $this->Society_model->get_all_societies();            
			$data['all_users'] = $this->User_model->get_all_users();
			$data['all_flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
            $data['_view'] = 'member/add';
            $this->load->view('societies/members/add_new_member',$data);
        }
    }
    function add_new_member_23122021()
    {

        $data = array(
            'title' => "Add New FLat"
        );

        $this->load->library('form_validation');
        $society_id = $this->uri->segment(3);
		// $this->form_validation->set_rules('tenant','Tenant','required');
		$this->form_validation->set_rules('member_flat_no','Flat No','required');
		// $this->form_validation->set_rules('member_phone','Phone','required');
		// $this->form_validation->set_rules('member_email','Email Id','required');
		$this->form_validation->set_rules('member_name','Name','required');
		// $this->form_validation->set_rules('member_flat_type','Flat Type Id','required');
		// $this->form_validation->set_rules('member_wing','Wing','required');
		// $this->form_validation->set_rules('flat_sub_type_id','Flat Sub Type Id','required');
		$this->form_validation->set_rules('member_flat_area','Flat Area','required');
		
		if($this->form_validation->run())     
        {   
            // $tables = $this->config->item('tables', 'ion_auth');
            // $identity_column = $this->config->item('identity', 'ion_auth');
            // $this->data['identity_column'] = $identity_column;
            // $email = strtolower($this->input->post('member_email'));
            // $identity = ($identity_column === 'email') ? $email : $this->input->post('identity');
            // $password = 'msociety123';

            // $name = trim($this->input->post('member_name'));
            // $last_name = (strpos($name, ' ') === false) ? '' : preg_replace('#.*\s([\w-]*)$#', '$1', $name);
            // $first_name = trim( preg_replace('#'.$last_nameproduction.'#', '', $name ) );

            // $additional_data = [
            //     'first_name' => $first_name,
            //     'last_name' => $last_name,
            //     'company' => '',
            //     'phone' => $this->input->post('member_phone'),
            // ];
            // $group = array('8');

            // $count_query = $this->db->query("SELECT * FROM `users`where email='$email'");
            //  $user_count     = $count_query->num_rows();
            // if ($user_count > 0)
            // {

            //     $get_email = $this->db->query("SELECT * FROM `users`where email='$email'");
         
            //     $res = $this->Member_model->get_user_email($email);
            //     $existing_id=$res->id;
                //die();
           
        
                // $user_id = $this->ion_auth->register($identity, $password, $email, $additional_data,$group);
                // $sess_id=$this->session->userdata('user_id');
                // die();
                $society_id = $this->input->post('society_id');
                $flat_code = substr(str_shuffle("0123456789abcdefghijklmnopqrstvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 6);
                $params = array(
                    'wing' => $this->input->post('member_wing'),
                    'flat_no' => $this->input->post('member_flat_no'),
                    'name' => $this->input->post('member_name'),
                    'tenant' => $this->input->post('tenant'),                   
                    'flat_area' => $this->input->post('member_flat_area'),
                    'principal_arrears' => $this->input->post('principal_arrears'),
                    'interest_arrears' => $this->input->post('interest_arrears'),
                    'two_wheelers' => $this->input->post('member_two_wheeler'),
                    'four_wheelers' => $this->input->post('member_four_wheeler'),
                    'flat_type_id' => $this->input->post('member_flat_type'),
                    'created_at' => date('Y-m-d h:i:s'),
                    'updated_at' => $this->input->post('updated_at'),
                    'society_id' => $this->input->post('society_id'),
                    'flat_code' => $flat_code,
                    // 'user_id' => $existing_id,
                    // 'email_id' => $this->input->post('member_email'),
                     // 'phone' => $this->input->post('member_phone'),
                    // 'member_balance' => $this->input->post('member_balance'),
                    // 'flat_sub_type_id' => $this->input->post('flat_sub_type_id'),
                );
         
            
                if($member_id = $this->Member_model->add_member($params)):

                    // $flat_owner = array(
                    //     'flat_id' => $member_id,
                    //     'user_id' => $existing_id,
                    //     'society_id' => $society_id
                    // );
                    // $this->Society_model->add_flat_owner($flat_owner);

                    // $name = $this->input->post('member_name');
                    // $phone = $this->input->post('member_phone');
                    // $email = $this->input->post('member_email');
                    
                    // $content = "Dear ".$name." Your society has been registered with ManageMod mSociety. Please download ManageMod mSociey mobile app from Google Playstore. Your login credentials are, username: ".$email." and password: ".$password;
                    // $b_sender = 'PayNet';
                    // $msg =  $content;
                    // $m_phone = $phone;
                    
                    // $postData = array(
                    //     'to' => "+91".$m_phone,
                    //     'body' => $msg,
                    //     'from' => $b_sender,
                    // );
                    
                    // $curl = curl_init();

                    // curl_setopt_array($curl, array(
                    //     CURLOPT_URL => "https://connect.routee.net/sms",
                    //     CURLOPT_RETURNTRANSFER => true,
                    //     CURLOPT_ENCODING => "",
                    //     CURLOPT_MAXREDIRS => 10,
                    //     CURLOPT_TIMEOUT => 30,
                    //     CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    //     CURLOPT_CUSTOMREQUEST => "POST",
                    //     CURLOPT_POSTFIELDS => json_encode($postData),
                    //     CURLOPT_HTTPHEADER => array(
                    //         "authorization: Bearer 3b03fb0e-ae81-4f2e-80d4-2e93b446ae30",
                    //         "content-type: application/json"
                    //     ),
                    // ));
                    // $response = curl_exec($curl);
                    // $err = curl_error($curl);
                    // curl_close($curl);
                    
                    // $resp = json_decode($response,true);

                    $principal_arrears = $this->input->post('principal_arrears');
                    $interest_arrears = $this->input->post('interest_arrears');

                    if($principal_arrears > 0){
                        $this->Member_model->insert_member_arrears($member_id,$principal_arrears);
                    }

                    if($interest_arrears > 0){
                        $this->Member_model->insert_member_interest_arrears($member_id,$interest_arrears);
                    }

                    $this->Member_model->insert_member_balance($member_id,-($principal_arrears+$interest_arrears));
                    
                    $balance = -($principal_arrears+$interest_arrears);

                    /*Add society member bill payment logs*/
                    $bpm_logs = array(
                        'entity_id' => $member_id,
                        'member_id' => $member_id,
                        'amount' => $balance,
                        'type' => 'OPENINGBALANCE',
                        'dnt' => time(),
                    );
                    $this->Member_model->insert_bpm_logs($bpm_logs);
                    if($balance > 0):
                        /*Add society member bill payment transaction logs*/
                        $bpm_txn_logs = array(
                            'entity_id' => $member_id,
                            'narration' => 'OPENINGBALANCE',
                            'credit' => '',
                            'debit' => $balance,
                            'balance' => $balance,
                            'dnt' => time(),
                            'member_id' => $member_id,
                        );
                        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                    elseif($balance < 0):
                        /*Add society member bill payment transaction logs*/
                        $bpm_txn_logs = array(
                            'entity_id' => $member_id,
                            'narration' => 'OPENINGBALANCE',
                            'credit' => -($balance),
                            'debit' => '',
                            'balance' => $balance,
                            'dnt' => time(),
                            'member_id' => $member_id,
                        );
                        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                    endif;
                    
                    // $tables = $this->config->item('tables', 'ion_auth');
                    // $identity_column = $this->config->item('identity', 'ion_auth');
                    // $this->data['identity_column'] = $identity_column;
                    // $email = strtolower($this->input->post('member_email'));
                    // $identity = ($identity_column === 'email') ? $email : $this->input->post('identity');
                    // $password = 'msociety123';

                    // $additional_data = [
                    //     'first_name' => $this->input->post('member_name'),
                    //     'last_name' => '',
                    //     'company' => '',
                    //     'phone' => $this->input->post('member_phone'),
                    // ];
                    // $group = array('8');
                    // $user_id = $this->ion_auth->register($identity, $password, $email, $additional_data,$group);
                    // $society_id = $this->input->post('society_id');
                    // $param = array(
                    //     'user_id' => $user_id,
                    //     'role_id' => 8,
                    //     'society_id' => $society_id,
                    //     'created_at' => $this->input->post('created_at'),
                    //     'updated_at' => $this->input->post('updated_at'),
                    // );
                    // $society_access_id = $this->Society_access_model->add_society_access($param);
                    $message['text'] = "Member Added successfully!!";
                    $message['status'] = "Success";
                    $this->session->set_flashdata('message', $message);
                    redirect('member/manage'.'/'.$society_id);
                else:
                    $data['_view'] = 'member/add';
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                    $this->load->view('societies/members/add_new_member',$data);
                endif;
            // } 
            // else
            // {
            //     $user_id = $this->ion_auth->register($identity, $password, $email, $additional_data,$group);
            //     $sess_id=$this->session->userdata('user_id');
            //     // die();
            //         $params = array(
            //         'wing' => $this->input->post('member_wing'),
            //         'flat_no' => $this->input->post('member_flat_no'),
            //         'name' => $this->input->post('member_name'),
            //         'tenant' => $this->input->post('tenant'),
            //         'phone' => $this->input->post('member_phone'),
            //         'flat_area' => $this->input->post('member_flat_area'),
            //         'principal_arrears' => $this->input->post('principal_arrears'),
            //         'interest_arrears' => $this->input->post('interest_arrears'),
            //         'email_id' => $this->input->post('member_email'),
            //         'two_wheelers' => $this->input->post('member_two_wheeler'),
            //         'four_wheelers' => $this->input->post('member_four_wheeler'),
            //         'flat_type_id' => $this->input->post('member_flat_type'),
            //         'created_at' => $this->input->post('created_at'),
            //         'updated_at' => $this->input->post('updated_at'),
            //         'society_id' => $this->input->post('society_id'),
            //         'user_id' => $user_id,
                    
            //         // 'member_balance' => $this->input->post('member_balance'),
            //         // 'flat_sub_type_id' => $this->input->post('flat_sub_type_id'),
            //     );
            
                
            //     if($member_id = $this->Member_model->add_member($params)):

            //         $name = $this->input->post('member_name');
            //         $phone = $this->input->post('member_phone');
            //         $email = $this->input->post('member_email');
            //         $content = "Dear ".$name." Your society has been registered with ManageMod mSociety. Please download ManageMod mSociey mobile app from Google Playstore. Your login credentials are, username: ".$email." and password: ".$password;
            //         $b_sender = 'PayNet';
            //         $msg =  $content;
            //         $m_phone = $phone;
                    
            //         $postData = array(
            //             'to' => "+91".$m_phone,
            //             'body' => $msg,
            //             'from' => $b_sender,
            //         );
                    
            //         $curl = curl_init();

            //         curl_setopt_array($curl, array(
            //             CURLOPT_URL => "https://connect.routee.net/sms",
            //             CURLOPT_RETURNTRANSFER => true,
            //             CURLOPT_ENCODING => "",
            //             CURLOPT_MAXREDIRS => 10,
            //             CURLOPT_TIMEOUT => 30,
            //             CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            //             CURLOPT_CUSTOMREQUEST => "POST",
            //             CURLOPT_POSTFIELDS => json_encode($postData),
            //             CURLOPT_HTTPHEADER => array(
            //                 "authorization: Bearer 3b03fb0e-ae81-4f2e-80d4-2e93b446ae30",
            //                 "content-type: application/json"
            //             ),
            //         ));
            //         $response = curl_exec($curl);
            //         $err = curl_error($curl);
            //         curl_close($curl);
            //         $resp = json_decode($response,true);

            //         $principal_arrears = $this->input->post('principal_arrears');
            //         $interest_arrears = $this->input->post('interest_arrears');
                    

            //         // $this->Member_model->insert_member_arrears($member_id,$principal_arrears);
            //         // $this->Member_model->insert_member_interest_arrears($member_id,$interest_arrears);
            //         // $this->Member_model->insert_member_balance($member_id,$principal_arrears+$interest_arrears);

            //         // $balance = $principal_arrears+$interest_arrears;

            //         if($principal_arrears > 0){
            //             $this->Member_model->insert_member_arrears($member_id,$principal_arrears);
            //         }

            //         if($interest_arrears > 0){
            //             $this->Member_model->insert_member_interest_arrears($member_id,$interest_arrears);
            //         }

            //         $this->Member_model->insert_member_balance($member_id,-($principal_arrears+$interest_arrears));
                    
            //         $balance = -($principal_arrears+$interest_arrears);

            //         /*Add society member bill payment logs*/
            //         $bpm_logs = array(
            //                         'entity_id' => $member_id,
            //                         'member_id' => $member_id,
            //                         'amount' => $balance,
            //                         'type' => 'OPENINGBALANCE',
            //                         'dnt' => time(),
            //                     );
            //         $this->Member_model->insert_bpm_logs($bpm_logs);
            //         if($balance > 0):
            //             /*Add society member bill payment transaction logs*/
            //             $bpm_txn_logs = array(
            //                 'entity_id' => $member_id,
            //                 'narration' => 'OPENINGBALANCE',
            //                 'credit' => '',
            //                 'debit' => $balance,
            //                 'balance' => $balance,
            //                 'dnt' => time(),
            //                 'member_id' => $member_id,
            //             );
            //             $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
            //         elseif($balance < 0):
            //             /*Add society member bill payment transaction logs*/
            //             $bpm_txn_logs = array(
            //                 'entity_id' => $member_id,
            //                 'narration' => 'OPENINGBALANCE',
            //                 'credit' => -($balance),
            //                 'debit' => '',
            //                 'balance' => $balance,
            //                 'dnt' => time(),
            //                 'member_id' => $member_id,
            //             );
            //             $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
            //         endif;
                    
            //         // $tables = $this->config->item('tables', 'ion_auth');
            //         // $identity_column = $this->config->item('identity', 'ion_auth');
            //         // $this->data['identity_column'] = $identity_column;
            //         // $email = strtolower($this->input->post('member_email'));
            //         // $identity = ($identity_column === 'email') ? $email : $this->input->post('identity');
            //         // $password = 'msociety123';

            //         // $additional_data = [
            //         //     'first_name' => $this->input->post('member_name'),
            //         //     'last_name' => '',
            //         //     'company' => '',
            //         //     'phone' => $this->input->post('member_phone'),
            //         // ];
            //         // $group = array('8');
            //         // $user_id = $this->ion_auth->register($identity, $password, $email, $additional_data,$group);
            //         $society_id = $this->input->post('society_id');
            //         $param = array(
            //             'user_id' => $user_id,
            //             'role_id' => 8,
            //             'society_id' => $society_id,
            //             'created_at' => $this->input->post('created_at'),
            //             'updated_at' => $this->input->post('updated_at'),
            //         );
            //         $society_access_id = $this->Society_access_model->add_society_access($param);
            //         $message['text'] = "Member Added successfully!!";
            //         $message['status'] = "Success";
            //         $this->session->set_flashdata('message', $message);
            //         redirect('member/manage'.'/'.$society_id);
            //     else:
            //         $data['_view'] = 'member/add';
            //         $message['text'] = "Please Check Your Input!!";
            //         $message['status'] = "Fail";
            //         $this->session->set_flashdata('message', $message);
            //         $this->load->view('societies/members/add_new_member',$data);
            //     endif;


            // }
            
        }
        else
        {
			$data['all_societies'] = $this->Society_model->get_all_societies();
			$data['all_users'] = $this->User_model->get_all_users();
			$data['all_flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
            $data['_view'] = 'member/add';
            $this->load->view('societies/members/add_new_member',$data);
        }
    }  

    /*
     * Editing a member
     */
    function edit_member($socirtys_id='',$id = '')
    {

        if($id == ''){
            $id = $this->input->post('member_id');
        }
        $data = array(
            'title' => "Edit Flat"
        );
        // check if the member exists before trying to edit it
        $data['member'] = $this->Member_model->get_member($id);
        
        if(isset($data['member']['id']))
        {  
            $this->load->library('form_validation');
			$this->form_validation->set_rules('member_flat_no','Flat No','required');
            $this->form_validation->set_rules('member_name','Name','required');
            $this->form_validation->set_rules('member_flat_area','Flat Area','required');		
			if($this->form_validation->run())  
            {  
                $params = array(
				'wing' => $this->input->post('member_wing'),
                'flat_no' => $this->input->post('member_flat_no'),
                'name' => $this->input->post('member_name'),
                // 'tenant' => $this->input->post('tenant'), 
                'tenant' =>($this->input->post('tenant') !=''?$this->input->post('tenant'):0),              
                'flat_area' => $this->input->post('member_flat_area'),
                'principal_arrears' => $this->input->post('principal_arrears'),
                'interest_arrears' => $this->input->post('interest_arrears'),
                'two_wheelers' => $this->input->post('member_two_wheeler'),
                'four_wheelers' => $this->input->post('member_four_wheeler'),
                'flat_type_id' => $this->input->post('member_flat_type'),
                'updated_at' => $this->input->post('updated_at'),
                'society_id' => $this->input->post('society_id'),
                );
                $society_id  = $this->input->post('society_id');
                if($this->Member_model->update_member($id,$params)):
                   //checking society accounting details present or not-03-03-2022
                    $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                    if(!empty($accounting_db_details)){
                        $get_flat_ledger_id=$this->ledger->get_ledger("flat","flat",$this->input->post('society_id'),"sc_flat_acc_Details",$id);
                        if($get_flat_ledger_id==0){ 
                            if($this->input->post('member_wing')!=''){
                                $ledger_name="Flat-".$this->input->post('member_wing')."-".$this->input->post('member_flat_no');
                            }else{
                                $ledger_name="Flat-".$this->input->post('member_flat_no');
                            }
    
                            $balance = $this->Member_model->get_current_balance($id);
                   
                            if($balance['new_balance'] >= 0):
                                $debit_crdit="D";
                                $bal=$balance['new_balance'];
                                //$group_id=6;
                                $group_id=$this->ledger->get_group_id("Current Assets");
                            elseif($balance['new_balance']<0):
                                $debit_crdit="C";
                                $bal=-($balance['new_balance']);
                                // $group_id=11;
                                $group_id=$this->ledger->get_group_id("Current Liabilities");
                            endif;
    
                            $flat_ledger_id=$this->ledger->create_ledger($ledger_name,"flat",$this->input->post('society_id'),"sc_flat_acc_Details",$bal,$group_id,$debit_crdit,$id); 
    
                            if($flat_ledger_id){
                                $message['text'] = "Member Updated successfully!!";
                              
                               
                            }else{
                                $message['text'] = "Member Updated successfully but ledger not created!!";
                               
                            }
                        }else{
                            $message['text'] = "Member Updated successfully!!";
                        } 
                    }else{
                        $message['text'] = "Member Updated successfully!!";
                       
                    }
                    $message['status'] = "Success";
                    $this->session->set_flashdata('message', $message);
                    redirect('member/manage'.'/'.$society_id);
                   
                else:
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                    redirect('member/manage'.'/'.$society_id);
                endif;
            }
            else
            {
				$society_id  = $this->uri->segment(3);
				$data['all_societies'] = $this->Society_model->get_all_societies();
				$data['all_users'] = $this->User_model->get_all_users();                
				$data['all_flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
                $data['_view'] = 'member/edit';
                $this->load->view('societies/members/edit_member',$data);
            }
        }
        else
            show_error('The member you are trying to edit does not exist.');
    } 

    /*
     * Deleting member
     */
    function remove($id)
    {
        $member = $this->Member_model->get_member($id);
      
      
        // check if the member exists before trying to delete it
        if(isset($member['id']))
        {  
            $flat_ledger=$this->ledger->get_ledger("flat","flat",$member['society_id'],"sc_flat_acc_Details",$member['id']);
          
            $flat_ledger_delete=$this->ledger->ledger_delete($member['society_id'],$flat_ledger); 
           
            if($flat_ledger_delete=="0"){               
                $this->Member_model->delete_member($id, $member['user_id']);
                echo "0";
            }else{
                echo "1";
            }            
            // $this->Utility_service_provider_member_model->delete_utility_member_by_member($id);//discuss harsh sir users_groups table does not exit in live or test server - 09-02-2022
            
        }
        else{
            echo "2";
        }
            //show_error('The member you are trying to delete does not exist.');
    }

    public function view_single_member($society_id=0,$member_id=0) {
        $data = array(
            'title' => "Members"
        );
        $society_id = $this->uri->segment(3);
        $member_id = $this->uri->segment(4);
        // $member = $this->Member_model->get_single_member($id);//22 dec -sachhidanand
        $member = $this->Member_model->get_single_member($member_id);

        foreach($member as $rows){
            $data['member'] = $rows;
            $data['bill_details'] = $this->Bill_detail_model->get_all_bill_by_member_society($society_id, $member_id);           
            $data['payments'] = $this->Payment_model->get_all_payment_by_member_society($society_id, $rows->id);
            $data['banks'] = $this->Bank_model->get_all_bank($society_id);
        }
        //get last bill - 30-03-2022
        $data['last_bill'] = $this->Bill_detail_model->get_last_bill_details_member($member_id); 
        //get all bill head
        $data['bill_head_list'] = $this->Billing_head_model->get_bill_heads_by_society($society_id);
        //add parking charges and noc in bill head array
        array_push( $data['bill_head_list'],["name"=>"NOC Charge"],["name"=>"Parking Charge"]);
        
        $data['society'] = $this->Society_model->get_society($society_id);
        
        $data['member_balance'] = $this->Member_model->get_member_current_balance($member_id);
        $data['member_principal_arrears'] = $this->Member_model->get_member_current_arrears($member_id);
        $data['member_interest_arrears'] = $this->Member_model->get_member_current_intrest_arrears($member_id);

        $data['next_member_details'] = $this->Member_model->get_next_member_details($society_id,$member_id,"next");
        
        $data['previous_member_details'] = $this->Member_model->get_next_member_details($society_id,$member_id,"pre");
       
        $this->load->view('societies/members/view_single_member', $data);
    }

    public function debit_note()
    {
        
        $amount = $this->input->post('amount');
        // $bill_id = $this->input->post('bill');
        $description = $this->input->post('description');
        $payment_date = $this->input->post('payment_date');
        $member_id = $this->input->post('member_id');
        $society_id = $this->input->post('society_id');
        $bill_head_name = $this->input->post('bill_head_name');
        
        if(!empty($amount)&&!empty($description) &&!empty($payment_date) &&!empty($member_id) &&!empty($society_id)&&!empty($bill_head_name)){                
            if($amount == 0 || $amount < 0):
                $message['text'] = "Please enter a valid debit amount.";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                return true;            
            else: 
                if($bill_head_name=="NOC Charge"||$bill_head_name=="Parking Charge"){
                    $bill_ledger_id=$this->ledger->get_ledger($bill_head_name,$bill_head_name,$society_id,"sc_acc_details");
                }else{
                    $bill_ledger_id=$this->ledger->get_ledger($bill_head_name,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                }
  
                if($bill_ledger_id!=0){
                    $payment_date=date("Y-m-d",strtotime($payment_date));
                    $dn = $this->issue_debit($amount, $member_id, $society_id, $description, $payment_date); 
                      
                    if($dn==1){                      
                       
                        $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member_id);
                    
                        $main_array=[];
                        $debit=array("dc"=>"D","dr_amount"=>$amount, "ledger_id"=>$bill_ledger_id);
                            
                        $credit=array("dc"=>"C","cr_amount"=>$amount, "ledger_id"=>$flat_ledger_id);
                        array_push($main_array,$debit,$credit);
                        $narration= "Debit note of Rs.'.'_'.$amount.'_' .' is successfully issued.";
                        $this->ledger->accounting_bill_double_entry($society_id,4,$payment_date,$narration,$main_array);
    
                        $message['text'] = "Debit note issued successfully.";
                        $message['status'] = "Success";
                    }else{
                        $message['text'] = "Debit note issued unsuccessfully.";
                        $message['status'] = "Fail";
                    }
                }else{
                    $message['text'] = "Bill Head Error";
                    $message['status'] = "Fail";
                }              
            
                $this->session->set_flashdata('message', $message);
                return true;
            
            endif;
        }else{
            
            $message['text'] = "Please all input field.";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
            return true;
        }
        
      
    }

    function issue_debit($amount, $member_id, $society_id, $description, $payment_date)
    {
        $this->db->trans_start(); # Starting Transaction
        $member_id = $member_id;
        $society_id = $society_id;
        $amount = $amount;

        $current_arrears = $this->Member_model->get_member_current_arrears($member_id);
        $current_interest = $this->Member_model->get_member_current_intrest_arrears($member_id);
        $current_balance = $this->Member_model->get_member_current_balance($member_id);

        $new_arrear = $current_arrears + $amount;

        $new_balance = $current_balance - $amount;

        $this->Member_model->insert_member_arrears($member_id, $new_arrear);
        $this->Member_model->insert_member_balance($member_id, $new_balance);


        $member = $this->Member_model->get_single_member($member_id);
        $last_bill = $this->Bill_detail_model->get_last_bill_details($member_id);
        $society = $this->Society_model->get_society($society_id);
        $payment_date = date('Y-m-d H:i:s', strtotime($payment_date));
        $last_payment = $this->Payment_model->get_last_payment_details($member_id);
        $description = $description;
        $last_receipt = $this->Payment_model->get_last_receipt($society['id']);
        //Issue on this line comment -28-03-2022 Sachhidanand Gupta
        // $current_receipt = $last_receipt != NULL ? $last_receipt[0]['receipt_id'] + 1 : 1;
         $current_receipt = $last_receipt != NULL ? $last_receipt + 1 : 1;
        $params['narration'] = $description;
        $params['payment_date'] = date('Y-m-d H:i:s', strtotime($payment_date));
        $params['credit'] = $amount;
        // $params['balance'] = $last_balance + $amount;
        $params['member_id'] = $member_id;
        $params['society_id'] = $society_id;
        $params['is_debit_note'] = 1;
        $params['paid_by'] = 'Debit Note';
        $params['is_cash'] = 1;
        $params['receipt_id'] = $current_receipt;
        $dn = $this->Payment_model->add_payment($params);

        /*Add society member bill payment logs*/
        $bpm_logs = array(
                        'entity_id' => $dn,
                        'member_id' => $member_id,
                        'amount' => $amount,
                        'type' => 'DEBITNOTE',
                        'dnt' => time(),
                    );
        $this->Member_model->insert_bpm_logs($bpm_logs);

        /*Add society member bill payment transaction logs*/
        $bpm_txn_logs = array(
            'entity_id' => $dn,
            'narration' => 'DEBITNOTE',
            'credit' => 0,
            'debit' => $amount,
            'balance' => $new_balance,
            'dnt' => time(),
            'member_id' => $member_id,
        );

        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
        $this->db->trans_complete(); # Completing transaction

        if ($this->db->trans_status() === FALSE) {
            # Something went wrong.
            $this->db->trans_rollback();
            return "0";
        } 
        else {
            # Everything is Perfect. 
            # Committing data to the database.
            $this->db->trans_commit();
            return "1";
        }       
    }

    public function credit_note()
    {        
        $amount = $this->input->post('amoun');
        $description = $this->input->post('descriptio');
        $payment_date = $this->input->post('payment_da');
        $member_id = $this->input->post('member_id');
        $society_id = $this->input->post('society_id');

        $bill_head_name = $this->input->post('bill_head_name');
        
        if(!empty($amount)&&!empty($description) &&!empty($payment_date) &&!empty($member_id) &&!empty($society_id)&&!empty($bill_head_name)){       
            if($amount == 0 || $amount < 0):
                $message['text'] = "Please enter a valid credit amount.";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                return true;
              
            else: 

                if($bill_head_name=="NOC Charge"||$bill_head_name=="Parking Charge"){
                    $bill_ledger_id=$this->ledger->get_ledger($bill_head_name,$bill_head_name,$society_id,"sc_acc_details");
                }else{
                    $bill_ledger_id=$this->ledger->get_ledger($bill_head_name,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                } 

                if($bill_ledger_id!=0){
                    $payment_date=date("Y-m-d",strtotime($payment_date));
                    $dn = $this->issue_credit($amount, $member_id, $society_id, $description, $payment_date);
                   
                    if($dn==1){
                    
                        $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member_id);

                        $main_array=[];
                        $debit=array("dc"=>"D","dr_amount"=>$amount,"ledger_id"=>$flat_ledger_id);
                        $credit=array("dc"=>"C","cr_amount"=>$amount,"ledger_id"=>$bill_ledger_id);
                        array_push($main_array,$debit,$credit);
                        $narration= "Credit note of Rs.'.'_'.$amount.'_' .' is successfully issued.";
                        $this->ledger->accounting_bill_double_entry($society_id,1,$payment_date,$narration,$main_array); 
                        $message['text'] = "Credit note of Rs. ".$amount." is successfully issued.";
                        $message['status'] = "Success";
                    }else{
                        $message['text'] = "Credit note of Rs. ".$amount." is unsuccessfully issued.";
                        $message['status'] = "Fail";
                    } 
                }else{
                    $message['text'] = "Bill Head Errors";
                    $message['status'] = "Fail";
                }                            
               
                $this->session->set_flashdata('message', $message);
                return true;
            endif;
        }else{
            $message['text'] = "Select all input field.";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);                
            return true;
        }
       
    }

    function issue_credit($amount, $member_id, $society_id, $description, $payment_date)
    {
        $member_id = $member_id;
        $society_id = $society_id;
        $amount = $amount;
        $this->db->trans_start(); # Starting Transaction
        $current_arrears = $this->Member_model->get_member_current_arrears($member_id);
        $current_interest = $this->Member_model->get_member_current_intrest_arrears($member_id);
        $current_balance = $this->Member_model->get_member_current_balance($member_id);

        $receipt_no = $this->Payment_model->get_last_receipt($society_id);

        $receipt_no++;

        //1000+100 = 1100
        //-200+100 = -100
        //-400+500 = 100
        $soft_balance = $current_balance + $amount;
        // if($paid_by == 'cash'){
            $is_cash = 1;
        // } else {
        //     $is_cash = 0;
        // }

        $payment_params = array(
            'payment_date' => $payment_date,
            'narration' => $description,
            'credit' => $amount,
            'member_id' => $member_id,
            'society_id' => $society_id,
            'balance' => $soft_balance,
            'paid_by' => 'Credit Note',
            'is_credit_note' => 1,
            // 'cheque_no' => $cheque_no,
            // 'bank_id' => $bank_id,
            // 'depositor_bank' => $depositor_bank,
            'receipt_id' => $receipt_no,
            'is_cash' => $is_cash
        );

        //insert payment
        $payment_id = $this->Payment_model->add_payment($payment_params);

        //Irrespective of balance and arrears update member balance
        $this->Member_model->insert_member_balance($member_id,$soft_balance);

        /*Add society member bill payment logs*/
        $bpm_logs = array(
                        'entity_id' => $payment_id,
                        'member_id' => $member_id,
                        'amount' => $amount,
                        'type' => 'CREDITNOTE',
                        'dnt' => time(),
                    );
        $this->Member_model->insert_bpm_logs($bpm_logs);

        /*Add society member bill payment transaction logs*/
        $bpm_txn_logs = array(
            'entity_id' => $payment_id,
            'narration' => 'CREDITNOTE',
            'credit' => $amount,
            'debit' => '',
            'balance' => $soft_balance,
            'dnt' => time(),
            'member_id' => $member_id,
        );

        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);

        //logic for arrears and interest arrears calculation
        if($current_balance >= 0) {
            return true;
        } else {
            $soft_amount = $amount - $current_interest;
            if(($amount - $current_interest) >= 0) {
                $new_interest = 0;
            } else {
                $new_interest = $current_interest - $amount;
            }

            if($soft_amount > 0) {
                if(($soft_amount - $current_arrears) >= 0) {
                    $new_arrears = 0;
                } else {
                    $new_arrears = $current_arrears - $soft_amount;
                }
            } else {
                $new_arrears = $current_arrears;
            }

            if($soft_balance >= 0){
                $this->Bill_detail_model->update_all_bill_status($member_id);
            } else {
                // $this->Bill_detail_model->update_bill_partially_paid($member_id);
                $this->Bill_detail_model->update_bill_partially_paid($member_id,$amount,$payment_id);
                //issue in uper line pass only 1 paramete but needed 3 parameter
            }

            $this->Member_model->insert_member_interest_arrears($member_id,$new_interest);
            $this->Member_model->insert_member_arrears($member_id,$new_arrears);
            $this->db->trans_complete(); # Completing transaction

            if ($this->db->trans_status() === FALSE) {
                # Something went wrong.
                $this->db->trans_rollback();
                return "0";
            } 
            else {
                # Everything is Perfect. 
                # Committing data to the database.
                $this->db->trans_commit();
                return "1";
            }

        }
    }

    public function recalculate()
    {
        $member_id = $this->uri->segment(3);
        $society_id = $this->uri->segment(4);
        $member = $this->Member_model->get_single_member($member_id);
        $member_initial_balance = -($member[0]->principal_arrears + $member[0]->interest_arrears);
        $changes = array();
        $all_entries = $this->Member_model->get_all_entries($member_id);
        foreach($all_entries as $entry):
            $key = $entry['type'].'_'.$entry['id'];
            $type = $entry['type'];
            switch ($type) {
                case 'bill':
                    $changes[$key] = array();
                    $ret = $this->Bill_detail_model->update_bill_details($entry['id'], $member_id, $member_initial_balance);
                    $changes[$key]['data'] = $ret;
                    break;
                
                case 'payment':
                    $changes[$key] = array();
                    $ret = $this->Payment_model->update_arrear_debit($entry['id'], $member_id, $member_initial_balance);
                    $changes[$key]['data'] = $ret;
                    break;

                case 'credit_note':
                    $changes[$key] = array();
                    $ret = $this->Payment_model->update_credit_note($entry['id'], $member_id, $member_initial_balance);
                    $changes[$key]['data'] = $ret;
                    break;

                case 'debit_note':
                    $changes[$key] = array();
                    $ret = $this->Payment_model->update_debit_note($entry['id'], $member_id, $member_initial_balance);
                    $changes[$key]['data'] = $ret;
                    break;
            }
        endforeach;
        redirect('member/view_single_member'.'/'.$member_id.'/'.$society_id);
    }

    public function track_flat() {
        $data = array(
            'title' => "Assign Flat"
        );

        if($this->input->post()){           
            $post=json_decode(json_encode($this->input->post('flat_type')), true);            
            // $society_id = $this->input->post('society_id');
            
            foreach(json_decode($post) as $po => $v)
            {
                if(isset($v) && !empty($v)){
                    $v=explode("-",$v) ;                   
                    $params = array("flat_type_id"=>$v[1]);
                    $member_id = $v[0];
                    $this->Member_model->update_member_flat($member_id,$params);
                } 
                            
            }
            
            // $data['members'] = $this->Member_model->get_all_members($society_id);
            // $data['flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
            // $data['society_id'] = $this->uri->segment(3);
            $message['text'] = "Flat assigned successfully!!";
            $message['status'] = "Success";
            $this->session->set_flashdata('message', $message);
            // print_r($this->session->flashdata('message'));die;
            // redirect('member/track_flat'.'/'.$society_id);
            
        }
        else
        {
            $society_id = $data['society_id'] = $this->uri->segment(3);
            $data['members'] = $this->Member_model->get_all_members($society_id);           
            $data['flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
           
        }
        
        $this->load->view('societies/society_actions/track_flats', $data);
    }

    public function track_flat_bak() {
        $data = array(
            'title' => "Societies"
        );

        if($this->input->post()){
           
            print_r($this->input->post());die;
            $post = $this->input->post('post_data');
            $society_id = $this->input->post('society_id');
            foreach($post as $po => $v)
            {                
                $society_id = $this->input->post('society_id');
                if(isset($v['flat_category']) && !empty($v['flat_category'])){
                    $params = array("flat_type_id"=>$v['flat_category']);
                    $member_id = $v['member_id'];
                    $this->Member_model->update_member_flat($member_id,$params);
                }                
            }
            $data['members'] = $this->Member_model->get_all_members($society_id);
            $data['flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
            $data['society_id'] = $this->uri->segment(3);
            $message['text'] = "Flat assigned successfully!!";
            $message['status'] = "Success";
            $this->session->set_flashdata('message', $message);
            redirect('member/track_flat'.'/'.$society_id);
        }
        else
        {
            $society_id = $data['society_id'] = $this->uri->segment(3);
            $data['members'] = $this->Member_model->get_all_members($society_id);           
            $data['flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
           
        }
        
        $this->load->view('societies/society_actions/track_flats', $data);
    }
    public function exportCSV()
    {
        
        
        ob_clean();
        // file creation
        $file = fopen('php://output', 'w'); 
        $header = array("wing","flat_no","tenant","name","flat_area", "principal_arrears", "interest_arrears", "no_of_two_wheelers", "no_of_four_wheelers");
        fputcsv($file, $header);
        // file name
        $filename = 'sample_flat_'.date('Ymd').'.csv';
        header("Content-Description: File Transfer");
        header("Content-Disposition: attachment; filename=$filename");
        header("Content-Type: application/csv; ");
        fclose($file);
        exit;
    }

    public function send_notification()
    {
        $email = $this->input->post('email');
        $sms = $this->input->post('sms');
        $push = $this->input->post('push');
        $society_id = $this->input->post('society_id');
        $member_id = $this->input->post('member_id');
        $content = $this->input->post('content');
        $member = $this->Member_model->get_member_single($member_id);      
        $society = $this->Society_model->get_society($society_id);  
        if(!empty($email ||!empty($sms))){
            if(!empty($email)){

                if(!empty($member[0]->email_id)){
                    $email_to = $member[0]->email_id;
                    $messag = 'Dear Member '.$member[0]->wing.' '.$member[0]->flat_no.', '.$content.' '.'Regards '.$society['name'];
                    $this->load->library('email');
                    $this->email->set_newline("\r\n");
                    $this->email->from('no-reply@paynet.co.in'); // change it to yours
                    $this->email->to($email_to);// change it to yours
                    // $this->email->to('sachin.gupta@paynet.co.in');// change it to yours
                    $this->email->subject('Society Notification');
                    $this->email->message($messag);               
                    if($result = $this->email->send())
                    {
                        $message['text'] = "Email sent Successfully!!";
                        $message['status'] = "Success";
                        $this->session->set_flashdata('message', $message);
                        redirect('member/view_single_member/'.'/'.$member_id.'/'.$society_id);
                       
                    }
                    else
                    {
                       
                        $message['text'] = "Email sent Unsuccessfully!!";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                       
                    }
                }else{
                    $message['text'] = "Email not available!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                }
            }

            if(!empty($sms)){        
            
                if(!empty($member[0]->phone) && $member[0]->phone != NULL):
                    $b_sender = 'PayNet';
                    // $msg =  'Dear Member '.$member[0]->wing.' '.$member[0]->flat_no.', '.$content.' '.'Regards '.$society['name'];
                    $getInvitationMsg = 'Dear Member '.$member[0]->wing.' '.$member[0]->flat_no.', '.$content.' .Regards, '.$society['name'].' . Powered by PayNet.';
                    $m_phone = $member[0]->phone;
                    
                    $postData = array(
                        'to' => "+91".$m_phone,
                        'body' => $getInvitationMsg,
                        'from' => $b_sender,
                        "restrictions" => ["india" =>[
                            "templateId"=>1007977560317259344,
                            "entityId"=>1001034198501773685
                            ]
                        ]
                    );
                    
                    $curl = curl_init();
    
                    curl_setopt_array($curl, array(
                        CURLOPT_URL => "https://connect.routee.net/sms",
                        CURLOPT_RETURNTRANSFER => true,
                        CURLOPT_ENCODING => "",
                        CURLOPT_MAXREDIRS => 10,
                        CURLOPT_TIMEOUT => 30,
                        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                        CURLOPT_CUSTOMREQUEST => "POST",
                        CURLOPT_POSTFIELDS => json_encode($postData),
                        CURLOPT_HTTPHEADER => array(
                            "authorization: Bearer 3b03fb0e-ae81-4f2e-80d4-2e93b446ae30",
                            "content-type: application/json"
                        ),
                    ));
                    $response = curl_exec($curl);
                    $err = curl_error($curl);
                    curl_close($curl);
                    
                    $resp = json_decode($response,true);
    
                    $message['text'] = "SMS sent Successfully!!";
                    $message['status'] = "Success";
                    $this->session->set_flashdata('message', $message);
                    
                    redirect('member/view_single_member/'.'/'.$member_id.'/'.$society_id);
                    // exit(json_encode(array('errorMsg' => $society['name'].'_'.'- SMS Sent.')));
                else:
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                   
                    redirect('member/view_single_member/'.'/'.$member_id.'/'.$society_id);
                endif;
            }
        }else{
            $message['text'] = "Please Select any one channel";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
        }      
        
        
    }

    public function member_ledger()
    {
        $data = array();
        $member_id = $this->uri->segment(4);
        $society_id = $this->uri->segment(3);
        $society = $this->Society_model->get_society_details($society_id);
        
        $member = $this->Member_model->get_single_member($member_id);
        
        $flat =' Flat No: '.$member[0]->flat_no.' Wing: '.$member[0]->wing;       

        $ledger_data= $this->Member_model->get_member_ledger($member_id);
       
        if(!empty($ledger_data)){
            foreach($ledger_data as $x => $val) {
                $ledger_data[$x]["date"]=  date('d-m-Y', strtotime( $this->Member_model->get_entity_date($val['entity_id'], $val['narration'],$member_id)));
            }    
            array_multisort(array_map('strtotime',array_column($ledger_data,'date')),
                    SORT_DESC,$ledger_data);           
           
            $data['ledger_data'] =$ledger_data;
           
        }
       
        //checking society accounting details present or not-03-03-2022
        $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);							
        if(!empty($accounting_db_details)){
            $get_flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member_id);
        
            if($get_flat_ledger_id!=0){
                $flat_transaction=$this->ledger->ledger_transaction($society_id,$get_flat_ledger_id);
                
				$flat_transaction->opening_balance[0]->date=date("Y")."-04-01";
				
				$flat_transaction->opening_balance[0]->amount=$flat_transaction->opening_balance[0]->op_balance;
				$flat_transaction->opening_balance[0]->dc=$flat_transaction->opening_balance[0]->op_balance_dc;
                $flat_transaction->opening_balance[0]->narration="Opening Balance";
				// $data['cash_transaction']= (object) array_merge((array) $cash_transaction->opening_balance, (array) $cash_transaction->transaction);

				$ledger_data=array_merge((array) $flat_transaction->opening_balance, (array) $flat_transaction->transaction);

				// usort($ledger_data, function($a, $b) {
				// 	return (abs(strtotime('today') - strtotime($a->date))
				// 		- (abs(strtotime('today') - strtotime($b->date))));
				// });
				$data['flat_transaction']=$ledger_data;
            }
			   

        }
        
        $data['title'] = $society[0]->name." Member Ledger for ".$flat;
        $this->load->view('societies/members/member_ledger', $data);
    }
    
    public function edit_last_member_bill($society_id,$member_id,$bill_id) {
        $data = array(
            'title' => "Member Bill"
        );
        $data['member_details'] = $this->Member_model->get_single_member($member_id);  
        $data['last_bill'] = $this->Bill_detail_model->get_last_bill_details_member($member_id); 		
       
        $this->load->view("societies/bills/edit_member_last_bill", $data);
    }

    function edit_last_member_bill_update()
    {

        $data = array(
            'title' => "Edit FLat Bill"
        );        
        $society_id=$this->input->post("society_id");
		$member_id=$this->input->post("member_id");
        $bill_id=$this->input->post("bill_id");		  
        
        $last_bill = $this->Bill_detail_model->get_bill_detail($bill_id);
        
        if($last_bill['bill_ledger_id']!='' && $last_bill['bill_ledger_id']!=0){

            $array=array();
            $main_array=[];     
            $member_details = $this->Member_model->get_member($member_id);          
            $sub_total=0;	
            foreach(unserialize($last_bill['details']) as $x => $val) {
                    if($x!="sub_total"){
                        $array[$x]=$this->input->post(str_replace(' ', '_', trim($x)));
                        $sub_total+=$this->input->post(str_replace(' ', '_', trim($x)));
                        $bill_head_ledger=$this->ledger->get_bill_details($society_id,0,trim($x));
                        $credit=[];
                        if(in_array(trim($x),array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){
                            $ledger_id=$this->ledger->get_ledger(trim($x),trim($x),$society_id,"sc_acc_details",0);                        
                            $credit = [
                                "dc"=> "C",
                                "cr_amount"=>$this->input->post(str_replace(' ', '_', trim($x))),
                                "ledger_id"=>$ledger_id,
                                "name"=>trim($x)                         
                            ];
                        
                        }else{
                            $credit = [
                                "dc"=> "C",
                                "cr_amount"=>$this->input->post(str_replace(' ', '_', trim($x))),
                                "ledger_id"=>$bill_head_ledger->ledger_id,
                                "name"=>trim($x)                         
                            ];
                        }
                        
                        array_push($main_array,$credit);
                    }
                    
            }       
            $array["sub_total"]=$sub_total; 

           
            $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member_id);
            $debit = [ "dc"=> "D", "dr_amount"=>$sub_total,"ledger_id"=>$flat_ledger_id  ];
            array_push($main_array,$debit);
            if($member_details["wing"]!='')
                $narration="Bill Generate of flat No. ".$member_details["flat_no"]."and wing ".$member_details["wing"];
            else
                $narration="Bill Generate of flat No. ".$member_details["flat_no"];

            $entry_id=$this->ledger->accounting_bill_double_entry_update($society_id,4,$last_bill["bill_date"],$narration,$main_array,$last_bill['bill_ledger_id']);
            
            if($entry_id=="1"){
                $due_amount=$sub_total+$last_bill['principal_arrears'];

                $bill_param=array("details"=>serialize($array),"bill_amount"=>$sub_total,"total_due"=>$due_amount);
                $this->Bill_detail_model->update_bill_detail($bill_id,$bill_param);               
                
                $this->Member_model->update_bpm_logs($member_id,array("amount"=>$sub_total+$last_bill['interest']));


                $this->Member_model->update_member_arrears($member_id,array("new_arrears"=>$due_amount));        
                //member interest not update//
                $this->Member_model->update_society_member_balance($member_id,array("new_balance"=>-$due_amount));           
                $bpm_txn_logs = array('debit' => $sub_total,'balance' => -$due_amount);
                $this->Member_model->update_bpm_txn_logs($member_id,$bpm_txn_logs);
                $message['text'] = "Bill update successfully!!";
                $message['status'] = "Success";                           
            }
            else{
                $message['text'] = "Bill update unsuccessfully!!";
                $message['status'] = "Fail";
            } 
        }elseif($last_bill['bill_ledger_id']!='' && $last_bill['bill_ledger_id']==0){
            $array=array();
            $main_array=[];     
            $member_details = $this->Member_model->get_member($member_id);          
            $sub_total=0;	
            foreach(unserialize($last_bill['details']) as $x => $val) {
                    if($x!="sub_total"){
                        $array[$x]=$this->input->post(str_replace(' ', '_', trim($x)));
                        $sub_total+=$this->input->post(str_replace(' ', '_', trim($x)));
                        $bill_head_ledger=$this->ledger->get_bill_details($society_id,0,trim($x));
                        $credit=[];
                        if(in_array(trim($x),array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){
                            $ledger_id=$this->ledger->get_ledger(trim($x),trim($x),$society_id,"sc_acc_details",0);                        
                            $credit = [
                                "dc"=> "C",
                                "cr_amount"=>$this->input->post(str_replace(' ', '_', trim($x))),
                                "ledger_id"=>$ledger_id,
                                "name"=>trim($x)                         
                            ];
                        
                        }else{
                            $credit = [
                                "dc"=> "C",
                                "cr_amount"=>$this->input->post(str_replace(' ', '_', trim($x))),
                                "ledger_id"=>$bill_head_ledger->ledger_id,
                                "name"=>trim($x)                         
                            ];
                        }
                        
                        array_push($main_array,$credit);
                    }
                    
            }       
            $array["sub_total"]=$sub_total;           
            $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member_id);
            $debit = [ "dc"=> "D", "dr_amount"=>$sub_total,"ledger_id"=>$flat_ledger_id ];
            array_push($main_array,$debit);
            if($member_details["wing"]!='')
                $narration="Bill Generate of flat No. ".$member_details["flat_no"]."and wing ".$member_details["wing"];
            else
                $narration="Bill Generate of flat No. ".$member_details["flat_no"];

            
            $bill_ledger_id=$this->ledger->accounting_bill_double_entry($society_id,4,date('Y-m-d'),$narration,$main_array,"sc_flat_bill_accounting",$member_id,$last_bill['bill_no']);   
            
            if($bill_ledger_id!="0"){

                $this->Bill_detail_model->update_bill_detail($bill_id,array("bill_ledger_id"=>$bill_ledger_id));

                $due_amount=$sub_total+$last_bill['principal_arrears'];

                $bill_param=array("details"=>serialize($array),"bill_amount"=>$sub_total,"total_due"=>$due_amount);
                $this->Bill_detail_model->update_bill_detail($bill_id,$bill_param);               
                
                $this->Member_model->update_bpm_logs($member_id,array("amount"=>$sub_total+$last_bill['interest']));

                $this->Member_model->update_member_arrears($member_id,array("new_arrears"=>$due_amount));        
                //member interest not update//
                $this->Member_model->update_society_member_balance($member_id,array("new_balance"=>-$due_amount));           
                $bpm_txn_logs = array('debit' => $sub_total,'balance' => -$due_amount);
                $this->Member_model->update_bpm_txn_logs($member_id,$bpm_txn_logs);
                $message['text'] = "Bill update successfully!!";
                $message['status'] = "Success";                           
            }
            else{
                $message['text'] = "Bill update unsuccessfully!!";
                $message['status'] = "Fail";
            } 
        } 
        else{
            $message['text'] = "Something went Wrong!!";
            $message['status'] = "Fail";
        }
       
        $this->session->set_flashdata('message', $message);		
        redirect("member/view/".$society_id."/".$member_id);	
       
       
    }
}
