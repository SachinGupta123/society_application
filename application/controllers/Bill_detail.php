<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Bill_detail extends CI_Controller
{
    function __construct()
    {
        parent::__construct();

        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            //redirect('auth/login', 'refresh');
        }
        $this->load->model('Bill_detail_model');
        $this->load->model('Society_model');
        $this->load->model('Member_model');
        $this->load->model('Bank_model');
        $this->load->model('Bank_transaction_model');
        $this->load->model('Parking_charge_model');
        $this->load->model('Payment_model');
        $this->load->model('Flat_type_model');
        $this->load->model('Billing_head_model');
    } 

    /*
     * Listing of bill_details
     */
    function index()
    {
        $data['bill_details'] = $this->Bill_detail_model->get_all_bill_details();
        
        $data['_view'] = 'bill_detail/index';
        $this->load->view('layouts/main',$data);
    }

    public function generate_bill_gst($society_id = '') {
      
        $bill_date = $this->input->post('bill_date');
        $society_id = $this->input->post('society_id');
        $due_date = $this->input->post('due_date');
        $bill_summary = $this->input->post('bill_summary'); 
        
        $bill_generate_type = $this->input->post('bill_generate_type');  //use this variable generate bill by csv or automatic 
        if(!empty($bill_date) && !empty($society_id) &&!empty($due_date) &&!empty($bill_generate_type) ) { 
            
            $bill_date=date("Y-m-d",strtotime($bill_date));
            $due_date=date("Y-m-d",strtotime($due_date));              
            $society_details = $this->Society_model->get_society($society_id);
            $members = $this->Member_model->get_all_members($society_id);
            
            if(!empty($members)){
                // if bill interest is calculated after n number of months on bill being unpaid
                // get number of relaxation months on bill payment
                // calculate due date as per n th month
                if($society_details['interest_on_bill_frequency'] == 1)
                {
                    $frequency = $society_details['interest_bill_frequency'];
                    $due_due = date('Y-m-d', strtotime($bill_date.'+'.$frequency.' months'));
                    $bill_due = date('Y-m-d', strtotime($due_due.'-1 days'));
                }
                // if bill interest is calculated every month on bill being unpaid
                // take selected due date on form as due date
                else
                {
                    // $bill_due = $this->input->post('due_date');
                    $bill_due = $due_date;//25-04-2022 sachhidanad
                }

               
                //checking current bill availabe in database
                $month = date('m',strtotime($bill_date));
                $year = date('Y',strtotime($bill_date));
                $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));            
                $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($society_id,$current_month);

                //get society  bank details
                $bank = $this->Bank_model->get_all_bank($society_id);           
                //get parking charge value
                $parking_charges = $this->Parking_charge_model->get_all_parking_charge($society_id);
                //get noc value
                $noc_charges = $this->Society_model->get_noc_charge($society_id);
                
                //get last bill number
                $bill_no = $this->Billing_head_model->get_last_bill_no($society_id);           
               
                $interest_type = $society_details['interest_type'];
                $interest_span = $society_details['interest_span'];
                if($interest_type=="Fixed Interest"){
                    $interest_rate = 0;
                }else{
                    $interest_rate = $society_details['interest_rate'];
                }

                $return=0;// use this variable for error finding   

                foreach($members as $member){
                    if(($bill_generate_type=="manual" &&  $check_bill != NULL) OR empty($bank) OR empty($parking_charges) OR empty($noc_charges) or empty($member['flat_type_id'])){
                   
                        if($bill_generate_type=="manual" &&  $check_bill != NULL)
                        {
                            $message['text'] = "Bill for this month is already generated.";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($bank))                        
                        {
                            $message['text'] = "Bank Not Found!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($parking_charges))
                        {
                            $message['text'] = "Parking Charges is Missing!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($noc_charges))
                        {
                            $message['text'] = "NOC Charges Not Found!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }                       

                        elseif(empty($member['flat_type_id']))
                        {  
                           
                            $message['text'] = "Flat Type is Not Assigned to all Flats!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                            
                        }
                      
                        else
                        {
                            $message['text'] = "Somethings a miss!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        
                    }
                }
                
                foreach($members as $member){
                    if(!empty($member['flat_type_id']))
                    {
                        $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                        if(empty($bill_headings)){
                            $message['text'] = "Bill head is missing!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        
                    }
                }
                
                if($bill_generate_type=="upload_csv"  && empty($_FILES['file']['tmp_name'] ))
                {
                    $message['text'] = "CSV file is missing!";
                    $message['status'] = "Fail";
                    $return=1;
                    
                }               

                if($return==0){               
                    //bill generate by two ways 
                    //1) csv 2)manual
                    if($bill_generate_type=="upload_csv"  && !empty($_FILES['file']['tmp_name'] )){
                       
                       
                        // Load CSV reader library
                        $this->load->library('CSVReader');
                        // Parse data from CSV file
                        $csvData = $this->csvreader->parse_csv($_FILES['file']['tmp_name']);                  
                        $split_csv_Data=array_chunk($csvData,50);
                        foreach($split_csv_Data as $x => $val)					
                        {
                            foreach ($val as $row){                            
                                $member=$this->Member_model->get_member_by_wingflat($row["member-wing"],$row["member-flat_no"],$society_id); 
                                
                                if(isset($member[0]) && !empty($member[0])){
                                    $bill_no++;
                                    //get  bill head details by assgin to member 
                                    $bill_headings = $this->Billing_head_model->get_all_billing_heads($member[0]['flat_type_id']);
                
                                    $bill_head_calc = calc_bill_heads($bill_headings,$member[0]['flat_area'],$member[0]['id']);
                                    
                                    $bill_head_calc['Parking Charges'] = calc_parking_charges($member[0],$parking_charges);
                                    if($member[0]['tenant'] == 1){
                                        $bill_head_calc['NOC Charges'] = calc_noc_charges($noc_charges,$member['flat_area']);
                                    } else {
                                        $bill_head_calc['NOC Charges'] = 0;
                                    }
                                    $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                                                
                                    $is_paid = 0;
                                    $bill_status = '';
                                
                                    $de = 1;
                                    $interestable_amount = 0;
                                
                                    $principal_for_arrears = 0;
                    
                                    $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member[0]['id']);
                                    if(!empty($last_month_bill)){
                                        $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                                    }else{
                                        
                                        $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                                    
                                    }
                            
                            
                                    $last_payment = $this->Payment_model->get_last_payment_details($member[0]['id']);
                                    if(!empty($last_payment)){
                                        $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                                    }else{
                                        $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                                    }
                                
                                
                                    $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member[0]['id']);
                            
                                    // if bill interest is calculated after n number of months on bill being unpaid
                                    // get number of relaxation months on bill payment
                                    // take principal arear as bill_amount of n th month
                                    if($society_details['interest_on_bill_frequency'] == 1)
                                    {
                                    
                                        $frequency = $society_details['interest_bill_frequency'];
                                        
                                        $principal_arrears = $this->Bill_detail_model->get_that_bill($member[0]['id'],$member[0]['society_id'],$bill_date,$frequency);
                                    }
                                    else
                                    {
                                    
                                        $principal_arrears = $this->Member_model->get_member_current_arrears($member[0]['id']);
                                    }
                                
                                    $interest_arrears = $this->Member_model->get_member_current_intrest_arrears($member[0]['id']);
                    
                                    $current_bal = $this->Member_model->get_member_current_balance($member[0]['id']);
                    
                                    $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );
                
                                    $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                                    
                                    if($interest_span == 'Daily'){
                                        $de = (strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24);
                                        $de = $de > 0 ? $de : 0;
                                    } else {
                                        $de = 1;
                                    }
                                    
                                    $interestable_amount =($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears;
                    
                                    //$interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
                                    
                
                                    // if bill interest is calculated after n number of months on bill being unpaid
                                    // take principal arrear as current valance
                                    if($society_details['interest_on_bill_frequency'] == 1)
                                    {
                                        
                                        $principal_arrears = $this->Member_model->get_member_current_arrears($member[0]['id']);
                                        $interestable_amount = $principal_arrears;
                                    }
                                    $interest=0;//define variable for interest

                                    if(!empty($late_payment) || $late_payment != NULL){
                                        $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member[0]['id']);
                                        if($interest_type=="Fixed Interest"){
                                            if($interestable_amount>0){
                                                $interest = $this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$principal_for_arrears,$de);
                                            }
                                        }else{
                                            $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de);
                                        }
                                       
                                    }else{
                                        //get current interest   
                                        if($interest_type=="Fixed Interest" ){
                                            if($interestable_amount>0){
                                                $interest = $interest+$this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$interestable_amount,$de);
                                            }
                                        }else{
                                            $interest = $interest+$this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
            
                                        }
                                    }
                                    $soft_total = round($bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest);
                                
                                    // if($society_details['is_gst'] == 1){
                                    //     $taxes = $this->calcGST($soft_total);
                                    //     $taxAmount =$taxes['payableGST'];
                                    //     $taxSlab = $taxes['GST'];
                                    //     $soft_total = $taxes['taxAmount'];
                                    // }else{
                                    //     $taxAmount = 0;
                                    //     $taxSlab = 0;  
                                    // }

                                    if($row["tax_amount"]!=''){
                                        $taxAmount = $row["tax_amount"];
                                    }else{
                                        $taxAmount=0;
                                    }
                
                                   
                                    $taxSlab = "GST";
                                    $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;

                                    $total_due=$total_due+ $taxAmount;
                
                                    $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                
                                    $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');   
                                    
                                    //add this function for when member pay advance payment and member arrears table no entry availbe check
                               
                                    $principal_arrears_available = $this->Member_model->exit_member_current_arrears($member[0]['id']);
                                    
                                    if($interestable_amount=="0.00" &&  $principal_arrears_available==0){
                                        $interestable_amount=$member[0]['principal_arrears'];
                                    }                                    
                                    
                                    $bill_array = array(
                                        'member_id' => $member[0]['id'],
                                        'society_id' => $society_id,
                                        'bill_date' => $bill_date,
                                        'due_date' => $bill_due,
                                        'bill_month' => $current_month,
                                        'details' => serialize($bill_head_calc),
                                        'principal_arrears' => $interestable_amount,
                                        'interest_arrears' => $interest_arrears,
                                        'interest' => $interest,
                                        'tax_amount' => $taxAmount,
                                        'tax_slab' => $taxSlab,
                                        'bill_amount' => $bill_head_calc['sub_total'],
                                        'total_due' => $total_due,
                                        'bill_summary' => $bill_summary,
                                        'paid' => $is_paid,
                                        'bill_status' => $bill_status,
                                        'bill_no' => $bill_no
                                    );
                
                                    
                                    $new_arrears = ($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0;
                                   
                                    //if($this->db->insert('bill_details',$bill_array)):
                                    $this->db->trans_start(); 
                                    $this->db->trans_strict(FALSE); 
                                    $bill_details_insert_id=$this->Bill_detail_model->add_bill_detail($bill_array);            
                            
                                    if($bill_details_insert_id!=0):
                                
                                        /*Add society member bill payment logs*/
                                        $bpm_logs = array(
                                            'entity_id' => $bill_no,
                                            'member_id' => $member[0]['id'],
                                            'amount' => $bill_head_calc['sub_total'] + $interest,
                                            'type' => 'BILL',
                                            'dnt' => time(),
                                        );
                
                                        $this->Member_model->insert_bpm_logs($bpm_logs);
                    
                                        $this->Member_model->insert_member_arrears($member[0]['id'],$new_arrears);
                                        $this->Member_model->insert_member_interest_arrears($member[0]['id'],$interest_arrears + $interest);
                                        $this->Member_model->insert_member_balance($member[0]['id'],-$total_due);
                    
                                        /*Add society member bill payment transaction logs*/
                                        $bpm_txn_logs = array(
                                            'entity_id' => $bill_no,
                                            'narration' => 'BILLDUE',
                                            'credit' => '',
                                            'debit' => $bill_head_calc['sub_total'] + $interest,
                                            'balance' => -$total_due,
                                            'dnt' => time(),
                                            'member_id' => $member[0]['id'],
                                        );
                    
                                        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                        
                                        //checking society accounting details present or not-03-03-2022
                                        $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                                        if(!empty($accounting_db_details)){
                                            $main_array=[]; 
                                            $flat_ledger_amount=0;                 
                                            foreach($bill_head_calc as $k=>$v){
                                                if($k!="sub_total"){                            
                                                    if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){ 
                                                        $ledger_id=$this->ledger->get_ledger($k,$k,$society_id,"sc_acc_details");                                    
                                                    }
                                                    else {
                                                        $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                                                    
                                                    }
                                                    $credit = [
                                                        "dc"=> "C",
                                                        "cr_amount"=>$v,
                                                        "ledger_id"=>$ledger_id                           
                                                    ];
                                                    $flat_ledger_amount=$flat_ledger_amount+$v;
                                                    array_push($main_array,$credit);
                                                }
                                            
                                            }
                                            if($taxAmount>0){
                                                $ledger_id=$this->ledger->get_ledger("Tax","Tax",$society_id,"sc_acc_details");  
                                                $credit = [
                                                    "dc"=> "C",
                                                    "cr_amount"=>$taxAmount,
                                                    "ledger_id"=>$ledger_id
                                                ];
                                                $flat_ledger_amount=$flat_ledger_amount+$taxAmount;
                                                array_push($main_array,$credit);
                
                                            }
                                        
                                            if($interest>0){
                                                $ledger_id=$this->ledger->get_ledger("Interest","Interest",$society_id,"sc_acc_details");  
                                                $flat_ledger_amount=$flat_ledger_amount+$interest;
                                                $credit = [
                                                    "dc"=> "C",
                                                    "cr_amount"=>$interest,
                                                    "ledger_id"=>$ledger_id
                                                ];
                                                array_push($main_array,$credit);
                
                                            }
                
                                            $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member[0]['id']);
                                            $debit = [
                                                "dc"=> "D",
                                                "dr_amount"=> $flat_ledger_amount,
                                                "ledger_id"=>$flat_ledger_id                          
                                            ];
                                            
                                            array_push($main_array,$debit); 
                
                                            $narration="Bill Generate of flat No. ".$member[0]["flat_no"]."and wing ".$member[0]["wing"];
                
                                            $bill_ledger_id=$this->ledger->accounting_bill_double_entry($society_id,4, $bill_date,$narration,$main_array,"sc_flat_bill_accounting",$member[0]['id'],$bill_no);
                                            if($bill_ledger_id!="0" || $bill_ledger_id!=0 ){
                                                $this->Bill_detail_model->update_bill_detail($bill_details_insert_id,array("bill_ledger_id"=>$bill_ledger_id));
                                                $this->db->trans_complete();
                                            }                                            
                                        }
                                        
                                        $notification_data = array(
                                            'flat_id'=>$member[0]['id'],
                                            'society_id'=>$society_id,
                                            'title'=>'Bill Generated',
                                            'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                                            'created_by'=>$this->session->userdata('user_id'),
                                            'screen'=>'BILL_VIEW'
                                        );
                                        $notification = notify($notification_data);
                                        $message['text'] = "Bill Generated successfully!!";
                                        $message['status'] = "Success";
                                        $this->session->set_flashdata('message', $message);
                    
                                    endif;
                
                                    if ($this->db->trans_status() === FALSE) {
                                        # Something went wrong.
                                        $this->db->trans_rollback();
                                       
                                    } 
                                    else {
                                        # Everything is Perfect. 
                                        # Committing data to the database.
                                        $this->db->trans_commit();
                                        
                                    }
                
                                } 
                                //end if checking member empty or not
                            }
                
                            sleep(5);// this should halt for 5 seconds for every loop
                        } 
                    }else{
                        // $path = FCPATH.'/logs/bill_generate_'.$bill_date.".log";
                        // $file_data="add compound interest";
                        foreach ($members as $member) {
                            
                            $today = date('Y-m-d');
                            // if (!file_exists(FCPATH.'/logs/'.$today)) {
                            //     mkdir(FCPATH.'/logs/'.$today, 0777, true);
                            // }
                            // $path = FCPATH.'/logs/'.$member['id'].'_'. $bill_date.".log";

                            // $file_data .= "Member ID : ".$member['id']."\n";

                            $taxAmount = 0;
                            $taxSlab = 0;

                            $bill_no++;
                            $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                            
                            $bill_head_calc = calc_bill_heads($bill_headings,$member['flat_area'],$member['id']);
                           
                            if($bill_head_calc["Tax"]>0){
                                $taxAmount =$taxAmount+ $bill_head_calc["Tax"];
                                $taxSlab = 18; 
                            }

                            $bill_head_calc['Parking Charges'] = calc_parking_charges($member,$parking_charges);
                            if($member['tenant'] == 1){
                                $bill_head_calc['NOC Charges'] = calc_noc_charges($noc_charges,$member['flat_area']);
                            } else {
                                $bill_head_calc['NOC Charges'] = 0;
                            }
                            $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                                        
                            $is_paid = 0;
                            $bill_status = '';
                        
                            $de = 1;
                            $interestable_amount = 0;
                        
                            $principal_for_arrears = 0;

                            // $file_data .= "Setting Basic Variable\n";
                            // $file_data .= "Calculating Values Before Bill Generation\n";
                            // $file_data .= "Bill Head Details : ".json_encode($bill_head_calc)."\n"; 

                
                            $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member['id']);
                
                           
                            if(!empty($last_month_bill)){
                                $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                            }else{
                                
                                $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                            
                            }
                        
                        
                            $last_payment = $this->Payment_model->get_last_payment_details($member['id']);
                            if(!empty($last_payment)){
                                $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                            }else{
                                $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                            }
                            
                            
                            $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member['id']);

                            // $file_data .= "Data for late payment check model\n";
                            // $file_data .= "Last Due Date : ".$last_due_date."\n";
                            // $file_data .= "Current Bill Date : ".$bill_date."\n";
                            // $file_data .= "Late Payment Entry : ".json_encode($late_payment)."\n";

                        
                            // if bill interest is calculated after n number of months on bill being unpaid
                            // get number of relaxation months on bill payment
                            // take principal arear as bill_amount of n th month
                            if($society_details['interest_on_bill_frequency'] == 1)
                            {
                                
                                $frequency = $society_details['interest_bill_frequency'];
                                $principal_arrears = $this->Bill_detail_model->get_that_bill($member['id'],$member['society_id'],$bill_date,$frequency);
                            }
                            else
                            {                               
                                $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                            }
                            
                            $interest_arrears = $this->Member_model->get_member_current_intrest_arrears($member['id']);
                
                            $current_bal = $this->Member_model->get_member_current_balance($member['id']);
                
                            $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );
                
                            $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                            
                            if($interest_span == 'Daily'){
                                $de = (strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24);
                                $de = $de > 0 ? $de : 0;
                            } else {
                                $de = 1;
                            }

                            // $file_data .= "checking Compound Interest here thern value of interestable_amount : ".$interestable_amount."\n";
                            
                            $interestable_amount =($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears;
                
                           
                           
                            // if bill interest is calculated after n number of months on bill being unpaid
                            // take principal arrear as current valance
                            if($society_details['interest_on_bill_frequency'] == 1)
                            {
                                $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                            }
                
                            if($society_details['interest_on_bill_frequency'] == 1)
                            {
                                $interestable_amount = $principal_arrears;
                            }

                            // $file_data .= "Last Princpal Arrears : ".$principal_arrears."\n";
                            // $file_data .= "Last Interest Arrears : ".$interest_arrears."\n";
                            // $file_data .= "Current Balance : ".$current_bal."\n";
                            // $file_data .= "Last Bill Due : ".$ld."\n";
                            // $file_data .= "Days Elapsed : ".$de."\n";
                            // $file_data .= "Interestable Amount : ".$interestable_amount."\n";
                           

                           
                            //declare one variable for one time fixed amount add so second time not added -sachhidanand Gupta                          
                            //use this condition for fixed interest amount add  when last month bill  partial paid and in between due_date
                            // $fixed_intererest_taken=0;
                            $interest=0;
                
                            // if($interestable_amount>0 &&($last_month_bill[0]['bill_status']=="Partially Paid"|| $last_month_bill[0]['bill_status']=="Unpaid") && $interest_type=="Fixed Interest"){
                            //     // $interest=$interest+$society_details['fixed_interest'];
                            //     $fixed_intererest_taken=1;
                            // }
                            
                            //this use late payment interest
                           
                            if((!empty($late_payment) || $late_payment != NULL )){
                                 $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member['id']);
                                 if($interest_type=="Fixed Interest"){
                                    // &&  $fixed_intererest_taken==1
                                    if($interestable_amount>0){
                                        $interest = $this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$principal_for_arrears,$de);
                                    }
                                    
                                 }else{                                   
                                    $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de);
                                 } 
                            }else{
                                
                                //get current interest   
                                if($interest_type=="Fixed Interest" ){
                                    //&&  $fixed_intererest_taken==1
                                   
                                    if($interestable_amount>0){
                                        $interest = $interest+$this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$interestable_amount,$de);
                                    }
                                         
                                     
                                }else{                          
                                    // $file_data .= "compound interest calculation data: \n";

                                    // $file_data .= "interest_type : ".$interest_type."\n";
                                    // $file_data .= "interest_span : ".$interest_span."\n";

                                    // $file_data .= "interest_rate : ".$interest_rate."\n";

                                    // $file_data .= "interestable_amount : ".$interestable_amount."\n";

                                    // $file_data .= "de : ".$de."\n";

                                    $interest = $interest+$this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
                                    
                                    // $file_data .= "Compound interest total value : ".$interest."\n";
                                }
                                
                            }

                            // $file_data .= "Current Month Interest: ".$interest."\n";
                           
                           
                            $soft_total = round($bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest);
                        
                            // if($society_details['is_gst'] == 1){
                            //     $taxes = $this->calcGST($soft_total);
                            //     $taxAmount =$taxes['payableGST'];
                            //     $taxSlab = $taxes['GST'];
                            //     $soft_total = $taxes['taxAmount'];
                                
                            // }else{
                            //     $taxAmount = 0;
                            //     $taxSlab = 0;  
                            // }
                
                        
                            $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;

                            // if($society_details['is_gst'] == 1){
                               
                            //     // $taxes =$this->calcGST($soft_total);//as discuss jignesh and harsh gst calculation on bill head
                            //     $taxes =$this->calcGST( $total_due);
                            //     $taxAmount =$taxes['payableGST'];
                            //     $taxSlab = $taxes['GST'];
                                
                            // }else{
                            //     $taxAmount = 0;
                            //     $taxSlab = 0;  
                            // }  

                            $total_due=$total_due+$taxAmount;
                            
                            $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                            $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');  

                            //add this function for when member pay advance payment and member arrears table no entry availbe check
                               
                            $principal_arrears_available = $this->Member_model->exit_member_current_arrears($member['id']);
                                    
                            // if($interestable_amount=="0.00" &&  $principal_arrears_available==0){
                            //     $interestable_amount=$member[0]['principal_arrears'];
                            // }    
                            
                           
                            $bill_array = array(
                                'member_id' => $member['id'],
                                'society_id' => $society_id,
                                'bill_date' => $bill_date,
                                'due_date' => $bill_due,
                                'bill_month' => $current_month,
                                'details' => serialize($bill_head_calc),
                                'principal_arrears' => ($principal_arrears_available==0 &&$interestable_amount=="0.00" )? $member['principal_arrears']:$interestable_amount,
                                'interest_arrears' => $interest_arrears,
                                'late_payment_charges' => 0,
                                'interest' => $interest,
                                'tax_amount' => $taxAmount,
                                'tax_slab' => $taxSlab,
                                'bill_amount' => $bill_head_calc['sub_total'],
                                'total_due' => $total_due,
                                'bill_summary' => $bill_summary,
                                'paid' => $is_paid,
                                'bill_status' => $bill_status,
                                'bill_no' => $bill_no
                            );                 
                        
                            // print_r($bill_array);die;
                            
                            $new_arrears = ($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0; 

                            // $file_data .= "New Principal Arrears : ".$new_arrears."\n";
                            // $file_data .= "New Interest Arrears : ".$interest_arrears + $interest."\n";
                            // $file_data .= "New Member Balance : ".-$total_due."\n";
                            


                          
                            //if($this->db->insert('bill_details',$bill_array)):
                            $this->db->trans_start(); # Starting Transaction
                            $this->db->trans_strict(FALSE);
                            $bill_details_insert_id=$this->Bill_detail_model->add_bill_detail($bill_array);
                
                          
                            if($bill_details_insert_id!=0):
                        
                                /*Add society member bill payment logs*/
                                $bpm_logs = array(
                                    'entity_id' => $bill_no,
                                    'member_id' => $member['id'],
                                    'amount' => $bill_head_calc['sub_total'] + $interest,
                                    'type' => 'BILL',
                                    'dnt' => time(),
                                );
                
                                $this->Member_model->insert_bpm_logs($bpm_logs);
                
                                $this->Member_model->insert_member_arrears($member['id'],$new_arrears);
                                $this->Member_model->insert_member_interest_arrears($member['id'],$interest_arrears + $interest);
                                $this->Member_model->insert_member_balance($member['id'],-$total_due);
                
                                /*Add society member bill payment transaction logs*/
                                $bpm_txn_logs = array(
                                    'entity_id' => $bill_no,
                                    'narration' => 'BILLDUE',
                                    'credit' => '',
                                    'debit' => $bill_head_calc['sub_total'] + $interest,
                                    'balance' => -$total_due,
                                    'dnt' => time(),
                                    'member_id' => $member['id'],
                                );
                
                                $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                
                                //checking society accounting details present or not-03-03-2022
                                $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                                if(!empty($accounting_db_details)){
                                    $main_array=[];   
                                    $flat_ledger_amount=0;                  
                                    foreach($bill_head_calc as $k=>$v){
                                        if($k!="sub_total"){                            
                                            if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){ 
                                                $ledger_id=$this->ledger->get_ledger($k,$k,$society_id,"sc_acc_details");                                    
                                            }
                                            else if($k=="Tax"){
                                                $ledger_id=$this->ledger->get_ledger("Tax","Tax",$society_id,"sc_acc_details");  
   
                                            }
                                            else {
                                                $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                                            
                                            }
                                            $credit = [
                                                "dc"=> "C",
                                                "cr_amount"=>$v,
                                                "ledger_id"=>$ledger_id                           
                                            ];
                                    $flat_ledger_amount= $flat_ledger_amount+$v;                  
                
                                            array_push($main_array,$credit);
                                        }
                                    
                                    }
                                    // if($taxAmount>0){
                                    //     $ledger_id=$this->ledger->get_ledger("Tax","Tax",$society_id,"sc_acc_details");  
                                    //     $credit = [
                                    //         "dc"=> "C",
                                    //         "cr_amount"=>$taxAmount,
                                    //         "ledger_id"=>$ledger_id                           
                                    //     ];
                                    //     $flat_ledger_amount= $flat_ledger_amount+$taxAmount; 
                                    //     array_push($main_array,$credit);
                
                                    // }
                                  
                                    if($interest>0){
                                        $ledger_id=$this->ledger->get_ledger("Interest","Interest",$society_id,"sc_acc_details");  
                                       
                                        $credit = [
                                            "dc"=> "C",
                                            "cr_amount"=>$interest,
                                            "ledger_id"=>$ledger_id                           
                                        ];
                                        $flat_ledger_amount= $flat_ledger_amount+$interest;
                                        array_push($main_array,$credit);
                
                                    }                                   
                                    
                
                                    $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member['id']);
                                    $debit = [
                                        "dc"=> "D",
                                        "dr_amount"=>abs($flat_ledger_amount),
                                        "ledger_id"=>$flat_ledger_id                          
                                    ];                                    
                                    array_push($main_array,$debit);
                                    $narration="Bill Generate of flat No. ".$member["flat_no"]."and wing ".$member["wing"];
                                    $bill_ledger_id=$this->ledger->accounting_bill_double_entry($society_id,4,$bill_date,$narration,$main_array,"sc_flat_bill_accounting",$member['id'],$bill_no);
                
                                    if($bill_ledger_id!=0 ||$bill_ledger_id!="0"){
                                        $this->Bill_detail_model->update_bill_detail($bill_details_insert_id,array("bill_ledger_id"=>$bill_ledger_id));
                                        $this->db->trans_complete(); # Completing transaction
                                    }
                
                                        
                                }
                                
                                $notification_data = array(
                                    'flat_id'=>$member['id'],
                                    'society_id'=>$society_id,
                                    'title'=>'Bill Generated',
                                    'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                                    'created_by'=>$this->session->userdata('user_id'),
                                    'screen'=>'BILL_VIEW'
                                );
                                $notification = notify($notification_data);
                                $message['text'] = "Bill Generated successfully!!";
                                $message['status'] = "Success";
                                $this->session->set_flashdata('message', $message);

                                //  $file_data .= "Inserting data in Database\n";
                                // $file_data .= "----------------------------------------------------------------------------------------------------------------------------------------------\n\n";
                              
                               
                
                            endif;
                
                            if ($this->db->trans_status() === FALSE) {
                                # Something went wrong.
                                $this->db->trans_rollback();
                                
                            } 
                            else {
                                # Everything is Perfect. 
                                # Committing data to the database.
                                $this->db->trans_commit();
                               
                            }
                        }

                        // $responseLog = fopen($path, "w") or die("Unable to create File");
                        // $log= print_r($file_data,TRUE);
                        // fwrite($responseLog, $file_data);
                        // fclose($responseLog);

                        $message['text'] = "Bill Generated successfully!!";
                        $message['status'] = "Success";
                    }                    
                    
                }
            }else{
                $message['text'] = "First Create flat!!";
                $message['status'] = "Fail";
            }            
            
            $this->session->set_flashdata('message', $message);
            echo json_encode($message) ;
           
        }else{
            $message['text'] = "Please select all field!!";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
            echo json_encode($message) ;
        }
    }

    public function generate_bill($society_id = '') {
      
        $bill_date = $this->input->post('bill_date');
        $society_id = $this->input->post('society_id');
        $due_date = $this->input->post('due_date');
        $bill_summary = $this->input->post('bill_summary'); 
        
        $bill_generate_type = $this->input->post('bill_generate_type');  //use this variable generate bill by csv or automatic 
        if(!empty($bill_date) && !empty($society_id) &&!empty($due_date) &&!empty($bill_generate_type) ) { 
            $this->load->library('CSVReader');
            $bill_date=date("Y-m-d",strtotime($bill_date));
            $due_date=date("Y-m-d",strtotime($due_date));              
            $society_details = $this->Society_model->get_society($society_id);
            $members = $this->Member_model->get_all_members($society_id);
            
            if(!empty($members)){
                // if bill interest is calculated after n number of months on bill being unpaid
                // get number of relaxation months on bill payment
                // calculate due date as per n th month
                if($society_details['interest_on_bill_frequency'] == 1)
                {
                    $frequency = $society_details['interest_bill_frequency'];
                    $due_due = date('Y-m-d', strtotime($bill_date.'+'.$frequency.' months'));
                    $bill_due = date('Y-m-d', strtotime($due_due.'-1 days'));
                }
                // if bill interest is calculated every month on bill being unpaid
                // take selected due date on form as due date
                else
                {
                    // $bill_due = $this->input->post('due_date');
                    $bill_due = $due_date;//25-04-2022 sachhidanad
                }

                //checking current bill availabe in database
                $month = date('m',strtotime($bill_date));
                $year = date('Y',strtotime($bill_date));
                $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));            
                $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($society_id,$current_month);

                //get society  bank details
                $bank = $this->Bank_model->get_all_bank($society_id);           
                //get parking charge value
                $parking_charges = $this->Parking_charge_model->get_all_parking_charge($society_id);
                //get noc value
                $noc_charges = $this->Society_model->get_noc_charge($society_id);
                
                //get last bill number
                $bill_no = $this->Billing_head_model->get_last_bill_no($society_id);           
               
                $interest_type = $society_details['interest_type'];
                $interest_span = $society_details['interest_span'];
                if($interest_type=="Fixed Interest"){
                    $interest_rate = 0;
                }else{
                    $interest_rate = $society_details['interest_rate'];
                }

                $return=0;// use this variable for error finding   

                foreach($members as $member){
                    if(($bill_generate_type=="manual" &&  $check_bill != NULL) OR empty($bank) OR empty($parking_charges) OR empty($noc_charges) or empty($member['flat_type_id'])){
                   
                        if($bill_generate_type=="manual" &&  $check_bill != NULL)
                        {
                            $message['text'] = "Bill for this month is already generated.";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($bank))                        
                        {
                            $message['text'] = "Bank Not Found!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($parking_charges))
                        {
                            $message['text'] = "Parking Charges is Missing!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($noc_charges))
                        {
                            $message['text'] = "NOC Charges Not Found!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }                       

                        elseif(empty($member['flat_type_id']))
                        {  
                           
                            $message['text'] = "Flat Type is Not Assigned to all Flats!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                            
                        }
                      
                        else
                        {
                            $message['text'] = "Somethings a miss!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        
                    }
                }
                
                foreach($members as $member){
                    if(!empty($member['flat_type_id']))
                    {
                        $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                        if(empty($bill_headings)){
                            $message['text'] = "Bill head is missing!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        
                    }
                }
                
                if($bill_generate_type=="upload_csv"  && empty($_FILES['file']['tmp_name'] ))
                {
                    $message['text'] = "CSV file is missing!";
                    $message['status'] = "Fail";
                    $return=1;
                    
                }
                
                if($bill_generate_type=="upload_csv" && !empty($_FILES['file']['tmp_name']))
                {
                    $gst_apply=0;
                    $csvData = $this->csvreader->parse_csv($_FILES['file']['tmp_name']);                  
                    $split_csv_Data=array_chunk($csvData,50);
                    foreach($split_csv_Data as $x => $val)					
                    {
                        foreach ($val as $row){
                            if($society_details['is_gst']!=1 &&  $row["tax_amount"]>0){
                                $gst_apply=1;
                            }
                        }
                      
                    }

                    if($gst_apply==1){
                        $message['text'] = "Please Select IS GST applicable!";
                        $message['status'] = "Fail";
                        $return=1;
                    }                 
                    
                }  

                if($return==0){ 
                      
                    //bill generate by two ways 
                    //1) csv 2)manual
                    if($bill_generate_type=="upload_csv"  && !empty($_FILES['file']['tmp_name'] )){
                       
                       
                        // Load CSV reader library
                      
                        // Parse data from CSV file
                        $csvData = $this->csvreader->parse_csv($_FILES['file']['tmp_name']);                  
                        $split_csv_Data=array_chunk($csvData,50);
                        foreach($split_csv_Data as $x => $val)					
                        {
                            foreach ($val as $row){                            
                                $member=$this->Member_model->get_member_by_wingflat($row["member-wing"],$row["member-flat_no"],$society_id); 
                                
                                if(isset($member[0]) && !empty($member[0])){
                                    $bill_no++;
                                    //get  bill head details by assgin to member 
                                    $bill_headings = $this->Billing_head_model->get_all_billing_heads($member[0]['flat_type_id']);
                
                                    $bill_head_calc = calc_bill_heads($bill_headings,$member[0]['flat_area'],$member[0]['id']);
                                    
                                    $bill_head_calc['Parking Charges'] = calc_parking_charges($member[0],$parking_charges);
                                    if($member[0]['tenant'] == 1){
                                        $bill_head_calc['NOC Charges'] = calc_noc_charges($noc_charges,$member['flat_area']);
                                    } else {
                                        $bill_head_calc['NOC Charges'] = 0;
                                    }
                                    $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                                                
                                    $is_paid = 0;
                                    $bill_status = '';
                                
                                    $de = 1;
                                    $interestable_amount = 0;
                                
                                    $principal_for_arrears = 0;
                    
                                    $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member[0]['id']);
                                    if(!empty($last_month_bill)){
                                        $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                                    }else{
                                        
                                        $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                                    
                                    }
                            
                            
                                    $last_payment = $this->Payment_model->get_last_payment_details($member[0]['id']);
                                    if(!empty($last_payment)){
                                        $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                                    }else{
                                        $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                                    }
                                
                                
                                    $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member[0]['id']);
                            
                                    // if bill interest is calculated after n number of months on bill being unpaid
                                    // get number of relaxation months on bill payment
                                    // take principal arear as bill_amount of n th month
                                    if($society_details['interest_on_bill_frequency'] == 1)
                                    {
                                    
                                        $frequency = $society_details['interest_bill_frequency'];
                                        
                                        $principal_arrears = $this->Bill_detail_model->get_that_bill($member[0]['id'],$member[0]['society_id'],$bill_date,$frequency);
                                    }
                                    else
                                    {
                                    
                                        $principal_arrears = $this->Member_model->get_member_current_arrears($member[0]['id']);
                                    }
                                
                                    $interest_arrears = $this->Member_model->get_member_current_intrest_arrears($member[0]['id']);
                    
                                    $current_bal = $this->Member_model->get_member_current_balance($member[0]['id']);
                    
                                    $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );
                
                                    $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                                    
                                    if($interest_span == 'Daily'){
                                        $de = (strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24);
                                        $de = $de > 0 ? $de : 0;
                                    } else {
                                        $de = 1;
                                    }
                                    
                                    $interestable_amount =($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears;
                    
                                    //$interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
                                    
                
                                    // if bill interest is calculated after n number of months on bill being unpaid
                                    // take principal arrear as current valance
                                    if($society_details['interest_on_bill_frequency'] == 1)
                                    {
                                        
                                        $principal_arrears = $this->Member_model->get_member_current_arrears($member[0]['id']);
                                        $interestable_amount = $principal_arrears;
                                    }
                                    $interest=0;//define variable for interest

                                    if(!empty($late_payment) || $late_payment != NULL){
                                        $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member[0]['id']);
                                        if($interest_type=="Fixed Interest"){
                                            if($interestable_amount>0){
                                                $interest = $this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$principal_for_arrears,$de);
                                            }
                                        }else{
                                            $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de);
                                        }
                                       
                                    }else{
                                        //get current interest   
                                        if($interest_type=="Fixed Interest" ){
                                            if($interestable_amount>0){
                                                $interest = $interest+$this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$interestable_amount,$de);
                                            }
                                        }else{
                                            $interest = $interest+$this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
            
                                        }
                                    }
                                    $soft_total = round($bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest);
                                
                                    // if($society_details['is_gst'] == 1){
                                    //     $taxes = $this->calcGST($soft_total);
                                    //     $taxAmount =$taxes['payableGST'];
                                    //     $taxSlab = $taxes['GST'];
                                    //     $soft_total = $taxes['taxAmount'];
                                    // }else{
                                    //     $taxAmount = 0;
                                    //     $taxSlab = 0;  
                                    // }

                                    if($row["tax_amount"]!=''){
                                        $taxAmount = $row["tax_amount"];
                                    }else{
                                        $taxAmount=0;
                                    }
                
                                   
                                    $taxSlab = "GST";
                                    $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;

                                    $total_due=$total_due+ $taxAmount;
                
                                    $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                
                                    $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');   
                                    
                                    //add this function for when member pay advance payment and member arrears table no entry availbe check
                               
                                    $principal_arrears_available = $this->Member_model->exit_member_current_arrears($member[0]['id']);
                                    
                                    if($interestable_amount=="0.00" &&  $principal_arrears_available==0){
                                        $interestable_amount=$member[0]['principal_arrears'];
                                    }                                    
                                    
                                    $bill_array = array(
                                        'member_id' => $member[0]['id'],
                                        'society_id' => $society_id,
                                        'bill_date' => $bill_date,
                                        'due_date' => $bill_due,
                                        'bill_month' => $current_month,
                                        'details' => serialize($bill_head_calc),
                                        'principal_arrears' => $interestable_amount,
                                        'interest_arrears' => $interest_arrears,
                                        'interest' => $interest,
                                        'tax_amount' => $taxAmount,
                                        'tax_slab' => $taxSlab,
                                        'bill_amount' => $bill_head_calc['sub_total'],
                                        'total_due' => $total_due,
                                        'bill_summary' => $bill_summary,
                                        'paid' => $is_paid,
                                        'bill_status' => $bill_status,
                                        'bill_no' => $bill_no
                                    );
                
                                    
                                    $new_arrears = ($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0;
                                   
                                    //if($this->db->insert('bill_details',$bill_array)):
                                    $this->db->trans_start(); 
                                    $this->db->trans_strict(FALSE); 
                                    $bill_details_insert_id=$this->Bill_detail_model->add_bill_detail($bill_array);            
                            
                                    if($bill_details_insert_id!=0):
                                
                                        /*Add society member bill payment logs*/
                                        $bpm_logs = array(
                                            'entity_id' => $bill_no,
                                            'member_id' => $member[0]['id'],
                                            'amount' => $bill_head_calc['sub_total'] + $interest,
                                            'type' => 'BILL',
                                            'dnt' => time(),
                                        );
                
                                        $this->Member_model->insert_bpm_logs($bpm_logs);
                    
                                        $this->Member_model->insert_member_arrears($member[0]['id'],$new_arrears);
                                        $this->Member_model->insert_member_interest_arrears($member[0]['id'],$interest_arrears + $interest);
                                        $this->Member_model->insert_member_balance($member[0]['id'],-$total_due);
                    
                                        /*Add society member bill payment transaction logs*/
                                        $bpm_txn_logs = array(
                                            'entity_id' => $bill_no,
                                            'narration' => 'BILLDUE',
                                            'credit' => '',
                                            'debit' => $bill_head_calc['sub_total'] + $interest,
                                            'balance' => -$total_due,
                                            'dnt' => time(),
                                            'member_id' => $member[0]['id'],
                                        );
                    
                                        $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                        
                                        //checking society accounting details present or not-03-03-2022
                                        $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                                        if(!empty($accounting_db_details)){
                                            $main_array=[]; 
                                            $flat_ledger_amount=0;                 
                                            foreach($bill_head_calc as $k=>$v){
                                                if($k!="sub_total"){                            
                                                    if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){ 
                                                        $ledger_id=$this->ledger->get_ledger($k,$k,$society_id,"sc_acc_details");                                    
                                                    }
                                                    else {
                                                        $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                                                    
                                                    }
                                                    $credit = [
                                                        "dc"=> "C",
                                                        "cr_amount"=>$v,
                                                        "ledger_id"=>$ledger_id                           
                                                    ];
                                                    $flat_ledger_amount=$flat_ledger_amount+$v;
                                                    array_push($main_array,$credit);
                                                }
                                            
                                            }
                                            if($taxAmount>0){
                                                $ledger_id=$this->ledger->get_ledger("Tax","Tax",$society_id,"sc_acc_details");  
                                                $credit = [
                                                    "dc"=> "C",
                                                    "cr_amount"=>$taxAmount,
                                                    "ledger_id"=>$ledger_id
                                                ];
                                                $flat_ledger_amount=$flat_ledger_amount+$taxAmount;
                                                array_push($main_array,$credit);
                
                                            }
                                        
                                            if($interest>0){
                                                $ledger_id=$this->ledger->get_ledger("Interest","Interest",$society_id,"sc_acc_details");  
                                                $flat_ledger_amount=$flat_ledger_amount+$interest;
                                                $credit = [
                                                    "dc"=> "C",
                                                    "cr_amount"=>$interest,
                                                    "ledger_id"=>$ledger_id
                                                ];
                                                array_push($main_array,$credit);
                
                                            }
                
                                            $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member[0]['id']);
                                            $debit = [
                                                "dc"=> "D",
                                                "dr_amount"=> $flat_ledger_amount,
                                                "ledger_id"=>$flat_ledger_id                          
                                            ];
                                            
                                            array_push($main_array,$debit); 
                
                                            $narration="Bill Generate of flat No. ".$member[0]["flat_no"]."and wing ".$member[0]["wing"];
                
                                            $bill_ledger_id=$this->ledger->accounting_bill_double_entry($society_id,4, $bill_date,$narration,$main_array,"sc_flat_bill_accounting",$member[0]['id'],$bill_no);
                                            if($bill_ledger_id!="0" || $bill_ledger_id!=0 ){
                                                $this->Bill_detail_model->update_bill_detail($bill_details_insert_id,array("bill_ledger_id"=>$bill_ledger_id));
                                                $this->db->trans_complete();
                                            }                                            
                                        }
                                        
                                        $notification_data = array(
                                            'flat_id'=>$member[0]['id'],
                                            'society_id'=>$society_id,
                                            'title'=>'Bill Generated',
                                            'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                                            'created_by'=>$this->session->userdata('user_id'),
                                            'screen'=>'BILL_VIEW'
                                        );
                                        $notification = notify($notification_data);
                                        $message['text'] = "Bill Generated successfully!!";
                                        $message['status'] = "Success";
                                        $this->session->set_flashdata('message', $message);
                    
                                    endif;
                
                                    if ($this->db->trans_status() === FALSE) {
                                        # Something went wrong.
                                        $this->db->trans_rollback();
                                       
                                    } 
                                    else {
                                        # Everything is Perfect. 
                                        # Committing data to the database.
                                        $this->db->trans_commit();
                                        
                                    }
                
                                } 
                                //end if checking member empty or not
                            }
                
                            sleep(5);// this should halt for 5 seconds for every loop
                        } 
                    }else{
                        // $path = FCPATH.'/logs/bill_generate_'.$bill_date.".log";
                        // $file_data="add compound interest";
                        foreach ($members as $member) {
                            
                            $today = date('Y-m-d');
                            // if (!file_exists(FCPATH.'/logs/'.$today)) {
                            //     mkdir(FCPATH.'/logs/'.$today, 0777, true);
                            // }
                            // $path = FCPATH.'/logs/'.$member['id'].'_'. $bill_date.".log";

                            // $file_data .= "Member ID : ".$member['id']."\n";

                            $bill_no++;
                            $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                            $bill_head_calc = calc_bill_heads($bill_headings,$member['flat_area'],$member['id']);
                            
                            $bill_head_calc['Parking Charges'] = calc_parking_charges($member,$parking_charges);
                            if($member['tenant'] == 1){
                                $bill_head_calc['NOC Charges'] = calc_noc_charges($noc_charges,$member['flat_area']);
                            } else {
                                $bill_head_calc['NOC Charges'] = 0;
                            }
                            $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                                        
                            $is_paid = 0;
                            $bill_status = '';
                        
                            $de = 1;
                            $interestable_amount = 0;
                        
                            $principal_for_arrears = 0;

                            // $file_data .= "Setting Basic Variable\n";
                            // $file_data .= "Calculating Values Before Bill Generation\n";
                            // $file_data .= "Bill Head Details : ".json_encode($bill_head_calc)."\n"; 

                
                            $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member['id']);
                
                           
                            if(!empty($last_month_bill)){
                                $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                            }else{
                                
                                $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                            
                            }
                        
                        
                            $last_payment = $this->Payment_model->get_last_payment_details($member['id']);
                            if(!empty($last_payment)){
                                $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                            }else{
                                $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                            }
                            
                            
                            $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member['id']);

                            // $file_data .= "Data for late payment check model\n";
                            // $file_data .= "Last Due Date : ".$last_due_date."\n";
                            // $file_data .= "Current Bill Date : ".$bill_date."\n";
                            // $file_data .= "Late Payment Entry : ".json_encode($late_payment)."\n";

                        
                            // if bill interest is calculated after n number of months on bill being unpaid
                            // get number of relaxation months on bill payment
                            // take principal arear as bill_amount of n th month
                            if($society_details['interest_on_bill_frequency'] == 1)
                            {
                                
                                $frequency = $society_details['interest_bill_frequency'];
                                $principal_arrears = $this->Bill_detail_model->get_that_bill($member['id'],$member['society_id'],$bill_date,$frequency);
                            }
                            else
                            {
                               
                                $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                            }
                            
                            $interest_arrears = $this->Member_model->get_member_current_intrest_arrears($member['id']);
                
                            $current_bal = $this->Member_model->get_member_current_balance($member['id']);
                
                            $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );
                
                            $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                            
                            if($interest_span == 'Daily'){
                                $de = (strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24);
                                $de = $de > 0 ? $de : 0;
                            } else {
                                $de = 1;
                            }

                            // $file_data .= "checking Compound Interest here thern value of interestable_amount : ".$interestable_amount."\n";
                            
                            $interestable_amount =($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears;
                
                           
                           
                            // if bill interest is calculated after n number of months on bill being unpaid
                            // take principal arrear as current valance
                            if($society_details['interest_on_bill_frequency'] == 1)
                            {
                                $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                            }
                
                            if($society_details['interest_on_bill_frequency'] == 1)
                            {
                                $interestable_amount = $principal_arrears;
                            }

                            // $file_data .= "Last Princpal Arrears : ".$principal_arrears."\n";
                            // $file_data .= "Last Interest Arrears : ".$interest_arrears."\n";
                            // $file_data .= "Current Balance : ".$current_bal."\n";
                            // $file_data .= "Last Bill Due : ".$ld."\n";
                            // $file_data .= "Days Elapsed : ".$de."\n";
                            // $file_data .= "Interestable Amount : ".$interestable_amount."\n";
                           

                           
                            //declare one variable for one time fixed amount add so second time not added -sachhidanand Gupta                          
                            //use this condition for fixed interest amount add  when last month bill  partial paid and in between due_date
                            // $fixed_intererest_taken=0;
                            $interest=0;
                
                            // if($interestable_amount>0 &&($last_month_bill[0]['bill_status']=="Partially Paid"|| $last_month_bill[0]['bill_status']=="Unpaid") && $interest_type=="Fixed Interest"){
                            //     // $interest=$interest+$society_details['fixed_interest'];
                            //     $fixed_intererest_taken=1;
                            // }
                            
                            //this use late payment interest
                           
                            if((!empty($late_payment) || $late_payment != NULL )){
                                 $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member['id']);
                                 if($interest_type=="Fixed Interest"){
                                    // &&  $fixed_intererest_taken==1
                                    if($interestable_amount>0){
                                        $interest = $this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$principal_for_arrears,$de);
                                    }
                                    
                                 }else{                                   
                                    $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de);
                                 } 
                            }else{
                                
                                //get current interest   
                                if($interest_type=="Fixed Interest" ){
                                    //&&  $fixed_intererest_taken==1
                                   
                                    if($interestable_amount>0){
                                        $interest = $interest+$this->calc_interest($interest_type,$interest_span,$society_details['fixed_interest'],$interestable_amount,$de);
                                    }
                                         
                                     
                                }else{                          
                                    // $file_data .= "compound interest calculation data: \n";

                                    // $file_data .= "interest_type : ".$interest_type."\n";
                                    // $file_data .= "interest_span : ".$interest_span."\n";

                                    // $file_data .= "interest_rate : ".$interest_rate."\n";

                                    // $file_data .= "interestable_amount : ".$interestable_amount."\n";

                                    // $file_data .= "de : ".$de."\n";

                                    $interest = $interest+$this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
                                    
                                    // $file_data .= "Compound interest total value : ".$interest."\n";
                                }
                                
                            }

                            // $file_data .= "Current Month Interest: ".$interest."\n";
                           
                           
                            $soft_total = round($bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest);
                        
                            // if($society_details['is_gst'] == 1){
                            //     $taxes = $this->calcGST($soft_total);
                            //     $taxAmount =$taxes['payableGST'];
                            //     $taxSlab = $taxes['GST'];
                            //     $soft_total = $taxes['taxAmount'];
                                
                            // }else{
                            //     $taxAmount = 0;
                            //     $taxSlab = 0;  
                            // }
                
                        
                            $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;

                            if($society_details['is_gst'] == 1){
                               
                                // $taxes =$this->calcGST($soft_total);//as discuss jignesh and harsh gst calculation on bill head
                                $taxes =$this->calcGST( $total_due);
                                $taxAmount =$taxes['payableGST'];
                                $taxSlab = $taxes['GST'];
                                
                            }else{
                                $taxAmount = 0;
                                $taxSlab = 0;  
                            }  

                            $total_due=$total_due+$taxAmount;
                            
                            $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                            $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');  

                            //add this function for when member pay advance payment and member arrears table no entry availbe check
                               
                            $principal_arrears_available = $this->Member_model->exit_member_current_arrears($member['id']);
                                    
                            // if($interestable_amount=="0.00" &&  $principal_arrears_available==0){
                            //     $interestable_amount=$member[0]['principal_arrears'];
                            // }    
                            
                           
                            $bill_array = array(
                                'member_id' => $member['id'],
                                'society_id' => $society_id,
                                'bill_date' => $bill_date,
                                'due_date' => $bill_due,
                                'bill_month' => $current_month,
                                'details' => serialize($bill_head_calc),
                                'principal_arrears' => ($principal_arrears_available==0 &&$interestable_amount=="0.00" )? $member['principal_arrears']:$interestable_amount,
                                'interest_arrears' => $interest_arrears,
                                'late_payment_charges' => 0,
                                'interest' => $interest,
                                'tax_amount' => $taxAmount,
                                'tax_slab' => $taxSlab,
                                'bill_amount' => $bill_head_calc['sub_total'],
                                'total_due' => $total_due,
                                'bill_summary' => $bill_summary,
                                'paid' => $is_paid,
                                'bill_status' => $bill_status,
                                'bill_no' => $bill_no
                            );                 
                        
                            // print_r($bill_array);die;
                            
                            $new_arrears = ($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0; 

                            // $file_data .= "New Principal Arrears : ".$new_arrears."\n";
                            // $file_data .= "New Interest Arrears : ".$interest_arrears + $interest."\n";
                            // $file_data .= "New Member Balance : ".-$total_due."\n";
                            


                          
                            //if($this->db->insert('bill_details',$bill_array)):
                            $this->db->trans_start(); # Starting Transaction
                            $this->db->trans_strict(FALSE);
                            $bill_details_insert_id=$this->Bill_detail_model->add_bill_detail($bill_array);
                
                          
                            if($bill_details_insert_id!=0):
                        
                                /*Add society member bill payment logs*/
                                $bpm_logs = array(
                                    'entity_id' => $bill_no,
                                    'member_id' => $member['id'],
                                    'amount' => $bill_head_calc['sub_total'] + $interest,
                                    'type' => 'BILL',
                                    'dnt' => time(),
                                );
                
                                $this->Member_model->insert_bpm_logs($bpm_logs);
                
                                $this->Member_model->insert_member_arrears($member['id'],$new_arrears);
                                $this->Member_model->insert_member_interest_arrears($member['id'],$interest_arrears + $interest);
                                $this->Member_model->insert_member_balance($member['id'],-$total_due);
                
                                /*Add society member bill payment transaction logs*/
                                $bpm_txn_logs = array(
                                    'entity_id' => $bill_no,
                                    'narration' => 'BILLDUE',
                                    'credit' => '',
                                    'debit' => $bill_head_calc['sub_total'] + $interest,
                                    'balance' => -$total_due,
                                    'dnt' => time(),
                                    'member_id' => $member['id'],
                                );
                
                                $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                                
                                //checking society accounting details present or not-03-03-2022
                                $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                                if(!empty($accounting_db_details)){
                                    $main_array=[];   
                                    $flat_ledger_amount=0;                  
                                    foreach($bill_head_calc as $k=>$v){
                                        if($k!="sub_total"){                            
                                            if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){ 
                                                $ledger_id=$this->ledger->get_ledger($k,$k,$society_id,"sc_acc_details");                                    
                                            }
                                            else {
                                                $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                                            
                                            }
                                            $credit = [
                                                "dc"=> "C",
                                                "cr_amount"=>$v,
                                                "ledger_id"=>$ledger_id                           
                                            ];
                                    $flat_ledger_amount= $flat_ledger_amount+$v;                  
                
                                            array_push($main_array,$credit);
                                        }
                                    
                                    }
                                    if($taxAmount>0){
                                        $ledger_id=$this->ledger->get_ledger("Tax","Tax",$society_id,"sc_acc_details");  
                                        $credit = [
                                            "dc"=> "C",
                                            "cr_amount"=>$taxAmount,
                                            "ledger_id"=>$ledger_id                           
                                        ];
                                        $flat_ledger_amount= $flat_ledger_amount+$taxAmount; 
                                        array_push($main_array,$credit);
                
                                    }
                                  
                                    if($interest>0){
                                        $ledger_id=$this->ledger->get_ledger("Interest","Interest",$society_id,"sc_acc_details");  
                                       
                                        $credit = [
                                            "dc"=> "C",
                                            "cr_amount"=>$interest,
                                            "ledger_id"=>$ledger_id                           
                                        ];
                                        $flat_ledger_amount= $flat_ledger_amount+$interest;
                                        array_push($main_array,$credit);
                
                                    }                                   
                                    
                
                                    $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member['id']);
                                    $debit = [
                                        "dc"=> "D",
                                        "dr_amount"=>abs($flat_ledger_amount),
                                        "ledger_id"=>$flat_ledger_id                          
                                    ];                                    
                                    array_push($main_array,$debit);
                                    $narration="Bill Generate of flat No. ".$member["flat_no"]."and wing ".$member["wing"];
                                    $bill_ledger_id=$this->ledger->accounting_bill_double_entry($society_id,4,$bill_date,$narration,$main_array,"sc_flat_bill_accounting",$member['id'],$bill_no);
                
                                    if($bill_ledger_id!=0 ||$bill_ledger_id!="0"){
                                        $this->Bill_detail_model->update_bill_detail($bill_details_insert_id,array("bill_ledger_id"=>$bill_ledger_id));
                                        $this->db->trans_complete(); # Completing transaction
                                    }
                
                                        
                                }
                                
                                $notification_data = array(
                                    'flat_id'=>$member['id'],
                                    'society_id'=>$society_id,
                                    'title'=>'Bill Generated',
                                    'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                                    'created_by'=>$this->session->userdata('user_id'),
                                    'screen'=>'BILL_VIEW'
                                );
                                $notification = notify($notification_data);
                                $message['text'] = "Bill Generated successfully!!";
                                $message['status'] = "Success";
                                $this->session->set_flashdata('message', $message);

                                //  $file_data .= "Inserting data in Database\n";
                                // $file_data .= "----------------------------------------------------------------------------------------------------------------------------------------------\n\n";
                              
                               
                
                            endif;
                
                            if ($this->db->trans_status() === FALSE) {
                                # Something went wrong.
                                $this->db->trans_rollback();
                                
                            } 
                            else {
                                # Everything is Perfect. 
                                # Committing data to the database.
                                $this->db->trans_commit();
                               
                            }
                        }

                        // $responseLog = fopen($path, "w") or die("Unable to create File");
                        // $log= print_r($file_data,TRUE);
                        // fwrite($responseLog, $file_data);
                        // fclose($responseLog);

                        $message['text'] = "Bill Generated successfully!!";
                        $message['status'] = "Success";
                    }                    
                    
                }
            }else{
                $message['text'] = "First Create flat!!";
                $message['status'] = "Fail";
            }            
            
            $this->session->set_flashdata('message', $message);
            echo json_encode($message) ;
           
        }else{
            $message['text'] = "Please select all field!!";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
            echo json_encode($message) ;
        }
    }

    public function generate_bill_working($society_id = '') {
       
        $bill_date = $this->input->post('bill_date');
        $society_id = $this->input->post('society_id');
        $due_date = $this->input->post('due_date');
        $bill_summary = $this->input->post('bill_summary');   
       
        if(!empty($bill_date) && !empty($society_id) &&!empty($due_date) &&!empty( $bill_summary)) {   
            $bill_date=date("Y-m-d",strtotime($bill_date));
            $due_date=date("Y-m-d",strtotime($due_date));              
            $society_details = $this->Society_model->get_society($society_id);
            $members = $this->Member_model->get_all_members($society_id);
            if(!empty($members)){
                // if bill interest is calculated after n number of months on bill being unpaid
                // get number of relaxation months on bill payment
                // calculate due date as per n th month
                if($society_details['interest_on_bill_frequency'] == 1)
                {
                    $frequency = $society_details['interest_bill_frequency'];
                    $due_due = date('Y-m-d', strtotime($bill_date.'+'.$frequency.' months'));
                    $bill_due = date('Y-m-d', strtotime($due_due.'-1 days'));
                }
                // if bill interest is calculated every month on bill being unpaid
                // take selected due date on form as due date
                else
                {
                    // $bill_due = $this->input->post('due_date');
                    $bill_due = $due_date;//25-04-2022 sachhidanad
                }

                $bill_summary = $this->input->post('bill_summary');

                $month = date('m',strtotime($bill_date));
                $year = date('Y',strtotime($bill_date));

                $bank = $this->Bank_model->get_all_bank($society_id);           
                
                $parking_charges = $this->Parking_charge_model->get_all_parking_charge($society_id);
                $noc_charges = $this->Society_model->get_noc_charge($society_id);
                
                $bill_no = $this->Billing_head_model->get_last_bill_no($society_id);
                
                $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));
            
                $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($society_id,$current_month);
            
                $interest_rate = $society_details['interest_rate'];
                $interest_span = $society_details['interest_span'];
                $interest_type = $society_details['interest_type'];

                $return=0;
                foreach($members as $member){
                    if($check_bill != NULL OR empty($bank) OR empty($parking_charges) OR empty($noc_charges) or empty($member['flat_type_id'])){
                        if($check_bill != NULL)
                        {
                            $message['text'] = "Bill for this month is already generated.";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($bank))
                        {
                            $message['text'] = "Bank Not Found!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($parking_charges))
                        {
                            $message['text'] = "Parking Charges is Missing!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        elseif(empty($noc_charges))
                        {
                            $message['text'] = "NOC Charges Not Found!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }                       

                        elseif(empty($member['flat_type_id']))
                        {  
                            $message['text'] = "Flat Type is Not Assigned to all Flats!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                            
                        }
                      
                        else
                        {
                            $message['text'] = "Somethings a miss!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        
                    }
                }
                
                foreach($members as $member){
                    if(!empty($member['flat_type_id']))
                    {
                        $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                        if(empty($bill_headings)){
                            $message['text'] = "Bill head is missing!";
                            $message['status'] = "Fail";
                            $return=1;
                            break;
                        }
                        
                    }
                }
                if($return==0){
                   
                   
                    foreach ($members as $member) {
                    
                        $bill_no++;
                        $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                        $bill_head_calc = calc_bill_heads($bill_headings,$member['flat_area'],$member['id']);
                        
                        $bill_head_calc['Parking Charges'] = calc_parking_charges($member,$parking_charges);
                        if($member['tenant'] == 1){
                            $bill_head_calc['NOC Charges'] = calc_noc_charges($noc_charges,$member['flat_area']);
                        } else {
                            $bill_head_calc['NOC Charges'] = 0;
                        }
                        $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                                    
                        $is_paid = 0;
                        $bill_status = '';
                    
                        $de = 1;
                        $interestable_amount = 0;
                    
                        $principal_for_arrears = 0;
        
                        $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member['id']);
                        if(!empty($last_month_bill)){
                            $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                        }else{
                            
                            $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                        
                        }
                    
                    
                        $last_payment = $this->Payment_model->get_last_payment_details($member['id']);
                        if(!empty($last_payment)){
                            $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                        }else{
                            $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                        }
                        
                        
                        $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member['id']);
                    
                        // if bill interest is calculated after n number of months on bill being unpaid
                        // get number of relaxation months on bill payment
                        // take principal arear as bill_amount of n th month
                        if($society_details['interest_on_bill_frequency'] == 1)
                        {
                        
                            $frequency = $society_details['interest_bill_frequency'];
                            $principal_arrears = $this->Bill_detail_model->get_that_bill($member['id'],$member['society_id'],$bill_date,$frequency);
                        }
                        else
                        {
                        
                            $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                        }
                        
                        $interest_arrears = $this->Member_model->get_member_current_intrest_arrears($member['id']);
        
                        $current_bal = $this->Member_model->get_member_current_balance($member['id']);
        
                        $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );
        
                        $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                        
                        if($interest_span == 'Daily'){
                            $de = (strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24);
                            $de = $de > 0 ? $de : 0;
                        } else {
                            $de = 1;
                        }
                        
                        $interestable_amount =($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears;
        
                        $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);
        
                        // if bill interest is calculated after n number of months on bill being unpaid
                        // take principal arrear as current valance
                        if($society_details['interest_on_bill_frequency'] == 1)
                        {
                            $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                        }
        
                        if($society_details['interest_on_bill_frequency'] == 1)
                        {
                            $interestable_amount = $principal_arrears;
                        }
        
                        if(!empty($late_payment) || $late_payment != NULL){
                            $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member['id']);
                            $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de);
                        }
                        $soft_total = round($bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest);
                    
                        if($society_details['is_gst'] == 1){
                            $taxes = $this->calcGST($soft_total);
                            $taxAmount =$taxes['payableGST'];
                            $taxSlab = $taxes['GST'];
                            $soft_total = $taxes['taxAmount'];
                        }else{
                            $taxAmount = 0;
                            $taxSlab = 0;  
                        }
        
                    
                        $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;
                        
                        $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                        $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');               
                        
                        $bill_array = array(
                            'member_id' => $member['id'],
                            'society_id' => $society_id,
                            'bill_date' => $bill_date,
                            'due_date' => $bill_due,
                            'bill_month' => $current_month,
                            'details' => serialize($bill_head_calc),
                            'principal_arrears' => $interestable_amount,
                            'interest_arrears' => $interest_arrears,
                            'interest' => $interest,
                            'tax_amount' => $taxAmount,
                            'tax_slab' => $taxSlab,
                            'bill_amount' => $bill_head_calc['sub_total'],
                            'total_due' => $total_due,
                            'bill_summary' => $bill_summary,
                            'paid' => $is_paid,
                            'bill_status' => $bill_status,
                            'bill_no' => $bill_no
                        );                     
                    
        
                        $new_arrears = ($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0;
                        //if($this->db->insert('bill_details',$bill_array)):
                    
                        $bill_details_insert_id=$this->Bill_detail_model->add_bill_detail($bill_array);

                       
                        if($bill_details_insert_id!=0):
                    
                            /*Add society member bill payment logs*/
                            $bpm_logs = array(
                                'entity_id' => $bill_no,
                                'member_id' => $member['id'],
                                'amount' => $bill_head_calc['sub_total'] + $interest,
                                'type' => 'BILL',
                                'dnt' => time(),
                            );

                            $this->Member_model->insert_bpm_logs($bpm_logs);
        
                            $this->Member_model->insert_member_arrears($member['id'],$new_arrears);
                            $this->Member_model->insert_member_interest_arrears($member['id'],$interest_arrears + $interest);
                            $this->Member_model->insert_member_balance($member['id'],-$total_due);
        
                            /*Add society member bill payment transaction logs*/
                            $bpm_txn_logs = array(
                                'entity_id' => $bill_no,
                                'narration' => 'BILLDUE',
                                'credit' => '',
                                'debit' => $bill_head_calc['sub_total'] + $interest,
                                'balance' => -$total_due,
                                'dnt' => time(),
                                'member_id' => $member['id'],
                            );
        
                            $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                            
                            //checking society accounting details present or not-03-03-2022
                            $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id);
                            if(!empty($accounting_db_details)){
                                $main_array=[];                  
                                foreach($bill_head_calc as $k=>$v){
                                    if($k!="sub_total"){                            
                                        if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){ 
                                            $ledger_id=$this->ledger->get_ledger($k,$k,$society_id,"sc_acc_details");                                    
                                        }
                                        else {
                                            $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                                        
                                        }
                                        $credit = [
                                            "dc"=> "C",
                                            "cr_amount"=>$v,
                                            "ledger_id"=>$ledger_id                           
                                        ];
                                        array_push($main_array,$credit);
                                    }
                                
                                }
                                if($taxAmount>0){
                                    $ledger_id=$this->ledger->get_ledger("Tax","Tax",$society_id,"sc_acc_details");  
                                    $credit = [
                                        "dc"=> "C",
                                        "cr_amount"=>$taxAmount,
                                        "ledger_id"=>$ledger_id                           
                                    ];
                                    array_push($main_array,$credit);

                                }
                               
                                if($interest>0){
                                    $ledger_id=$this->ledger->get_ledger("Interest","Interest",$society_id,"sc_acc_details");  
                                   
                                    $credit = [
                                        "dc"=> "C",
                                        "cr_amount"=>$interest,
                                        "ledger_id"=>$ledger_id                           
                                    ];
                                    array_push($main_array,$credit);

                                } 
                                
                                

                                $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member['id']);
                                $debit = [
                                    "dc"=> "D",
                                    "dr_amount"=>$total_due,
                                    "ledger_id"=>$flat_ledger_id                          
                                ];
                                
                                array_push($main_array,$debit);

                             

                                $narration="Bill Generate of flat No. ".$member["flat_no"]."and wing ".$member["wing"];
                                $bill_ledger_id=$this->ledger->accounting_bill_double_entry($society_id,4,date('Y-m-d'),$narration,$main_array,"sc_flat_bill_accounting",$member['id'],$bill_no);

                                $this->Bill_detail_model->update_bill_detail($bill_details_insert_id,array("bill_ledger_id"=>$bill_ledger_id));
                            }
                            
                            $notification_data = array(
                                'flat_id'=>$member['id'],
                                'society_id'=>$society_id,
                                'title'=>'Bill Generated',
                                'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                                'created_by'=>$this->session->userdata('user_id'),
                                'screen'=>'BILL_VIEW'
                            );
                            $notification = notify($notification_data);
                            $message['text'] = "Bill Generated successfully!!";
                            $message['status'] = "Success";
                            $this->session->set_flashdata('message', $message);
        
                        endif;
                    }
                    $message['text'] = "Bill Generated successfully!!";
                    $message['status'] = "Success";
                    
                }
            }else{
                $message['text'] = "First Create flat!!";
                $message['status'] = "Fail";
            }            
            
            $this->session->set_flashdata('message', $message);
            echo json_encode($message) ;
           
        }else{
            $message['text'] = "Please select all field!!";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
            echo json_encode($message) ;
        }
    }
    //changes code for message send
    public function generate_bill_bak($society_id = '') {
        
        if($this->input->post()) {
            $society_id = $this->input->post('society_id');
            $society_details = $this->Society_model->get_society($society_id);
            $bill_date = $this->input->post('bill_date');
            // if bill interest is calculated after n number of months on bill being unpaid
            // get number of relaxation months on bill payment
            // calculate due date as per n th month
            if($society_details['interest_on_bill_frequency'] == 1)
            {
                $frequency = $society_details['interest_bill_frequency'];
                $due_due = date('Y-m-d', strtotime($bill_date.'+'.$frequency.' months'));
                $bill_due = date('Y-m-d', strtotime($due_due.'-1 days'));
            }
            // if bill interest is calculated every month on bill being unpaid
            // take selected due date on form as due date
            else
            {
                $bill_due = $this->input->post('due_date');
            }

            $bill_summary = $this->input->post('bill_summary');

            $month = date('m',strtotime($bill_date));
            $year = date('Y',strtotime($bill_date));

            $bank = $this->Bank_model->get_all_bank($society_id);
           
            $members = $this->Member_model->get_all_members($society_id);
           
            $parking_charges = $this->Parking_charge_model->get_all_parking_charge($society_id);
            $noc_charges = $this->Society_model->get_noc_charge($society_id);
            
            $bill_no = $this->Billing_head_model->get_last_bill_no($society_id);
            
            $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));
          
            $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($society_id,$current_month);
           
            $interest_rate = $society_details['interest_rate'];
            $interest_span = $society_details['interest_span'];
            $interest_type = $society_details['interest_type'];

            
            foreach($members as $member){
                if($check_bill != NULL OR empty($bank) OR empty($parking_charges) OR empty($noc_charges) or empty($member['flat_type_id'])){
                    if($check_bill != NULL)
                    {
                        $message['text'] = "Bill for this month is already generated.";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                        return;
                    }
                        // exit(json_encode(array('errorMsg' => 'Bill for this month is already generated.')));
                    elseif(empty($bank))
                    {
                        $message['text'] = "Bank Not Found!";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                        return;
                    }
                        // exit(json_encode(array('errorMsg' => "Bank Not Found!")));
                    elseif(empty($parking_charges))
                    {
                        $message['text'] = "Parking Charges is Missing!";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                        return;
                    }
                        // exit(json_encode(array('errorMsg' => "Parking Charges is Missing!")));
                    elseif(empty($noc_charges))
                    {
                        $message['text'] = "NOC Charges Not Found!";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                        return;
                    }
                        // exit(json_encode(array('errorMsg' => "NOC Charges Not Found!")));
                    elseif(empty($member['flat_type_id']))
                    {
                        $message['text'] = "Flat Type is Not Assigned to all Flats!";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                        return;
                    }
                        // exit(json_encode(array('errorMsg' => "Flat Type is Not Assigned to all Flats!")));
                    else
                    {
                        $message['text'] = "Somethings a miss!";
                        $message['status'] = "Fail";
                        $this->session->set_flashdata('message', $message);
                        return;
                    }
                        // exit(json_encode(array('errorMsg' => "Somethings a miss!")));
                }
            }

           
            foreach ($members as $member) {
                
                $bill_no++;
                $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                $bill_head_calc = calc_bill_heads($bill_headings,$member['flat_area'],$member['id']);
                
                $bill_head_calc['Parking Charges'] = calc_parking_charges($member,$parking_charges);
                if($member['tenant'] == 1){
                    $bill_head_calc['NOC Charges'] = calc_noc_charges($noc_charges,$member['flat_area']);
                } else {
                    $bill_head_calc['NOC Charges'] = 0;
                }
                $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                              
                $is_paid = 0;
                $bill_status = '';
               
                $de = 1;
                $interestable_amount = 0;
               
                $principal_for_arrears = 0;

                $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member['id']);
                if(!empty($last_month_bill)){
                    $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                }else{
                    
                    $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                  
                }
               
               
                $last_payment = $this->Payment_model->get_last_payment_details($member['id']);
                if(!empty($last_payment)){
                    $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                }else{
                    $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                }
                
                
                $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member['id']);
               
                // if bill interest is calculated after n number of months on bill being unpaid
                // get number of relaxation months on bill payment
                // take principal arear as bill_amount of n th month
                if($society_details['interest_on_bill_frequency'] == 1)
                {
                   
                    $frequency = $society_details['interest_bill_frequency'];
                    $principal_arrears = $this->Bill_detail_model->get_that_bill($member['id'],$member['society_id'],$bill_date,$frequency);
                }
                else
                {
                   
                    $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                }
                
                $interest_arrears = $this->Member_model->get_member_current_intrest_arrears($member['id']);

                $current_bal = $this->Member_model->get_member_current_balance($member['id']);

                $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );

                $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                
                if($interest_span == 'Daily'){
                    $de = round((strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24));
		            $de = $de > 0 ? $de : 0;
                } else {
                    $de = 1;
                }
                
                $interestable_amount = ($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears;

                $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de);

                // if bill interest is calculated after n number of months on bill being unpaid
                // take principal arrear as current valance
                if($society_details['interest_on_bill_frequency'] == 1)
                {
                    $principal_arrears = $this->Member_model->get_member_current_arrears($member['id']);
                }

                if($society_details['interest_on_bill_frequency'] == 1)
                {
                    $interestable_amount = $principal_arrears;
                }

                if(!empty($late_payment) || $late_payment != NULL){
                    $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member['id']);
                    $interest = $this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de);
                }
                $soft_total = $bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest;
                if($society_details['is_gst'] == 1){
                    $taxes = $this->calcGST($soft_total);
                    $taxAmount = $taxes['payableGST'];
                    $taxSlab = $taxes['GST'];
                    $soft_total = $taxes['taxAmount'];
                }

                
                $total_due = ($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total;
                
                $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');               
                
                $bill_array = array(
                    'member_id' => $member['id'],
                    'society_id' => $society_id,
                    'bill_date' => $bill_date,
                    'due_date' => $bill_due,
                    'bill_month' => $current_month,
                    'details' => serialize($bill_head_calc),
                    'principal_arrears' => $interestable_amount,
                    'interest_arrears' => $interest_arrears,
                    'interest' => $interest,
                    'tax_amount' => $taxAmount,
                    'tax_slab' => $taxSlab,
                    'bill_amount' => $bill_head_calc['sub_total'],
                    'total_due' => $total_due,
                    'bill_summary' => $bill_summary,
                    'paid' => $is_paid,
                    'bill_status' => $bill_status,
                    'bill_no' => $bill_no
                );                     
            

                $new_arrears = ($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0;
              
                if($this->db->insert('bill_details',$bill_array)):
                    /*Add society member bill payment logs*/
                    $bpm_logs = array(
                        'entity_id' => $bill_no,
                        'member_id' => $member['id'],
                        'amount' => $bill_head_calc['sub_total'] + $interest,
                        'type' => 'BILL',
                        'dnt' => time(),
                    );
                    $this->Member_model->insert_bpm_logs($bpm_logs);

                    $this->Member_model->insert_member_arrears($member['id'],$new_arrears);
                    $this->Member_model->insert_member_interest_arrears($member['id'],$interest_arrears + $interest);
                    $this->Member_model->insert_member_balance($member['id'],-$total_due);

                    /*Add society member bill payment transaction logs*/
                    $bpm_txn_logs = array(
                        'entity_id' => $bill_no,
                        'narration' => 'BILLDUE',
                        'credit' => '',
                        'debit' => $bill_head_calc['sub_total'] + $interest,
                        'balance' => -$total_due,
                        'dnt' => time(),
                        'member_id' => $member['id'],
                    );

                    $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                    $notification_data = array(
                        'flat_id'=>$member['id'],
                        'society_id'=>$society_id,
                        'title'=>'Bill Generated',
                        'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                        'created_by'=>$this->session->userdata('user_id'),
                        'screen'=>'BILL_VIEW'
                    );

                    $main_array=[];
              
                    foreach($bill_head_calc as $k=>$v){
                        if($k!="sub_total"){
                        
                            if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){                         
                            
                                $ledger_id=$this->ledger->get_ledger($k,$k,$society_id,"sc_acc_details");
                                
                            }
                            else {
                                $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$society_id,"sc_bill_head_accounting_details");
                            
                            }                      
                        
                            $debit = [
                                "dc"=> "D",
                                "dr_amount"=>$v,
                                "ledger_id"=>$ledger_id                           
                            ];
                            array_push($main_array,$debit);
                        }
                    
                    }
    
                    $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$society_id,"sc_flat_acc_Details",$member['id']);
                    $credit = [
                        "dc"=> "C",
                        "cr_amount"=>$bill_head_calc['sub_total'],
                        "ledger_id"=>$flat_ledger_id                          
                    ];
                    array_push($main_array,$credit);
                    $narration="Bill Generate of flat No. ".$member["flat_no"]."and wing ".$member["wing"];
                    $a=$this->ledger->accounting_bill_double_entry($society_id,1,date('Y-m-d'),$narration,$main_array); 

                    

                    $notification = notify($notification_data);
                    $message['text'] = "Bill Generated successfully!!";
                    $message['status'] = "Success";
                    $this->session->set_flashdata('message', $message);

                   
                else:
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                endif;
            }

            $message['text'] = "Bill Generated successfully!!";
            $message['status'] = "Success";
            $this->session->set_flashdata('message', $message);
           
        }
    }

    public function calc_interest($type='',$span='',$roi=0,$principal=0,$days_elapsed=0){
        $interest = 0;
        switch($type){
            case 'Fixed Interest':
                switch($span){
                    case 'Daily':
                        $interest = $days_elapsed * $roi;
                        break;
                    case 'Monthly':
                        $interest = 1 * $roi;
                        break;
                    case 'Quarterly':
                        $interest = 3 * $roi;
                        break;
                    case 'Half Yearly':
                        $interest = 6 * $roi;
                        break;
                    case 'Yearly':
                        $interest = 12 * $roi;
                        break;
                }
                break;
            case 'Simple Interest':
                switch($span){
                    case 'Daily':
                        $interest = ($principal*($roi/100))*($days_elapsed/365);
                        break;
                    case 'Monthly':
                        $interest = ($principal*($roi/100))*(1/12);
                        break;
                    case 'Quarterly':
                        $interest = ($principal*($roi/100))*0.25;
                        break;
                    case 'Half Yearly':
                        $interest = ($principal*($roi/100))*0.5;
                        break;
                    case 'Yearly':
                        $interest = ($principal*($roi/100));
                        break;
                }
                break;
            case 'Compound Interest':
                switch($span){
                    case 'Daily':
                        $interest = ($principal*($roi/100))*($days_elapsed/365);
                        break;
                    case 'Monthly':
                        $interest = ($principal*($roi/100))*(1/12);
                        break;
                    case 'Quarterly':
                        $interest = ($principal*($roi/100))*0.25;
                        break;
                    case 'Half Yearly':
                        $interest = ($principal*($roi/100))*0.5;
                        break;
                    case 'Yearly':
                        $interest = ($principal*($roi/100));
                        break;
                }
                break;
        }
        return $interest;
    }

    public function calcGST($amount){
        $tax = 0;
        $payableGST = 0;
        $taxAmount = 0;

        if($amount >= 0 && $amount <= 7499){
            $tax = 0;
        } elseif($amount >= 7500 && $amount <= 8999){
            $tax = Taxes::baseGST;
        } elseif($amount >= 9000){
            $tax =  Taxes::advanceGST;
        }

        $payableGST = (($amount * $tax)/100);
        $taxAmount = $amount + $payableGST;
        $ret['GST'] = $tax;
        $ret['payableGST'] = $payableGST;
        $ret['taxAmount'] = $taxAmount;       
        return $ret;
    }

    //calculate simple interest-monthly
    // public function calculate_simple_interest($interest_rate, $last_month, $interestable_amount, $bill_date)
    // {
    //     $principal_amount = $interestable_amount;
    //     $rate = $interest_rate;
    //     $bill_d = date('Y-m-d', strtotime($bill_date));
    //     $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

    //     $bill_month = date('m', strtotime($bill_date));
    //     $due_month = date('m', strtotime($due_date));

    //     $bill_year = date('Y', strtotime($bill_date));
    //     $due_year = date('Y', strtotime($due_date));

    //     $num = (($bill_year * 12) + $bill_month) - (($due_year * 12) + $due_month);

    //     $no_years = $num/12;
    //     $new_interest = $principal_amount * $no_years * $rate * 0.01;
    //     return round($new_interest, 2);
    // }

    //calculate compound interest-monthly
    // public function calculate_compound_interest($interest_rate, $last_month, $member_current_balance, $bill_date)
    // {
    //     $bill_amount = $member_current_balance;
    //     $rate = $interest_rate;
    //     $bill_d = date('Y-m-d', strtotime($bill_date));
    //     $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

    //     $bill_month = date('m', strtotime($bill_date));
    //     $due_month = date('m', strtotime($due_date));

    //     $bill_year = date('Y', strtotime($bill_date));
    //     $due_year = date('Y', strtotime($due_date));

    //     $num = (($bill_year * 12) + $bill_month) - (($due_year * 12) + $due_month);

    //     $no_years = $num/12;
    //     $interest_rate = $rate/100;
    //     $interest = $bill_amount * $interest_rate * $no_years;
    //     return round($interest, 2);
    // }

    // calculate fixed interest-monthly
    // public function calculate_fixed_interest($interest_rate, $last_month, $member_current_balance, $bill_date)
    // {
    //     $bill_amount = $member_current_balance;
    //     $interest = $interest_rate;
    //     $new_interest = 0;
    //     $num = 0;
    //     $bill_d = date('Y-m-d', strtotime($bill_date));
    //     $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

    //     $bill_month = date('m', strtotime($bill_date));
    //     $due_month = date('m', strtotime($due_date));

    //     $bill_year = date('Y', strtotime($bill_date));
    //     $due_year = date('Y', strtotime($due_date));

    //     $num = (($bill_year * 12) + $bill_month) - (($due_year * 12) + $due_month);

    //     $i = 0;
    //     while ($i <= $num)
    //     {
    //         $new_interest = $new_interest * $interest;
    //         $i +=1;
    //     }
    //     return round($new_interest, 2);
    // }

    //calculate simple interest-daily
    public function calculate_simple_interest_daily($interest_rate, $last_month, $interestable_amount, $bill_date)
    {
        $interest = 0;
        $new_interest = 0;
        $principal_amount = $interestable_amount;
        $rate = ($interest_rate/100);
        $bill_d = date('Y-m-d', strtotime($bill_date));
        $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

        $bill_month = date('m', strtotime($bill_date));
        $due_month = date('m', strtotime($due_date));

        $bill_year = date('Y', strtotime($bill_date));
        $due_year = date('Y', strtotime($due_date));

        $days_of_month = cal_days_in_month(CAL_GREGORIAN, $due_year, $due_month);
        $days = $bill_d - $due_date;
        $da = ($days/365);
        // $interest = ($principal_amount * $interest_rate * $d);
        $interest = ($principal_amount * $interest_rate * $da);
        return round($interest, 2);
    }

    /*
     * Adding a new bill_detail
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'payment_id' => $this->input->post('payment_id'),
				'member_id' => $this->input->post('member_id'),
				'society_id' => $this->input->post('society_id'),
				'bill_payment_id' => $this->input->post('bill_payment_id'),
				'bill_no' => $this->input->post('bill_no'),
				'bill_amount' => $this->input->post('bill_amount'),
				'previous_member_balance' => $this->input->post('previous_member_balance'),
				'created_at' => $this->input->post('created_at'),
				'updated_at' => $this->input->post('updated_at'),
				'bill_date' => $this->input->post('bill_date'),
				'due_date' => $this->input->post('due_date'),
				'bill_month' => $this->input->post('bill_month'),
				'paid' => $this->input->post('paid'),
				'interest' => $this->input->post('interest'),
				'principal_arrears' => $this->input->post('principal_arrears'),
				'interest_arrears' => $this->input->post('interest_arrears'),
				'total_due' => $this->input->post('total_due'),
				'late_payment_charges' => $this->input->post('late_payment_charges'),
				'bill_payment_date' => $this->input->post('bill_payment_date'),
				'total_arrears' => $this->input->post('total_arrears'),
				'total_interest_arrears' => $this->input->post('total_interest_arrears'),
				'bill_status' => $this->input->post('bill_status'),
				'bill_summary' => $this->input->post('bill_summary'),
				'details' => $this->input->post('details'),
            );
            
            $bill_detail_id = $this->Bill_detail_model->add_bill_detail($params);
            redirect('bill_detail/index');
        }
        else
        {			
			$data['all_payments'] = $this->Payment_model->get_all_payments();            
			$data['all_members'] = $this->Member_model->get_all_members();            
			$data['all_societies'] = $this->Society_model->get_all_societies();			
            $data['_view'] = 'bill_detail/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a bill_detail
     */
    function edit($id)
    {   
        // check if the bill_detail exists before trying to edit it
        $data['bill_detail'] = $this->Bill_detail_model->get_bill_detail($id);
        
        if(isset($data['bill_detail']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'payment_id' => $this->input->post('payment_id'),
					'member_id' => $this->input->post('member_id'),
					'society_id' => $this->input->post('society_id'),
					'bill_payment_id' => $this->input->post('bill_payment_id'),
					'bill_no' => $this->input->post('bill_no'),
					'bill_amount' => $this->input->post('bill_amount'),
					'previous_member_balance' => $this->input->post('previous_member_balance'),
					'created_at' => $this->input->post('created_at'),
					'updated_at' => $this->input->post('updated_at'),
					'bill_date' => $this->input->post('bill_date'),
					'due_date' => $this->input->post('due_date'),
					'bill_month' => $this->input->post('bill_month'),
					'paid' => $this->input->post('paid'),
					'interest' => $this->input->post('interest'),
					'principal_arrears' => $this->input->post('principal_arrears'),
					'interest_arrears' => $this->input->post('interest_arrears'),
					'total_due' => $this->input->post('total_due'),
					'late_payment_charges' => $this->input->post('late_payment_charges'),
					'bill_payment_date' => $this->input->post('bill_payment_date'),
					'total_arrears' => $this->input->post('total_arrears'),
					'total_interest_arrears' => $this->input->post('total_interest_arrears'),
					'bill_status' => $this->input->post('bill_status'),
					'bill_summary' => $this->input->post('bill_summary'),
					'details' => $this->input->post('details'),
                );

                $this->Bill_detail_model->update_bill_detail($id,$params);            
                redirect('bill_detail/index');
            }
            else
            {	
				$data['all_members'] = $this->Member_model->get_all_members();
				$data['all_societies'] = $this->Society_model->get_all_societies();
				$data['all_payments'] = $this->Payment_model->get_all_payments();
                $data['_view'] = 'bill_detail/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The bill_detail you are trying to edit does not exist.');
    } 

    /*
     * Deleting bill_detail
     */
    function remove($id)
    {
        $bill_detail = $this->Bill_detail_model->get_bill_detail($id);

        // check if the bill_detail exists before trying to delete it
        if(isset($bill_detail['id']))
        {
            $this->Bill_detail_model->delete_bill_detail($id);
            redirect('bill_detail/index');
        }
        else
            show_error('The bill_detail you are trying to delete does not exist.');
    }

    // public function collect_response()
    // {
    //     $txn_data = $_POST;
    //     $act_data = array(
    //         'user_id' => 1,
    //         'browser'=>'chrome',
    //         'ip_address'=>'1.2.3.4',
    //         'controller'=>'bill_detail',
    //         'action'=>'Online payment',
    //         'params'=>serialize($txn_data),
    //         'created_at'=>time(),
    //     );
    //     $this->db->insert('activity_logs', $act_data);

    //     if($txn_data['response_code'] == '100'||$txn_data['response_code'] == 100 || $txn_data['response_code'] == 6|| $txn_data['response_code'] == '6' || $txn_data['response_code'] == 'SUCCESS')
    //     {
    //         $bill_payment_id = $txn_data['reference_no'];
    //         $bill = $this->Bill_detail_model->get_bill_page($bill_payment_id);
    //         $bill_due_date = $bill['due_date'];
    //         $bill_id = $bill['id'];
    //         $society = $this->Society_model->get_society($bill['society_id']);
    //         $member = $this->Member_model->get_member($bill['member_id']);
    //         $amount = $txn_data['amount'];
    //         $payment_date = date('Y-m-d h:i:s');
    //         $current_arrears = $this->Member_model->get_member_current_arrears($bill['member_id']);
    //         $current_interest = $this->Member_model->get_member_current_intrest_arrears($bill['member_id']);
    //         $current_balance = $this->Member_model->get_member_current_balance($bill['member_id']);
    //         $receipt_no = $this->Payment_model->get_last_receipt($society['id']);

    //         $receipt_no++;
    //         $soft_balance = $current_balance + $amount;

    //         $bank = $this->Bank_model->get_default_bank($bill['society_id']);
    //         if($bank || isset($bank) || !empty($bank)):
    //             $last_bank_transaction = $this->Bank_transaction_model->get_transaction_by_bank($bank['id']);
    //             $last_bank_balance = $last_bank_transaction != NULL ? $last_bank_transaction[0]['balance'] : NULL;

    //             $param['credit'] = $amount;
    //             $param['balance'] = $last_bank_balance != Null ? $last_bank_balance + $amount : $bank['opening_balance'] + $amount;
    //             $param['is_cash'] = 0;
    //             $param['society_id'] = $bill['society_id'];
    //             $param['bank_id'] = $bank['id'];
    //             $param['narration'] = "Payment Recieved from ".$member['wing']." ".$member['flat_no']." Online";
    //             $param['date'] = $payment_date;
    //             $this->Bank_transaction_model->add_bank_transaction($param);

    //             $data['current_balance'] = $last_bank_balance != Null ? $last_bank_balance + $amount : $bank['opening_balance'] + $amount;
    //             $id = $bank['id'];
    //             $b = $this->Bank_model->update_bank($id, $data);
    //         endif;

    //         $payment_params = array(
    //             'payment_date' => $payment_date,
    //             'narration' => 'Payment Recieved',
    //             'credit' => $amount,
    //             'member_id' => $member['id'],
    //             'society_id' => $society['id'],
    //             'balance' => $soft_balance,
    //             'paid_by' => 'Online',
    //             'cheque_no' => $txn_data['transaction_id'],
    //             'bill_id' => $bill_id,
    //             'bank_id' => isset($bank) ? $bank['id'] : '',
    //             'depositor_bank' => '',
    //             'receipt_id' => $receipt_no,
    //             'is_cash' => 0
    //         );

    //         $payment_id = $this->Payment_model->add_payment($payment_params);

    //         $bill['txn_ref'] = $txn_data['transaction_id'];
    //         $bill['payment_id'] = $payment_id;
    //         $this->Bill_detail_model->update_bill_detail($bill_id, $bill);

    //         $bpm_logs = array(
    //                     'entity_id' => $payment_id,
    //                     'member_id' => $member['id'],
    //                     'amount' => $amount,
    //                     'type' => 'PAYMENT',
    //                     'dnt' => time(),
    //                 );
    //         $this->Member_model->insert_bpm_logs($bpm_logs);

    //         //Irrespective of balance and arrears update member balance
    //         $this->Member_model->insert_member_balance($bill['member_id'],$soft_balance);

    //         /*Add society member bill payment transaction logs*/
    //         $bpm_txn_logs = array(
    //             'entity_id' => $payment_id,
    //             'narration' => 'AMOUNTPAID',
    //             'credit' => $amount,
    //             'debit' => '',
    //             'balance' => $soft_balance,
    //             'dnt' => time(),
    //             'member_id' => $member['id'],
    //         );

    //         $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);

    //         //logic for arrears and interest arrears calculation
    //         if($current_balance >= 0)
    //         {
    //             return true;
    //         }
    //         else
    //         {
    //             $soft_amount = $amount - $current_interest;
    //             if(($amount - $current_interest) >= 0)
    //             {
    //                 $new_interest = 0;
    //             }
    //             else
    //             {
    //                 $new_interest = $current_interest - $amount;
    //             }

    //             if($soft_amount > 0)
    //             {
    //                 if(($soft_amount - $current_arrears) >= 0)
    //                 {
    //                     $new_arrears = 0;
    //                 }
    //                 else
    //                 {
    //                     $new_arrears = $current_arrears - $soft_amount;
    //                 }
    //             }
    //             else
    //             {
    //                 $new_arrears = $current_arrears;
    //             }

    //             if($soft_balance >= 0)
    //             {
    //                 if($bill_due_date < $payment_date)
    //                 {
    //                     $this->Bill_detail_model->update_all_bill_delayed($member['id']);
    //                 }
    //                 $this->Bill_detail_model->update_old_bill_delayed($bill_id);
    //                 $this->Bill_detail_model->update_all_bill_status($member['id']);
    //             }
    //             else
    //             {
    //                 $this->Bill_detail_model->update_bill_partially_paid($member['id']);
    //             }

    //             $this->Member_model->insert_member_interest_arrears($bill['member_id'],$new_interest);
    //             $this->Member_model->insert_member_arrears($bill['member_id'],$new_arrears);

    //             $resp = '<html lang="en">';
    //             $resp.= '<head>';
    //             $resp.= '<title>Thank You Page</title>';
    //             $resp.= '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css">';
    //             $resp.= '</head>';
    //             $resp.= '<body translate="no">';
    //             $resp.= '<div class="jumbotron text-center">';
    //             $resp.= '<h1 class="display-3">Thank You!</h1>';
    //             $resp.= '<p class="lead">We are reviewing your payment. We will update you soon.</p>';
    //             $resp.= '<hr>';
    //             $resp.= '<p>';
    //             $resp.= '<a href="https://msociety.paynet.co.in/payment_success">Go back to App</a>';
    //             $resp.= '</p>';
    //             $resp.= '</div>';
    //             $resp.= '<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>';
    //             $resp.= '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js"></script>           ';
    //             $resp.= '</body>';
    //             $resp.= '</html>';
    //             echo $resp; return;
    //         }
        
    //     }
    //     else
    //     {
    //         $resp = '<html lang="en">';
    //         $resp.= '<head>';
    //         $resp.= '<title>Thank You Page</title>';
    //         $resp.= '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css">';
    //         $resp.= '</head>';
    //         $resp.= '<body translate="no">';
    //         $resp.= '<div class="jumbotron text-center">';
    //         $resp.= '<h1 class="display-3">Sorry!</h1>';
    //         $resp.= '<p class="lead">Your Payment was incomplete. You can go back and retry payment.</p>';
    //         $resp.= '<hr>';
    //         $resp.= '<p>';
    //         $resp.= '<a href="https://msociety.paynet.co.in/payment_fail">Go back to App</a>';
    //         $resp.= '</p>';
    //         $resp.= '</div>';
    //         $resp.= '<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>';
    //         $resp.= '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js"></script>           ';
    //         $resp.= '</body>';
    //         $resp.= '</html>';
    //         echo $resp; return;
    //     }

    // }

    public function collect_response()
    {
        $txn_data = $_POST;
        $act_data = array(
            'user_id' => 1,
            'browser'=>'chrome',
            'ip_address'=>'1.2.3.4',
            'controller'=>'bill_detail',
            'action'=>'Online payment',
            'params'=>serialize($txn_data),
            'created_at'=>time(),
        );
        $this->db->insert('activity_logs', $act_data);

        if($txn_data['response_code'] == '100'||$txn_data['response_code'] == 100 || $txn_data['response_code'] == 6|| $txn_data['response_code'] == '6' || $txn_data['response_code'] == 'SUCCESS')
        {
            $bill_payment_id = $txn_data['reference_no'];
            $bill = $this->Bill_detail_model->get_bill_page($bill_payment_id);
            $bill_due_date = $bill['due_date'];
            $bill_id = $bill['id'];
            $society = $this->Society_model->get_society($bill['society_id']);
            $member = $this->Member_model->get_member($bill['member_id']);
            $amount = $txn_data['amount'];
            if($amount > 0)
            {
                $payment_date = date('Y-m-d h:i:s');
                $current_arrears = $this->Member_model->get_member_current_arrears($bill['member_id']);
                $current_interest = $this->Member_model->get_member_current_intrest_arrears($bill['member_id']);
                $current_balance = $this->Member_model->get_member_current_balance($bill['member_id']);
                $receipt_no = $this->Payment_model->get_last_receipt($society['id']);

                $receipt_no++;
                $soft_balance = $current_balance + $amount;

                $bank = $this->Bank_model->get_default_bank($bill['society_id']);
                if($bank || isset($bank) || !empty($bank)):
                    $last_bank_transaction = $this->Bank_transaction_model->get_transaction_by_bank($bank['id']);
                    $last_bank_balance = $last_bank_transaction != NULL ? $last_bank_transaction[0]['balance'] : NULL;

                    $param['credit'] = $amount;
                    $param['balance'] = $last_bank_balance != Null ? $last_bank_balance + $amount : $bank['opening_balance'] + $amount;
                    $param['is_cash'] = 0;
                    $param['society_id'] = $bill['society_id'];
                    $param['bank_id'] = $bank['id'];
                    $param['narration'] = "Payment Received from ".$member['wing']." ".$member['flat_no']." Online";
                    $param['date'] = $payment_date;
                    $this->Bank_transaction_model->add_bank_transaction($param);

                    $data['current_balance'] = $last_bank_balance != Null ? $last_bank_balance + $amount : $bank['opening_balance'] + $amount;
                    $id = $bank['id'];
                    $b = $this->Bank_model->update_bank($id, $data);
                endif;

                $payment_params = array(
                    'payment_date' => $payment_date,
                    'narration' => 'Payment Received',
                    'credit' => $amount,
                    'member_id' => $member['id'],
                    'society_id' => $society['id'],
                    'balance' => $soft_balance,
                    'paid_by' => 'Online',
                    'cheque_no' => $txn_data['transaction_id'],
                    'bill_id' => $bill_id,
                    'bank_id' => isset($bank) ? $bank['id'] : '',
                    'depositor_bank' => '',
                    'receipt_id' => $receipt_no,
                    'is_cash' => 0
                );

                $payment_id = $this->Payment_model->add_payment($payment_params);

                $bill['txn_ref'] = $txn_data['transaction_id'];
                $bill['payment_id'] = $payment_id;
                $this->Bill_detail_model->update_bill_detail($bill_id, $bill);

                $bpm_logs = array(
                            'entity_id' => $payment_id,
                            'member_id' => $member['id'],
                            'amount' => $amount,
                            'type' => 'PAYMENT',
                            'dnt' => time(),
                        );
                $this->Member_model->insert_bpm_logs($bpm_logs);

                //Irrespective of balance and arrears update member balance
                $this->Member_model->insert_member_balance($bill['member_id'],$soft_balance);

                /*Add society member bill payment transaction logs*/
                $bpm_txn_logs = array(
                    'entity_id' => $payment_id,
                    'narration' => 'AMOUNTPAID',
                    'credit' => $amount,
                    'debit' => '',
                    'balance' => $soft_balance,
                    'dnt' => time(),
                    'member_id' => $member['id'],
                );

                $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);

                //logic for arrears and interest arrears calculation
                if($current_balance >= 0)
                {
                    return true;
                }
                else
                {
                    $soft_amount = $amount - $current_interest;
                    if(($amount - $current_interest) >= 0)
                    {
                        $new_interest = 0;
                    }
                    else
                    {
                        $new_interest = $current_interest - $amount;
                    }

                    if($soft_amount > 0)
                    {
                        if(($soft_amount - $current_arrears) >= 0)
                        {
                            $new_arrears = 0;
                        }
                        else
                        {
                            $new_arrears = $current_arrears - $soft_amount;
                        }
                    }
                    else
                    {
                        $new_arrears = $current_arrears;
                    }
                    $this->Member_model->insert_member_interest_arrears($bill['member_id'],$new_interest);
                    $this->Member_model->insert_member_arrears($bill['member_id'],$new_arrears);

                    // mark delayed payments
                    if($bill_due_date < $payment_date)
                    {
                        $this->Bill_detail_model->update_all_bill_delayed($member['id']);
                    }
                    $this->Bill_detail_model->update_old_bill_delayed($bill_id);

                    // update bill status
                    if($soft_balance >= 0)
                    {
                        $this->Bill_detail_model->update_all_bill_status($member['id'],$payment_id);
                    }
                    else
                    {
                        $this->Bill_detail_model->update_bill_partially_paid($member['id'],$amount,$payment_id);
                    }

                    $resp = '<html lang="en">';
                    $resp.= '<head>';
                    $resp.= '<title>Thank You Page</title>';
                    $resp.= '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css">';
                    $resp.= '</head>';
                    $resp.= '<body translate="no">';
                    $resp.= '<div class="jumbotron text-center">';
                    $resp.= '<h1 class="display-3">Thank You!</h1>';
                    $resp.= '<p class="lead">We are reviewing your payment. We will update you soon.</p>';
                    $resp.= '<hr>';
                    $resp.= '<p>';
                    $resp.= '<a href="https://msociety.paynet.co.in/payment_success">Go back to App</a>';
                    $resp.= '</p>';
                    $resp.= '</div>';
                    $resp.= '<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>';
                    $resp.= '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js"></script>           ';
                    $resp.= '</body>';
                    $resp.= '</html>';
                    echo $resp; return;
                }
            }
        }
        else
        {
            $resp = '<html lang="en">';
            $resp.= '<head>';
            $resp.= '<title>Thank You Page</title>';
            $resp.= '<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css">';
            $resp.= '</head>';
            $resp.= '<body translate="no">';
            $resp.= '<div class="jumbotron text-center">';
            $resp.= '<h1 class="display-3">Sorry!</h1>';
            $resp.= '<p class="lead">Your Payment was incomplete. You can go back and retry payment.</p>';
            $resp.= '<hr>';
            $resp.= '<p>';
            $resp.= '<a href="https://msociety.paynet.co.in/payment_fail">Go back to App</a>';
            $resp.= '</p>';
            $resp.= '</div>';
            $resp.= '<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>';
            $resp.= '<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js"></script>';
            $resp.= '</body>';
            $resp.= '</html>';
            echo $resp; return;
        }

    }
    
}
