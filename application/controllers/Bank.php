<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Bank extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        }
        $this->load->model('Bank_model');
        $this->load->model('Society_model');
        $this->load->model('Bank_transaction_model');

    } 

    /*
     * Listing of banks
     */
    function view_bank()
    {
        $data = array(
            'title' => "Societies"
        );
        $society_id = $this->uri->segment(3);
        $data['banks'] = $this->Bank_model->get_all_bank($society_id);
        $data['_view'] = 'bank/index';
        $this->load->view('societies/commercials/view_bank', $data);
    }

    /*
     * Adding a new bank
     */
    function add_bank()
    {   
        $data = array(
            'title' => "Societies"
        );
        $this->load->library('form_validation');

		$this->form_validation->set_rules('bank_name','Bank Name','required');
		$this->form_validation->set_rules('bank_address','Address','required');
		$this->form_validation->set_rules('bank_branch','Branch','required');
		$this->form_validation->set_rules('bank_ifsc','Ifsc','required');		
		$this->form_validation->set_rules('bank_opening_bal','Opening Balance','required');
        
        // if(!empty($this->input->post('bank_phone'))){
        //     $this->form_validation->set_rules('bank_phone','Phone','required|exact_length[10]');
        // }
        // if(!empty($this->input->post('bank_email'))){
        //     $this->form_validation->set_rules('bank_email','Email','required|valid_email');
        // }		
		
		if($this->form_validation->run())     
        {   
           
            $params = array(
				'society_id' => $this->input->post('society_id'),
				'bank_name' => $this->input->post('bank_name'),
				'address' => $this->input->post('bank_address'),
				'branch' => $this->input->post('bank_branch'),
				'ifsc' => $this->input->post('bank_ifsc'),
				'micr' => $this->input->post('bank_micr'),
				'ac_no' => $this->input->post('bank_acc_no'),			
				'phone' => $this->input->post('bank_phone'),
				'email' => $this->input->post('bank_email'),
				'updated_at' => time(),
				'opening_balance' => $this->input->post('bank_opening_bal'),
				'current_balance' => $this->input->post('bank_opening_bal'),
            );
            
            $this->db->trans_begin();
            $bank_id = $this->Bank_model->add_bank($params);
            if($bank_id!=''){
                $bt = array(
                        'society_id' => $this->input->post('society_id'),
                        'credit' => $this->input->post('bank_opening_bal'),
                        'narration' => 'Opening balance',
                        'is_cash' => 0,
                        'bank_id' => $bank_id,
                        'balance' => $this->input->post('bank_opening_bal'),
                        'date'=>date('Y')."-04-01 ".date("H:i:s"),
                        // 'date' => date('Y-m-d H:i:s'),
                    );
                
                $this->Bank_transaction_model->add_bank_transaction($bt); 
                //checking society accounting details present or not-03-03-2022
                $accounting_db_details=$this->Society_model->get_society_accounting_details($this->input->post('society_id'));
                if(!empty($accounting_db_details)){
                    $ladger_name=$this->input->post('bank_name')."-".$bank_id;

                    //bank entry in Credit -01-03-2021
                    $bank_ledger=$this->ledger->create_ledger($ladger_name,"bank",$this->input->post('society_id'),"sc_bank_acc_details",$this->input->post('bank_opening_bal'),8,"D",$bank_id);                
                    if($bank_ledger!=0){
                        $message['text'] = "Bank added successfully!!";
                    }else{
                        $message['text'] = "Bank added successfully but ledger not create!!";
                    }
                }else{
                    $message['text'] = "Bank added successfully!!";
                }
                
                $this->db->trans_commit();    
                $message['status'] = "Success";
                $this->session->set_flashdata('message', $message);
                redirect('bank/view'.'/'.$params['society_id']);
                            
            }
            else
            {
              
                $this->db->trans_rollback(); 
                $message['text'] = "Please Check Your Input!!";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                redirect('bank/view'.'/'.$params['society_id']);
            }
        }
        else
        {
            
            $data['_view'] = 'bank/add';
            $this->load->view('societies/commercials/add_bank', $data);
        }
    }  

    /*
     * Editing a bank
     */
    function edit_bank($society='',$id = '')
    {
        if($id == ''){
            $id = $this->input->post('bank_id');
        }
        $data = array(
            'title' => "Bank"
        );
        $society_id = $this->uri->segment(3);
        // check if the bank exists before trying to edit it
        $data['bank'] = $this->Bank_model->get_bank($id);
       
        if(isset($data['bank']['id']))
        {         
            $this->load->library('form_validation');
			$this->form_validation->set_rules('bank_name','Bank Name','required');
            $this->form_validation->set_rules('bank_address','Address','required');
            $this->form_validation->set_rules('bank_branch','Branch','required');
            $this->form_validation->set_rules('bank_ifsc','Ifsc','required');
            
            $this->form_validation->set_rules('bank_acc_no','Bank Account Number','required|integer|min_length[9]|max_length[18]');
            // if(!empty($this->input->post('bank_phone')))
            //     $this->form_validation->set_rules('bank_phone','Phone','required|integer|exact_length[10]');
            // if(!empty($this->input->post('bank_email')))
            //     $this->form_validation->set_rules('bank_email','Email','required|valid_email');
          
			if($this->form_validation->run())     
            {   
                
                $params = array(
                    'society_id' => $this->input->post('society_id'),
                    'bank_name' => $this->input->post('bank_name'),
                    'address' => $this->input->post('bank_address'),
                    'branch' => $this->input->post('bank_branch'),
                    'ifsc' => $this->input->post('bank_ifsc'),
                    'micr' => $this->input->post('bank_micr'),
                    'ac_no' => $this->input->post('bank_acc_no'),               
                    'phone' => $this->input->post('bank_phone'),
                    'email' => $this->input->post('bank_email'),              
                    'updated_at' => $this->input->post('updated_at'),
                   
                );
                $this->db->trans_begin();
                if($this->Bank_model->update_bank($id,$params)){
                    //checking society accounting details present or not-03-03-2022
                    $accounting_db_details=$this->Society_model->get_society_accounting_details($this->input->post('society_id'));
                    if(!empty($accounting_db_details)){
                        $bank_ledger_id=$this->ledger->get_ledger("bank","bank",$this->input->post('society_id'),"sc_bank_acc_details",$id);                    
                        if($bank_ledger_id==0):
                            $bank_ledger=$this->ledger->create_ledger("bank","bank",$this->input->post('society_id'),"sc_bank_acc_details",$data['bank']['opening_balance'],8,"D",$id);                           
                           
                            $message['text'] = "Bank updated successfully!!";
                        else:                            
                            $message['text'] = "Bank updated successfully but ledger already available!!";                           
                        endif;
                    }else{
                        $message['text'] = "Bank updated successfully!!";
                    }
                    $this->db->trans_commit(); 
                    $message['status'] = "Success";
                    $this->session->set_flashdata('message', $message);  
                    redirect('bank/view'.'/'.$params['society_id']);                      
                   
                }
                else{
                    $this->db->trans_rollback(); 
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                    redirect('bank/view'.'/'.$params['society_id']);
                }
            }
            else
            {				
                $data['_view'] = 'bank/edit';
                $this->load->view('societies/commercials/edit_bank', $data);
            }
        }
        else
            show_error('The bank you are trying to edit does not exist.');
    } 

    /*
     * Deleting bank
     */
    function remove($id)
    {
        $bank = $this->Bank_model->get_bank($id);
        $society_id = $this->uri->segment(4);
        // check if the bank exists before trying to delete it
        if(isset($bank['id']))
        {
            $this->Bank_model->delete_bank($id);
            redirect('bank/view'.'/'.$society_id);
        }
        else
            show_error('The bank you are trying to delete does not exist.');
    }

    function make_default($bankId, $societyId)
    {
        $id = $bankId;
        $society_id = $societyId;
        $bank = $this->Bank_model->get_bank($id);
        if(!empty($bank)):
            
            $banks = $this->Bank_model->get_all_default_bank($id ,$society_id);
            if(!empty($banks)):
                foreach($banks as $ban):
                    $unset_default = array(
                        'is_default' => 0,
                    );
                    $this->Bank_model->update_bank($ban['id'], $unset_default);
                endforeach;
            endif;

            $set_default = array(
                'is_default' => 1,
            );
            $this->Bank_model->update_bank($id, $set_default);
           
            $message['text'] = "Bank made default successfully!!";
            $message['status'] = "Success";
            $this->session->set_flashdata('message', $message);          
            echo "1";
        else:
            $message['text'] = "Please Check Your Input!!";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);           
            echo "1";
            
        endif;
    }

    public function cash_transfer()
    {
        $society_id = $this->input->post('society_id');
        $society = $this->Society_model->get_society($society_id);
        $amount = $this->input->post('amount');
        $bank_id = $this->input->post('bank');
        $description = $this->input->post('description');
        $payment_date = $this->input->post('payment_date');
        if(!empty($society_id) &&!empty($amount) &&!empty($bank_id) &&!empty($description)&&!empty($payment_date)){
            $payment_date=date("Y-m-d",strtotime($payment_date));           
            $cash = $this->cash_in_hand_transfer($society, $amount, $bank_id, $description, $payment_date);
            $bank_ledger_id=$this->ledger->get_ledger("bank","bank",$society_id,"sc_bank_acc_details",$bank_id);
            $cash_ledger_id=$this->ledger->get_ledger("Cash Book","Cash Book",$society_id,"sc_acc_details",0);
            
            if($cash == True):
                $this->ledger->accounting_double_entry($society_id,3,date('Y-m-d'),$description,$amount,$cash_ledger_id,$bank_ledger_id);
                $message['text'] = "Transferred to cash in hand successfully!!";
                $message['status'] = "Success";
                $this->session->set_flashdata('message', $message);
                return true;
                // exit(json_encode(array(
                //     'errorMsg' => 'Amount trasferred successfully to receiver bank.'
                // )));
            elseif($cash == False):
                $message['text'] = "Please Check Your Input!!";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                return true;
                // exit(json_encode(array(
                //     'errorMsg' => 'Transfer amount is greater than balance.Could not transfer the amount.'
                // )));
            endif;
        }else{
            $message['text'] = "Please Check Your Input!!";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
            return true;
        }
       
    }

    function cash_in_hand_transfer($society, $amount, $bank_id, $description, $payment_date)
    {
        $society = $society;
        $amount = $amount;
        $bank_id = $bank_id;
        $description = $description;
        $payment_date = $payment_date;

        $bank = $this->Bank_model->get_bank($bank_id);

        $last_cash_transaction = $this->Bank_transaction_model->get_transaction_by_society($society['id']);
        $last_cash_balance = $last_cash_transaction != NULL ? $last_cash_transaction[0]['balance'] : 0;

        $last_bank_transaction = $this->Bank_transaction_model->get_transaction_by_bank_arrear_society($bank_id, $society['id']);
        $last_bank_balance = $last_bank_transaction != NULL ? $last_bank_transaction[0]['balance'] : $bank['opening_balance'];

        if($amount < $last_bank_balance || $amount == $last_bank_balance):
            $cash = True;

            $params['debit'] = $amount;
            $params['balance'] = $last_bank_balance != NULL ? $last_bank_balance - $amount : $bank['opening_balance'] - $amount;
            $params['is_cash'] = 0;
            $params['bank_id'] = $bank_id;
            $params['society_id'] = $society['id'];
            $params['narration'] = "To Cash in hand - ". $description;
            $params['date'] = $payment_date;
            if($this->Bank_transaction_model->add_bank_transaction($params)):
                $param['credit'] = $amount;
                $param['balance'] = $last_cash_balance != NULL ? $last_cash_balance + $amount : $amount;
                $param['is_cash'] = 1;
                $param['bank_id'] = $bank_id;
                $param['society_id'] = $society['id'];
                $param['narration'] = "From Bank - ". $description;
                $param['date'] = $payment_date;
                if($this->Bank_transaction_model->add_bank_transaction($param)):
                    $bnk['current_balance'] = $last_bank_balance != NULL ? $last_bank_balance - $amount : $bank['opening_balance'] - $amount;
                    $id = $bank['id'];
                    $bk = $this->Bank_model->update_bank($id, $bnk);
                endif;
            endif;
            return $cash;
        else:
            return $cash = False;
        endif;
    }

    public function bank_to_transfer()
    {
        $society_id = $this->input->post('society_id');
        $society = $this->Society_model->get_society($society_id);
        $amount = $this->input->post('amoun');
        $sender_bank = $this->input->post('sender_bank');
        $reciever_bank = $this->input->post('reciever_bank');
        $description = $this->input->post('descriptio');
        $payment_date = $this->input->post('payment_date'); 
        
        if(!empty($society_id ) && !empty($amount) &&!empty($sender_bank) &&!empty($reciever_bank) &&!empty($description) &&!empty($payment_date)){
            $payment_date=date("Y-m-d",strtotime($payment_date));
            
            $trans = $this->bank_transfer($society, $amount, $sender_bank, $reciever_bank, $description, $payment_date);

            if($trans == True):
                $sender_ledger_id=$this->ledger->get_ledger("bank","bank",$society_id,"sc_bank_acc_details",$sender_bank);
    
                $reciever_ledger_id=$this->ledger->get_ledger("bank","bank",$society_id,"sc_bank_acc_details",$reciever_bank);
    
                $this->ledger->accounting_double_entry($society_id,3,date('Y-m-d'),$description,$amount,$reciever_ledger_id,$sender_ledger_id);
                
                $message['text'] = "Transferred to bank successfully!!";
                $message['status'] = "Success";
                $this->session->set_flashdata('message', $message);
                echo json_encode(true);
               
            elseif($trans == False):
                $message['text'] = "Please Check Your Input!!";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                echo json_encode(false);
                
            endif; 
        }else{
            $message['text'] = "Please Check Your Input!!";
            $message['status'] = "Fail";
            $this->session->set_flashdata('message', $message);
            echo json_encode(false);
        }
		
       
    }

    function bank_transfer($society, $amount, $sender_bank, $reciever_bank, $description, $payment_date)
    {
        $society = $society;
        $amount = $amount;
        $sender_bank_id = $sender_bank;
        $reciever_bank_id = $reciever_bank;
        $payment_date = $payment_date;
        $description = $description;

        $s_bank = $this->Bank_model->get_bank($sender_bank_id);
        $r_bank = $this->Bank_model->get_bank($reciever_bank_id);

        if($sender_bank_id == $reciever_bank_id):
            return False;
        endif;

        // echo "<pre>";print_r($society);die;
        $last_sender_transaction = $this->Bank_transaction_model->get_transaction_by_bank_society($sender_bank_id, $society['id']);
        $last_sender_balance = $last_sender_transaction != NULL ? $last_sender_transaction[0]['balance'] : $s_bank['opening_balance'];

        $last_reciever_transaction = $this->Bank_transaction_model->get_transaction_by_bank_society($reciever_bank_id, $society['id']);
        $last_reciever_balance = $last_reciever_transaction != NULL ? $last_reciever_transaction[0]['balance'] : $r_bank['opening_balance'];
        if($amount < $last_sender_balance || $amount == $last_sender_balance):
            $exp = True;
            $sender_params['debit'] = $amount;
            $sender_params['balance'] = $last_sender_balance != NULL ? $last_sender_balance - $amount : $s_bank['opening_balance'] - $amount;
            $sender_params['is_cash'] = 0;
            $sender_params['bank_id'] = $s_bank['id'];
            $sender_params['society_id'] = $society['id'];
            $sender_params['narration'] = "Transfer to"." ".$s_bank['bank_name']." ".$description;
            $sender_params['date'] = $payment_date;
           
            if($this->Bank_transaction_model->add_bank_transaction($sender_params)):
                $sbank['current_balance'] = $last_sender_balance != NULL ? $last_sender_balance - $amount : $s_bank['opening_balance'] - $amount;
                $id = $s_bank['id'];
                $sb = $this->Bank_model->update_bank($id, $sbank);

                $param['credit'] = $amount;
                $param['balance'] = $last_reciever_balance != NULL ? $last_reciever_balance + $amount : $r_bank['opening_balance'] + $amount;
                $param['is_cash'] = 0;
                $param['society_id'] = $society['id'];
                $param['bank_id'] = $r_bank['id'];
                $param['narration'] = "Transfer from"." ".$s_bank['bank_name']." ".$description;
                $param['date'] = $payment_date;
                if($this->Bank_transaction_model->add_bank_transaction($param)):
                    $rbank['current_balance'] = $last_reciever_balance != NULL ? $last_reciever_balance + $amount : $r_bank['opening_balance'] + $amount;
                    $id = $r_bank['id'];
                    $rb = $this->Bank_model->update_bank($id, $rbank);
                endif;
            endif;
            return $exp;
        else:
            return $exp = False;
        endif;
    }

    function bank_transfer_bak($society, $amount, $sender_bank, $reciever_bank, $description, $payment_date)
    {
        $society = $society;
        $amount = $amount;
        $sender_bank_id = $sender_bank;
        $reciever_bank_id = $reciever_bank;
        $payment_date = $payment_date;
        $description = $description;

        $s_bank = $this->Bank_model->get_bank($sender_bank_id);
        $r_bank = $this->Bank_model->get_bank($reciever_bank_id);

        if($sender_bank_id == $reciever_bank_id):
            return False;
        endif;
        $last_sender_transaction = $this->Bank_transaction_model->get_transaction_by_bank_society($sender_bank_id, $society['id']);
        $last_sender_balance = $last_sender_transaction != NULL ? $last_sender_transaction[0]['balance'] : $s_bank['opening_balance'];

        $last_reciever_transaction = $this->Bank_transaction_model->get_transaction_by_bank_society($reciever_bank_id, $society['id']);
        $last_reciever_balance = $last_reciever_transaction != NULL ? $last_reciever_transaction[0]['balance'] : $r_bank['opening_balance'];
        if($amount < $last_sender_balance || $amount == $last_sender_balance):
            $exp = True;
            $params['debit'] = $amount;
            $params['balance'] = $last_sender_balance != NULL ? $last_sender_balance - $amount : $s_bank['opening_balance'] - $amount;
            $params['is_cash'] = 0;
            $params['bank_id'] = $s_bank['id'];
            $params['society_id'] = $society['id'];
            $params['narration'] = "Transfer to"." ".$s_bank['bank_name']." ".$description;
            $params['date'] = $payment_date;
            if($this->Bank_transaction_model->add_bank_transaction($params)):
                $sbank['current_balance'] = $last_sender_balance != NULL ? $last_sender_balance - $amount : $s_bank['opening_balance'] - $amount;
                $id = $s_bank['id'];
                $sb = $this->Bank_model->update_bank($id, $sbank);
                $param['credit'] = $amount;
                $param['balance'] = $last_reciever_balance != NULL ? $last_reciever_balance + $amount : $r_bank['opening_balance'] + $amount;
                $param['is_cash'] = 0;
                $param['society_id'] = $society['id'];
                $param['bank_id'] = $r_bank['id'];
                $param['narration'] = "Transfer from"." ".$s_bank['bank_name']." ".$description;
                $param['date'] = $payment_date;
                if($this->Bank_transaction_model->add_bank_transaction($param)):
                    $rbank['current_balance'] = $last_reciever_balance != NULL ? $last_reciever_balance + $amount : $r_bank['opening_balance'] + $amount;
                    $id = $r_bank['id'];
                    $rb = $this->Bank_model->update_bank($id, $rbank);
                endif;
            endif;
            return $exp;
        else:
            return $exp = False;
        endif;
    }

    
}
