<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Flat_type extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        }
        $this->load->model('Flat_type_model');
        $this->load->model('Member_model');
        $this->load->model('Billing_head_model');
        $this->load->model('Society_model');
		
    } 

    /*
     * Listing of flat_types
     */
    function view_flat_types()
    {
        $data = array(
            'title' => "Flat Types"
        );
        $society_id = $this->uri->segment(3);
        $data['flat_types'] = $this->Flat_type_model->get_all_flat_type($society_id);
        
        $data['_view'] = 'flat_type/index';
        $this->load->view('societies/society_actions/view_flat_types',$data);
    }





    /*
     * Adding a new flat_type
     */
    function add_flat_types()
    {   
        $data = array(
            'title' => "Add Flat Types"
        );
        $this->load->library('form_validation');

		$this->form_validation->set_rules('flat_type','Name','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'society_id' => $this->input->post('society_id'),
				'name' => $this->input->post('flat_type'),
				'created_at' => date('Y-m-d h:i:s'),
            );
            
            if($flat_type_id = $this->Flat_type_model->add_flat_type($params)):
                $message['text'] = "Flat Type Added successfully!!";
                $message['status'] = "Success";
                $this->session->set_flashdata('message', $message);
                redirect('flat_types/view'.'/'.$params['society_id']);
            else:
                $message['text'] = "Please Check Your Input!!";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                redirect('flat_types/view'.'/'.$params['society_id']);
            endif;
        }
        else
        {
			
			$data['all_societies'] = $this->Society_model->get_all_societies();
            
            $data['_view'] = 'flat_type/add';
            $this->load->view('societies/society_actions/add_flat_types',$data);
        }
    }  

    /*
     * Editing a flat_type
     */
    function edit_flat_type($society_id='',$id = '')
    {  
        
        if($id == ''){
            $id = $this->input->post('flat_type_id');
        }
        $data = array(
            'title' => "Edit Flat Types"
        );
        // check if the flat_type exists before trying to edit it
        $data['flat_type'] = $this->Flat_type_model->get_flat_type($id);
        
        if(isset($data['flat_type']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('flat_type','Name','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'society_id' => $this->input->post('society_id'),
					'name' => $this->input->post('flat_type'),
					'created_at' => $this->input->post('created_at'),
					'updated_at' => $this->input->post('updated_at'),
                );

                if($this->Flat_type_model->update_flat_type($id,$params)):
                    $message['text'] = "Flat Type Updated successfully!!";
                    $message['status'] = "Success";
                    $this->session->set_flashdata('message', $message);
                    redirect('flat_types/view'.'/'.$params['society_id']);
                else:
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                    redirect('flat_types/view'.'/'.$params['society_id']);
                endif;
            }
            else
            {
                
				$data['all_societies'] = $this->Society_model->get_all_societies();

                $data['_view'] = 'flat_type/edit';
                $this->load->view('societies/society_actions/edit_flat_types',$data);
            }
        }
        else
            show_error('The flat_type you are trying to edit does not exist.');
    } 

    // public function flat_types_details() {
    //     $data = array(
    //         'title' => "Societies"
    //     );
    //     $this->load->view('societies/society_actions/flat_types_details', $data);
    // }

    // public function add_billing_heads() {
    //     $data = array(
    //         'title' => "Societies"
    //     );
    //     $this->load->view('societies/society_actions/add_billing_heads', $data);
    // }

    /*
     * Deleting flat_type
     */
    function remove($id)
    {
        $flat_type = $this->Flat_type_model->get_flat_type($id);

        // check if the flat_type exists before trying to delete it
        if(isset($flat_type['id']))
        {
            $this->Flat_type_model->delete_flat_type($id);
            redirect('flat_types/view');
        }
        else
            show_error('The flat_type you are trying to delete does not exist.');
    }



    function import_flat_type(){

        $society_id = $this->uri->segment(3);
        if(is_uploaded_file($_FILES['flat_type_file']['tmp_name']))
        {		
            // Load CSV reader library
            $this->load->library('CSVReader');
            // Parse data from CSV file
            $csvData = $this->csvreader->parse_csv($_FILES['flat_type_file']['tmp_name']);		
           
            $message=array();      
            $flat_wing_error = 0;     
            // Insert/update CSV data into database
            if(!empty($csvData))
            {
				            
                foreach($csvData as $x => $row)
                {					
                    if(empty($row["member-wing"])||empty($row["member-flat_no"]) ){
                        $message['text'] = "Mamber wing is not valid";
                        $flat_wing_error++;
                    }                   
                }

                if($flat_wing_error > 0)
                {                    
                    $flat_wing_error = $flat_wing_error;
                    $message['status'] = "Fail";  
                             		
                    $this->session->set_flashdata('message', $message);
                    $val="1";
                    echo $val;  
                    exit;          
                }
                else                
                {
                   
                    $bill_head_error_count=0;
                    $bill_head_name_array=[];//bill head available in master
                    $bill_head_name_column=[];//use for wrong column name add
                    foreach(array_keys($csvData[1]) as $x => $row ){
                        if(strpos($row, 'billhead') !== false) {
                            $bill_head_split=explode("-",$row);
                            $get_flat_type_bill_head_details=$this->Billing_head_model->check_billing_head_in_master(trim($bill_head_split[1]));
                            if(!$get_flat_type_bill_head_details){
                                $bill_head_error_count=1;
                                array_push($bill_head_name_array,$bill_head_split[1]);
                            }
                        }else if(strpos($row, 'Billhead') !== false) {
                            $bill_head_error_count=2;
                            array_push($bill_head_name_column,$row);
                        }
                    }

                    if($bill_head_error_count>0){
                        if($bill_head_error_count==1){
                            $message['status'] = "Fail";
                            $message['text'] ="Bill Head - ".implode(",",$bill_head_name_array)." Missing";
                            $this->session->set_flashdata('message', $message);
                            $val="1";
                            echo $val;  
                            exit; 
                        }else{
                            $message['status'] = "Fail";
                            $message['text'] ="Add Proper Bill Head Name -".implode(",",$bill_head_name_column);
                            $this->session->set_flashdata('message', $message);
                            $val="1";
                            echo $val;  
                            exit; 
                        } 
                       
                    }else{
                       
                        foreach(array_keys($csvData[1]) as $x => $row){                            
                            if(strpos($row,'billhead') !== false) {
                                $bill_head_split=explode("-",$row);
                                                            
                                //add bill head ledger in accounting
                                $accounting_db_details=$this->Society_model->get_society_accounting_details($society_id); 
                                if(!empty($accounting_db_details)){
                                    $bill_head_ledger_id=$this->ledger->get_ledger($bill_head_split[1],"Bill Head",$society_id,"sc_bill_head_accounting_details");
                                    if($bill_head_ledger_id==0){
                                        $get_group_id=$this->Billing_head_model->get_bill_group_id(trim($bill_head_split[1]));   
                                        $dc="C";
                                        $bill_head_ledger_id=$this->ledger->create_ledger(trim($bill_head_split[1]),"Bill Head",$society_id,"sc_bill_head_accounting_details",0,$get_group_id,$dc,0);
                                    }                                              
                                }  

                            }
                        }
                       
                        $insert_bill_head=array(); 
                        $update_bill_head=array();
                        foreach($csvData as $x => $row)
                        {  
                                           
                            $flat_category_name=$row["member-wing"]."-".$row["member-flat_no"];
                            $get_flat_type_category=$this->Flat_type_model->get_single_flat_types_by_name($flat_category_name,$society_id);                       

                            if(!empty($get_flat_type_category)){                            
                                $flat_type_id=$get_flat_type_category->id;
                            }else{
                            
                                //assign flat catgeroty every member
                                $insert_flat_type_category=array(
                                    'society_id' => $society_id,
                                    'name' =>$flat_category_name,
                                    'created_at' => date('Y-m-d h:i:s'),
                                );
                                $flat_type_id = $this->Flat_type_model->add_flat_type($insert_flat_type_category); 
                                
                                //get member details by flat and wing
                                $get_flat_details=$this->Member_model->get_member_by_wingflat($row['member-wing'],$row['member-flat_no'],$society_id);
                                
                                if(isset($get_flat_details[0]) && !empty($get_flat_details[0])){
                                    $member_param=[
                                        "flat_type_id"=>$flat_type_id,
                                    ];
                                    $this->Member_model->update_member($get_flat_details[0]["id"],$member_param);
                                }                                
                            }

                            //add all bill head in society               
                            foreach(array_keys($row) as $bill_key => $bill_value ){

                                if(strpos($bill_value, 'billhead') !== false) {
                                    $bill_head_split=explode("-",$bill_value);
                                    //check society flat type category bill head available or not
                                    $get_flat_type_bill_head_details=$this->Billing_head_model->get_bill_details_by_name_flat_type_and_society_id(trim($bill_head_split[1]),$flat_type_id,$society_id);                                
                                    if(!empty($get_flat_type_bill_head_details)){
                                        if($get_flat_type_bill_head_details["amount"]!=$row[$bill_value]){
                                                                            
                                            array_push($update_bill_head,array("id"=>$get_flat_type_bill_head_details["id"],"amount"=>$row[$bill_value] != '' ? $row[$bill_value] : 0));
                                        
                                        }
                                    
                                    }else{
                                    
                                        //get details of master bill head
                                        $get_bill_head_details=$this->Billing_head_model->get_master_billing_head_details_by_name(trim($bill_head_split[1]));        
                                        if($get_bill_head_details){          
                                            $a=array("society_id"=>$society_id,"flat_type_id"=>$flat_type_id,"name"=>$bill_head_split[1],"amount"=>$row[$bill_value] != '' ? $row[$bill_value] : 0 ,'created_at' => date('Y-m-d h:i:s'));                                  
                                            array_push($insert_bill_head,$a);
                                            
                                        } 
                                    }
                                }           
                            }

                            
                        }
                    
                        if(!empty($insert_bill_head)){
                            $this->db->insert_batch('billing_heads', $insert_bill_head);
                            $text="Flat type billhead created successfully ";
                        }

                        if(!empty($update_bill_head)){
                            $this->db->update_batch('billing_heads',$update_bill_head,'id');                     
                            $text="Flat type  billhead updated successfully";
                        }
                    
                        $message['status'] = "Success";
                        $message['text'] =$text ;
                        $this->session->set_flashdata('message', $message);
                        $val="1";
                        echo $val;  
                        exit; 
                        // redirect('flat_types/view'.'/'.$society_id);
                    }                  
                    
                }              
               
            }
        }

    }

    public function exportCSV()
    {
        $society_id = $this->uri->segment(3);
        // get data
        $members = $this->Member_model->get_all_members($society_id);

        if(!empty($members)){
            ob_clean();        
            ob_start();
            // file creation
            $file = fopen('php://output', 'w');
    
            $header = array("member-wing","member-flat_no","billhead-Maintenance Charges","billhead-Sinking Fund","billhead-Repair Fund","billhead-Non Occupancy Charges","billhead-Water charges", "billhead-Fine","billhead-Encroachment of common Passage of Society","billhead-Charge for under ground tank","billhead-Cheque Return Charges","billhead-Advertising Board","billhead-Other Charges","billhead-ATM  CHARGES");
            fputcsv($file, $header); 
            foreach ($members as $line){
                fputcsv($file,array($line['wing'],strval($line['flat_no']),0,0,0,0,0,0,0,0,0,0,0,0));
            }
            $filename = 'flat_category_'.date('Ymd').'.csv';
            header("Content-Description: File Transfer");
            header("Content-Disposition: attachment; filename=$filename");
            header("Content-Type: application/csv;");
            fclose($file);
            exit;
        }else{
            show_error('First upload add flat.');
        }
       
        
    }
    
}
