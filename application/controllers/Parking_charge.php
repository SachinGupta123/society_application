<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Parking_charge extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        }
        $this->load->model('Parking_charge_model');
        $this->load->model('Society_model');
    } 

    /*
     * Listing of parking_charges
     */
    function view_parking_charges()
    {
        $data = array(
            'title' => "Societies"
        );
        $society_id = $this->uri->segment(3);
        $data['parking_charges'] = $a=$this->Parking_charge_model->get_all_parking_charge($society_id);
       
        $data['_view'] = 'parking_charge/index';
        $this->load->view('societies/society_actions/view_parking_charges', $data);
    } 

    /*
     * Adding a new parking_charge
     */
    function add_parking_charges()
    {   
        $data = array( 'title' => "Societies" );
        $this->load->library('form_validation');
		$this->form_validation->set_rules('member_two_wheeler','Member Two Wheeler','required|integer');
		$this->form_validation->set_rules('tenant_two_wheeler','Tenant Two Wheeler','required|integer');		
		if($this->form_validation->run())     
        {   
            $society_id=$this->input->post('society_id');
            $parking_details_exit=$this->Parking_charge_model->get_all_parking_charge($society_id);    
                   
            if(empty($parking_details_exit)){
                
                $params = array(
                    'society_id' => $this->input->post('society_id'),
                    'member_two_wheeler' => $this->input->post('member_two_wheeler'),
                    'tenant_two_wheeler' => $this->input->post('tenant_two_wheeler'),
                    'member_four_wheeler' => $this->input->post('member_four_wheeler'),
                    'tenant_four_wheeler' => $this->input->post('tenant_four_wheeler'),
                    'created_at' => date('Y-m-d h:i:s'),
                    // 'updated_at' => $this->input->post('updated_at'),
                );     
                $this->db->trans_begin();
                $parking_charge_id = $this->Parking_charge_model->add_parking_charge($params);
                if($parking_charge_id!=''){               
                    $society_id=$this->input->post('society_id');

                    //checking society accounting details present or not
                    $accounting_db_details=$this->Society_model->get_society_accounting_details($this->input->post('society_id'));
                    if(!empty($accounting_db_details)){ 
                        $parking_ledger_id=$this->ledger->get_ledger("Parking Charge","Parking Charge",$this->input->post('society_id'),"sc_acc_details");
                        if($parking_ledger_id==0){
                            $group_id=$this->ledger->get_group_id("Member Contribution");
                            $parking_ledger=$this->ledger->create_ledger("Parking Charge","Parking Charge",$society_id,"sc_acc_details",0,$group_id,"C");
                        }                        
                        $this->db->trans_commit();
                        $message['text'] = "Parking Charges added successfully!!";
                        $message['status'] = "Success";
                        $this->session->set_flashdata('message', $message);
                        redirect('parking_charges/view'.'/'.$params['society_id']);
                    }else{
                        $this->db->trans_commit();
                        $message['text'] = "Parking Charges added successfully!!";
                        $message['status'] = "Success";
                        $this->session->set_flashdata('message', $message);
                        redirect('parking_charges/view'.'/'.$params['society_id']);
                    }
                
                
                }else{              
                    $this->db->trans_rollback();
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                    redirect('parking_charges/view'.'/'.$params['society_id']);
                }
            }else{
                
                $message['text'] = "Parking Charge already available";
                $message['status'] = "Fail";
                $this->session->set_flashdata('message', $message);
                redirect('parking_charges/view'.'/'.$society_id);
            }                  
            
        }
        else
        {			         
            $data['_view'] = 'parking_charge/add';
            $this->load->view('societies/society_actions/add_parking_charges', $data);
        }
    }  

    /*
     * Editing a parking_charge
     */
    function edit_parking_charges($society_id = '', $id = '')
    {   
        if($id == ''){
            $id = $this->input->post('parking_charges_id');
        }
        $data = array(
            'title' => "Societies"
        );
        // check if the parking_charge exists before trying to edit it
        $data['parking_charge'] = $this->Parking_charge_model->get_parking_charge($id);
       
        if(isset($data['parking_charge']['id']))
        {
            $this->load->library('form_validation');
			$this->form_validation->set_rules('member_two_wheeler','Member Two Wheeler','required');
			$this->form_validation->set_rules('tenant_two_wheeler','Tenant Two Wheeler','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'society_id' => $this->input->post('society_id'),
					'member_two_wheeler' => $this->input->post('member_two_wheeler'),
					'tenant_two_wheeler' => $this->input->post('tenant_two_wheeler'),
					'member_four_wheeler' => $this->input->post('member_four_wheeler'),
					'tenant_four_wheeler' => $this->input->post('tenant_four_wheeler'),
					// 'created_at' => $this->input->post('created_at'),
					'updated_at' => date('Y-m-d H:m:s')
                );
                
                $this->db->trans_begin();
                if($this->Parking_charge_model->update_parking_charge($id,$params)){
                    //checking society accounting details present or not
		            $accounting_db_details=$this->Society_model->get_society_accounting_details($this->input->post('society_id'));
		            if(!empty($accounting_db_details)){ 
                        $parking_ledger_id=$this->ledger->get_ledger("Parking Charge","Parking Charge",$params['society_id'],"sc_acc_details");
                   
                        if($parking_ledger_id==0){
                            // $group_id=18
                            $group_id=$this->ledger->get_group_id("Member Contribution");
                            $parking_ledger=$this->ledger->create_ledger("Parking Charge","Parking Charge",$this->input->post('society_id'),"sc_acc_details",0,$group_id,"C");
                        }                     
                        
                        $this->db->trans_commit();
                        $message['text'] = "Parking Charges Update successfully!!";
                        $message['status'] = "Success";
                        $this->session->set_flashdata('message', $message);
                        redirect('parking_charges/view'.'/'.$params['society_id']);
                    }else{
                        $this->db->trans_commit();
                        $message['text'] = "Parking Charges Update successfully!!";
                        $message['status'] = "Success";
                        $this->session->set_flashdata('message', $message);
                        redirect('parking_charges/view'.'/'.$params['society_id']);
                    }                
                    
                }
                else{
                    $this->db->trans_rollback(); 
                    redirect('parking_charges/view'.'/'.$params['society_id']);
                    $message['text'] = "Please Check Your Input!!";
                    $message['status'] = "Fail";
                    $this->session->set_flashdata('message', $message);
                }
            }
            else
            {
				
				$data['all_societies'] = $this->Society_model->get_all_societies();

                $data['_view'] = 'parking_charge/edit';
                $this->load->view('societies/society_actions/edit_parking_charges',$data);
            }
        }
        else
            show_error('The parking_charge you are trying to edit does not exist.');
    } 

    /*
     * Deleting parking_charge
     */
    function remove($id)
    {
        $parking_charge = $this->Parking_charge_model->get_parking_charge($id);
        // check if the parking_charge exists before trying to delete it
        if(isset($parking_charge['id']) && !empty($parking_charge['id']))
        {   
            $parking_ledger_id=$this->ledger->get_ledger("Parking Charge","Parking Charge",$parking_charge['society_id'],"sc_acc_details");
           
            $parking_ledger_delete=$this->ledger->ledger_delete($parking_charge['society_id'],$parking_ledger_id); 
            if($parking_ledger_delete=="0"){
                $this->ledger->msociety_ledger_id_update($parking_charge['society_id'],array("parking_ledger_id"=>0),'sc_acc_details');
                $this->Parking_charge_model->delete_parking_charge($id);
                echo "0";
            }else{
                echo "1";
            }       
            
          
        }
        else{
            echo "2";
        }
            // show_error('The parking_charge you are trying to delete does not exist.');
    }
    
}
