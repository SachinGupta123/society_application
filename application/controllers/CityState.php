<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class CityState extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        }
        
        $this->load->model('CityState_model');
    } 

    /*
     * Listing of expenses
     */
    function view_state()
    {
        $data = array();
        $states = $this->CityState_model->get_all_state();
        $data['title'] = "States";
        $data['states'] = $states;
        $data['_view'] = 'states/index';
        $this->load->view('citystate/view_state', $data);
    }

    /*
     * Adding a new expense
     */
    function add_state()
    {
         $data = array(
            'title' => "State"
        );
        $this->load->library('form_validation');

		$this->form_validation->set_rules('state_name','State Name','required');
		
		if($this->form_validation->run())     
        {
            $param = array(
                'name' => $this->input->post('state_name'),
            );
            $expense_id = $this->CityState_model->add_state($param);
            $message['status'] = 'Success';
            $message['text'] = 'State added successfully!!';
            $this->session->set_flashdata('message', $message);
            redirect('cityState/view_state');
        }
        else
        {   
            $data['_view'] = 'state/add';
            $this->load->view('citystate/add_state', $data);
        }
    }  

    /*
     * Editing a expense
     */
    function edit_state($id)
    {
         $data = array(
            'title' => "State"
        ); 
        // check if the expense exists before trying to edit it
        $data['state'] = $this->CityState_model->get_state($id);
        
        if(isset($data['state']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('state_name','State Name','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'name' => $this->input->post('state_name'),
                );
                $message['status'] = 'Success';
                $message['text'] = 'State Edit successfully!!';
                $this->session->set_flashdata('message', $message);
                $this->CityState_model->update_state($id,$params);            
                redirect('cityState/view_state');
            }
            else
            {
                $data['_view'] = 'citystate/edit';
                $this->load->view('citystate/edit_state', $data);
            }
        }
        else
            show_error('The state you are trying to edit does not exist.');
    } 

    /*
     * Deleting expense
     */
    function remove_state($id)
    {
        $state = $this->CityState_model->get_state($id);

        // check if the expense exists before trying to delete it
        if(isset($state['id']))
        {
            $state_exit = $this->CityState_model->check_state_exit_society($state['id']);
            if(empty($state_exit)){
                $params['is_deleted'] = 1;
                $this->CityState_model->update_state($id,$params);
                echo "1";
            }else{
                echo "0";
            }              
          
        }
        else
            show_error('The expense you are trying to delete does not exist.');
    }

    // City

    function view_city()
    {
        $data = array();
        $cities = $this->CityState_model->get_all_city();
        // echo"<pre>";print_r($cities);die;
        $data['title'] = "City";
        $data['cities'] = $cities;
        $data['_view'] = 'citystate/view_city';
        $this->load->view('citystate/view_city', $data);
    }

    /*
     * Adding a new expense
     */
    function add_city()
    {
         $data = array(
            'title' => "City"
        );
        $this->load->library('form_validation');

		$this->form_validation->set_rules('city_name','Name','required');
		$this->form_validation->set_rules('state','State','required');
		
		if($this->form_validation->run()===True)     
        {
            $city = $this->CityState_model->get_city_state($this->input->post('state'),$this->input->post('city_name'));

            if(empty($city)){
                $param = array(
                    'city_name' => $this->input->post('city_name'),
                    'state_id' => $this->input->post('state'),
                );
                $city_id = $this->CityState_model->add_city($param);
                $message['status'] = 'Success';
                $message['text'] = 'City added successfully!!';
                $this->session->set_flashdata('message', $message);
                redirect('cityState/view_city');
            }else{
                $message['status'] = 'Fail';
                $message['text'] = 'Dublicate entry not allowed!!';
                $this->session->set_flashdata('message', $message);                
                redirect("CityState/add_city");
            }
            
        }
        else
        {
			$data['states'] = $this->CityState_model->get_all_state();
            
            $data['_view'] = 'citystate/add_city';
            $this->load->view('citystate/add_city', $data);
        }
    }  

    /*
     * Editing a expense
     */
    function edit_city($id)
    {
        $data = array(
            'title' => "State"
        ); 
        // check if the expense exists before trying to edit it
        $data['city'] = $this->CityState_model->get_city($id);
        
        if(isset($data['city']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('city_name','Name','required');
			$this->form_validation->set_rules('state','State','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'city_name' => $this->input->post('city_name'),
					'state_id' => $this->input->post('state'),
                );

                $this->CityState_model->update_city($id,$params); 
                $message['status'] = 'Success';
                $message['text'] = 'City Update successfully!!';
                $this->session->set_flashdata('message', $message);           
                redirect('cityState/view_city');
            }
            else
            {
                $data['states'] = $this->CityState_model->get_all_state();
                $data['_view'] = 'citystate/edit_city';
                $this->load->view('citystate/edit_city', $data);
            }
        }
        else
            show_error('The state you are trying to edit does not exist.');
    } 

    /*
     * Deleting expense
     */
    function remove_city($id)
    {
        $city = $this->CityState_model->get_city($id);

        // check if the expense exists before trying to delete it
        if(isset($city['id']))
        {
            $params['is_deleted'] = 1;
            $this->CityState_model->update_city($id,$params);   
            redirect('cityState/view_city');
        }
        else
            show_error('The expense you are trying to delete does not exist.');
    }

    function get_all_city_by_state()
    {
        $state_id = $this->input->post("state_id");
        $get_city=$this->CityState_model->get_all_city_by_state($state_id);  
        echo json_encode($get_city);
    }
    
}
