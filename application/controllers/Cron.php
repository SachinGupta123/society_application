<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Cron extends CI_Controller
{
    function __construct()
    {
        parent::__construct();        
        $this->load->model('Bill_detail_model');
        $this->load->model('Society_model');
        $this->load->model('Member_model');
        $this->load->model('Bank_model');
        $this->load->model('Bank_transaction_model');
        $this->load->model('Parking_charge_model');
        $this->load->model('Payment_model');
        $this->load->model('Flat_type_model');
        $this->load->model('Billing_head_model');
    } 

   

   
    /*
      author- Sachhidanand gupta
      method -auto generate bill 28-05-2022
    */
    public function auto_generate_bill(){
      
        $get_day=date('j');//get current date of month       
        $society_details = $this->Bill_detail_model->get_auto_society($get_day);
        
        foreach($society_details as $list){

            $get_due_day=$list->due_day;
            $bill_date=date("Y-m-d");//get current date
            $due_date=date('Y-m-d', strtotime('+'.$get_due_day.' days'));// current date add getting due day store in db   

            //check member available or not in society for bill generate     
            $members = $this->Member_model->get_all_members($list->id);
            if(!empty($members)){
                // if bill interest is calculated after n number of months on bill being unpaid
               // get number of relaxation months on bill payment
               // calculate due date as per n th month
               if($list->interest_on_bill_frequency == 1)
               {
                   $frequency = $list->interest_bill_frequency;
                   $due_due = date('Y-m-d', strtotime($bill_date.'+'.$frequency.' months'));
                   $bill_due = date('Y-m-d', strtotime($due_due.'-1 days'));
               }
               // if bill interest is calculated every month on bill being unpaid
               // take selected due date on form as due date
               else
               {
                   // $bill_due = $this->input->post('due_date');
                   $bill_due = $due_date;//25-04-2022 sachhidanad
               }

               $bill_summary = "Bill Generate";

               $month = date('m',strtotime($bill_date));
               $year = date('Y',strtotime($bill_date));

               $bank = $this->Bank_model->get_all_bank($list->id);

               $parking_charges = $this->Parking_charge_model->get_all_parking_charge($list->id);
               $noc_charges = $this->Society_model->get_noc_charge($list->id);
               
               $bill_no = $this->Billing_head_model->get_last_bill_no($list->id);


               $current_month = date('Y-m-d',strtotime($year."-".$month."-"."1"));
           
               $check_bill = $this->Bill_detail_model->get_all_bill_by_month_society_id($list->id,$current_month);
            //    print_r($check_bill);die();
               $interest_rate = $list->interest_rate;
               $interest_span = $list->interest_span;
               $interest_type = $list->interest_type;

               $return=0;

               foreach($members as $member){

                    if($check_bill != NULL OR empty($bank) OR empty($parking_charges) OR empty($noc_charges) or empty($member['flat_type_id'])){
                        if($check_bill != NULL)
                        {
                          
                            $return=1;
                            break;
                        }
                        elseif(empty($bank))
                        {
                            
                            $return=1;
                            break;
                        }
                        elseif(empty($parking_charges))
                        {
                        
                            $return=1;
                            break;
                        }
                        elseif(empty($noc_charges))
                        {
                        
                            $return=1;
                            break;
                        }                       

                        elseif(empty($member['flat_type_id']))
                        {  
                            
                            $return=1;
                            break;
                            
                        }                  
                        else
                        {
                        
                            $return=1;
                            break;
                        }
                    
                    }
                }
                foreach($members as $member){
                    if(!empty($member['flat_type_id']))
                    {
                        $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                        if(empty($bill_headings)){
                            
                            $return=1;
                            break;
                        }
                        
                    }
                }
                
                if($return==0){
                    foreach ($members as $member) {
                   
                        $bill_no++;
                        $bill_headings = $this->Billing_head_model->get_all_billing_heads($member['flat_type_id']);
                        $bill_head_calc = calc_bill_heads($bill_headings,$member['flat_area'],$member['id']);
                        
                        $bill_head_calc['Parking Charges'] = round(calc_parking_charges($member,$parking_charges));
                        if($member['tenant'] == 1){
                            $bill_head_calc['NOC Charges'] = round(calc_noc_charges($noc_charges,$member['flat_area']));
                        } else {
                            $bill_head_calc['NOC Charges'] = 0;
                        }
                        $bill_head_calc['sub_total'] = $bill_head_calc['Parking Charges'] + $bill_head_calc['NOC Charges'] + $bill_head_calc['sub_total'];
                                    
                        $is_paid = 0;
                        $bill_status = '';                    
                        $de = 1;
                        $interestable_amount = 0;                    
                        $principal_for_arrears = 0;        
                        $last_month_bill = $this->Bill_detail_model->get_last_bill_details_member($member['id']);
                        if(!empty($last_month_bill)){
                            $last_due_date = date('Y-m-d', strtotime($last_month_bill[0]['due_date']. '+1 day'));
                        }else{
                            
                            $last_due_date=date("Y-m",strtotime("-1 month"))."-30";
                        
                        }
                    
                    
                        $last_payment = $this->Payment_model->get_last_payment_details($member['id']);
                        if(!empty($last_payment)){
                            $last_payment_date = date('Y-m-d', strtotime($last_payment[0]['payment_date']));
                        }else{
                            $last_payment_date = date("Y-m",strtotime("-1 month"))."-30";
                        }
                        
                        
                        $late_payment = $this->Payment_model->get_late_payment($last_due_date, $bill_date, $member['id']);
                    
                        // if bill interest is calculated after n number of months on bill being unpaid
                        // get number of relaxation months on bill payment
                        // take principal arear as bill_amount of n th month
                        if($list->interest_on_bill_frequency == 1)
                        {
                        
                            $frequency = $$list->interest_bill_frequency;
                            $principal_arrears = round($this->Bill_detail_model->get_that_bill($member['id'],$member['society_id'],$bill_date,$frequency));
                        }
                        else
                        {
                        
                            $principal_arrears = round($this->Member_model->get_member_current_arrears($member['id']));
                        }
                        
                        $interest_arrears = round($this->Member_model->get_member_current_intrest_arrears($member['id']));
        
                        $current_bal = round($this->Member_model->get_member_current_balance($member['id']));
        
                        $ld = date("Y-m-d", strtotime( date( "Y-m-d", strtotime( $bill_due ) ) . "-1 month" ) );
        
                        $last_bill_due = !empty($last_month_bill) ? $last_month_bill[0]['due_date'] : $ld;
                        
                        if($interest_span == 'Daily'){
                            $de = round((strtotime($bill_date) - strtotime($last_bill_due))/(60*60*24));
                            $de = $de > 0 ? $de : 0;
                        } else {
                            $de = 1;
                        }
                        
                        $interestable_amount = round(($interest_type == 'Compound Interest') ? ($principal_arrears + $interest_arrears ) : $principal_arrears);
        
                        $interest = round($this->calc_interest($interest_type,$interest_span,$interest_rate,$interestable_amount,$de));
        
                        // if bill interest is calculated after n number of months on bill being unpaid
                        // take principal arrear as current valance
                        if($list->interest_on_bill_frequency == 1)
                        {
                            $principal_arrears = round($this->Member_model->get_member_current_arrears($member['id']));
                        }
        
                        if($list->interest_on_bill_frequency == 1)
                        {
                            $interestable_amount = round($principal_arrears);
                        }
        
                        if(!empty($late_payment) || $late_payment != NULL){
                            $principal_for_arrears = $this->Member_model->get_member_previous_arrears($member['id']);
                            $interest = round($this->calc_interest($interest_type,$interest_span,$interest_rate,$principal_for_arrears,$de));
                        }
                        $soft_total = round($bill_head_calc['sub_total'] + $principal_arrears + $interest_arrears + $interest);
                        
                        if($list->is_gst == 1 && $$list->is_gst!=''){
                          
                            $taxes = $this->calcGST($soft_total);
                            $taxAmount = round($taxes['payableGST']);
                            $taxSlab = $taxes['GST'];
                            $soft_total = round($taxes['taxAmount']);
                        }else{
                           
                            $taxAmount = 0;
                            $taxSlab = 0;  
                        }
        
                    
                        $total_due = round(($current_bal > 0) ? -($current_bal - $soft_total) : $soft_total);
                        
                        $is_paid = ($total_due < $soft_total) ? (($total_due < 0) ? 1 : -1) : 0;
                        $bill_status = ($is_paid == 1 ) ? 'Paid' : (($is_paid == -1) ? 'Partially Paid' : 'Unpaid');               
                        
                        $bill_array = array(
                            'member_id' => $member['id'],
                            'society_id' => $list->id,
                            'bill_date' => $bill_date,
                            'due_date' => $bill_due,
                            'bill_month' => $current_month,
                            'details' => serialize($bill_head_calc),
                            'principal_arrears' => $interestable_amount,
                            'interest_arrears' => $interest_arrears,
                            'interest' => $interest,
                            'tax_amount' => $taxAmount,
                            'tax_slab' => $taxSlab,
                            'bill_amount' => $bill_head_calc['sub_total'],
                            'total_due' => $total_due,
                            'bill_summary' => $bill_summary,
                            'paid' => $is_paid,
                            'bill_status' => $bill_status,
                            'bill_no' => $bill_no
                        );                     
                    
                       
                        $new_arrears = round(($total_due-($interest_arrears + $interest)>0)?$total_due-($interest_arrears + $interest):0);
                        //if($this->db->insert('bill_details',$bill_array)):
                    
                        $bill_details_insert_id=$this->Bill_detail_model->add_bill_detail($bill_array);
                        if($bill_details_insert_id!=0):
                    
                            /*Add society member bill payment logs*/
                            $bpm_logs = array(
                                'entity_id' => $bill_no,
                                'member_id' => $member['id'],
                                'amount' => $bill_head_calc['sub_total'] + $interest,
                                'type' => 'BILL',
                                'dnt' => time(),
                            );
                            $this->Member_model->insert_bpm_logs($bpm_logs);
        
                            $this->Member_model->insert_member_arrears($member['id'],$new_arrears);
                            $this->Member_model->insert_member_interest_arrears($member['id'],$interest_arrears + $interest);
                            $this->Member_model->insert_member_balance($member['id'],-$total_due);
        
                            /*Add society member bill payment transaction logs*/
                            $bpm_txn_logs = array(
                                'entity_id' => $bill_no,
                                'narration' => 'BILLDUE',
                                'credit' => '',
                                'debit' => $bill_head_calc['sub_total'] + $interest,
                                'balance' => -$total_due,
                                'dnt' => time(),
                                'member_id' => $member['id'],
                            );
        
                            $this->Member_model->insert_bpm_txn_logs($bpm_txn_logs);
                            
                            //checking society accounting details present or not-03-03-2022
                            $accounting_db_details=$this->Society_model->get_society_accounting_details($list->id);
                            if(!empty($accounting_db_details)){
                                $main_array=[];                  
                                foreach($bill_head_calc as $k=>$v){
                                    if($k!="sub_total"){                            
                                        if (in_array($k,array("NOC Charge","NOC Charges","Parking Charge","Parking Charges"))){ 
                                            $ledger_id=$this->ledger->get_ledger($k,$k,$list->id,"sc_acc_details");                                    
                                        }
                                        else {
                                            $ledger_id=$this->ledger->get_ledger($k,"Bill Head",$list->id,"sc_bill_head_accounting_details");
                                        
                                        }
                                        $credit = [
                                            "dc"=> "C",
                                            "cr_amount"=>$v,
                                            "ledger_id"=>$ledger_id                           
                                        ];
                                        array_push($main_array,$credit);
                                    }
                                
                                }        
                                $flat_ledger_id=$this->ledger->get_ledger("flat","flat",$list->id,"sc_flat_acc_Details",$member['id']);
                                $debit = [
                                    "dc"=> "D",
                                    "dr_amount"=>$bill_head_calc['sub_total'],
                                    "ledger_id"=>$flat_ledger_id                          
                                ];
                                array_push($main_array,$debit);
                                $narration="Bill Generate";
                                $bill_ledger_id=$this->ledger->accounting_bill_double_entry($list->id,4,date('Y-m-d'),$narration,$main_array,"sc_flat_bill_accounting",$member['id'],$bill_no);
 
                                $this->Bill_detail_model->update_bill_detail($bill_details_insert_id,array("bill_ledger_id"=>$bill_ledger_id));
                            }
                            
                            // $notification_data = array(
                            //     'flat_id'=>$member['id'],
                            //     'society_id'=>$society_id,
                            //     'title'=>'Bill Generated',
                            //     'message'=>'Bill Generated for '.$current_month.' Amount:'. $total_due,
                            //     'created_by'=>$this->session->userdata('user_id'),
                            //     'screen'=>'BILL_VIEW'
                            // );
                            // $notification = notify($notification_data);                           
        
                        endif;
                    }
                }
               
            }
           
        }
       
    }
    

    public function calc_interest($type='',$span='',$roi=0,$principal=0,$days_elapsed=0){
        $interest = 0;
        switch($type){
            case 'Fixed Interest':
                switch($span){
                    case 'Daily':
                        $interest = $days_elapsed * $roi;
                        break;
                    case 'Monthly':
                        $interest = 1 * $roi;
                        break;
                    case 'Quarterly':
                        $interest = 3 * $roi;
                        break;
                    case 'Half Yearly':
                        $interest = 6 * $roi;
                        break;
                    case 'Yearly':
                        $interest = 12 * $roi;
                        break;
                }
                break;
            case 'Simple Interest':
                switch($span){
                    case 'Daily':
                        $interest = ($principal*($roi/100))*($days_elapsed/365);
                        break;
                    case 'Monthly':
                        $interest = ($principal*($roi/100))*(1/12);
                        break;
                    case 'Quarterly':
                        $interest = ($principal*($roi/100))*0.25;
                        break;
                    case 'Half Yearly':
                        $interest = ($principal*($roi/100))*0.5;
                        break;
                    case 'Yearly':
                        $interest = ($principal*($roi/100));
                        break;
                }
                break;
            case 'Compound Interest':
                switch($span){
                    case 'Daily':
                        $interest = ($principal*($roi/100))*($days_elapsed/365);
                        break;
                    case 'Monthly':
                        $interest = ($principal*($roi/100))*(1/12);
                        break;
                    case 'Quarterly':
                        $interest = ($principal*($roi/100))*0.25;
                        break;
                    case 'Half Yearly':
                        $interest = ($principal*($roi/100))*0.5;
                        break;
                    case 'Yearly':
                        $interest = ($principal*($roi/100));
                        break;
                }
                break;
        }
        return $interest;
    }

    public function calcGST($amount){
        $tax = 0;
        $payableGST = 0;
        $taxAmount = 0;

        if($amount >= 0 && $amount <= 7499){
            $tax = 0;
        } elseif($amount >= 7500 && $amount <= 8999){
            $tax = Taxes::baseGST;
        } elseif($amount >= 9000){
            $tax =  Taxes::advanceGST;
        }

        $payableGST = (($amount * $tax)/100);
        $taxAmount = $amount + $payableGST;
        $ret['GST'] = $tax;
        $ret['payableGST'] = $payableGST;
        $ret['taxAmount'] = $taxAmount;       
        return $ret;
    } 


    //calculate simple interest-daily
    public function calculate_simple_interest_daily($interest_rate, $last_month, $interestable_amount, $bill_date)
    {
        $interest = 0;
        $new_interest = 0;
        $principal_amount = $interestable_amount;
        $rate = ($interest_rate/100);
        $bill_d = date('Y-m-d', strtotime($bill_date));
        $due_date = date('Y-m-d', strtotime($bill_d. "-1 month"));

        $bill_month = date('m', strtotime($bill_date));
        $due_month = date('m', strtotime($due_date));

        $bill_year = date('Y', strtotime($bill_date));
        $due_year = date('Y', strtotime($due_date));

        $days_of_month = cal_days_in_month(CAL_GREGORIAN, $due_year, $due_month);
        $days = $bill_d - $due_date;
        $da = ($days/365);
        $interest = ($principal_amount * $interest_rate * $d);

        return round($interest, 2);
    }

    
}
