<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Bank_transaction extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        if (!$this->ion_auth->logged_in())
        {
            // redirect them to the login page
            redirect('auth/login', 'refresh');
        }
        $this->load->model('Bank_transaction_model');
        $this->load->model('Bank_model');       
        $this->load->model('Society_model');
        $this->load->model('Expense_model');
        $this->load->model('Payment_model');
        
    } 

    /*
     * Listing of bank_transactions
     */
    function index()
    {
        $data['bank_transactions'] = $this->Bank_transaction_model->get_all_bank_transactions();
        
        $data['_view'] = 'bank_transaction/index';
        $this->load->view('layouts/main',$data);
    }

    // public function transaction_entry($amount, $society_id, $bank_id, $paid_by, $payment_date)
    // {
    //     // echo "<pre>";print_r($dat);die;
    //     $society_id = $society_id;
    //     $society = $this->Society_model->get_society_details($society_id);
    //     $paid_by = $paid_by;
    //     $bank_id = $bank_id;
    //     $amount = $amount;
    //     $payment_date = $payment_date;

    //     //for checking last transaction of bank/cash
    //     if($paid_by == 'cash'):
    //         $last_transaction = $this->Bank_transaction_model->get_transaction_by_society($society_id);
    //         $last_transact_balance = $last_transaction['balance'];
    //     else:
    //         $last_transaction = $this->Bank_transaction_model->get_transaction_by_bank($bank_id);
    //         $last_transact_balance = $last_transaction['balance'];
    //     endif;

    //     //creating bank transaction on payment.save and putting credit amount,is_cash,narration,society_id,date with reference from payment entry
    //     $params['credit'] = $amount;
    //     if($paid_by == 'cash'):
    //         $params['is_cash'] = 1;
    //         $params['narration'] = "cash transaction";
    //         $params['balance'] = $last_transact_balance + $amount;
    //     elseif($paid_by == 'cheque'):
    //         $params['is_cash'] = 0;
    //         $params['narration'] = "cheque transaction";
    //         $params['bank_id'] = $bank_id;
    //         $params['balance'] = $last_transact_balance + $amount;
    //     elseif($paid_by == 'neft'):
    //         $params['is_cash'] = 0;
    //         $params['narration'] = "neft transaction";
    //         $params['bank_id'] = $bank_id;
    //         $params['balance'] = $last_transact_balance + $amount;
    //     endif;

    //     $params['society_id'] = $society_id;
    //     $params['date'] = $payment_date;
    //     $transaction = $this->Bank_transaction_model->add_bank_transaction($params);

    //     redirect('member/manage'.'/'.$society_id);
    // }

    /*
     * Adding a new bank_transaction
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $params = array(
				'bank_id' => $this->input->post('bank_id'),
				'society_id' => $this->input->post('society_id'),
				'expense_id' => $this->input->post('expense_id'),
				'is_cash' => $this->input->post('is_cash'),
				'is_arrears' => $this->input->post('is_arrears'),
				'date' => $this->input->post('date'),
				'narration' => $this->input->post('narration'),
				'credit' => $this->input->post('credit'),
				'debit' => $this->input->post('debit'),
				'balance' => $this->input->post('balance'),
				'created_at' => $this->input->post('created_at'),
				'updated_at' => $this->input->post('updated_at'),
            );
            
            $bank_transaction_id = $this->Bank_transaction_model->add_bank_transaction($params);
            redirect('bank_transaction/index');
        }
        else
        {
			
			$data['all_banks'] = $this->Bank_model->get_all_banks();
			$data['all_societies'] = $this->Society_model->get_all_societies();			
			$data['all_expenses'] = $this->Expense_model->get_all_expenses();			
			$data['all_payments'] = $this->Payment_model->get_all_payments();			
            $data['_view'] = 'bank_transaction/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a bank_transaction
     */
    function edit($id)
    {   
        // check if the bank_transaction exists before trying to edit it
        $data['bank_transaction'] = $this->Bank_transaction_model->get_bank_transaction($id);
        
        if(isset($data['bank_transaction']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $params = array(
					'bank_id' => $this->input->post('bank_id'),
					'society_id' => $this->input->post('society_id'),
					'expense_id' => $this->input->post('expense_id'),
					'is_cash' => $this->input->post('is_cash'),
					'is_arrears' => $this->input->post('is_arrears'),
					'date' => $this->input->post('date'),
					'narration' => $this->input->post('narration'),
					'credit' => $this->input->post('credit'),
					'debit' => $this->input->post('debit'),
					'balance' => $this->input->post('balance'),
					'created_at' => $this->input->post('created_at'),
					'updated_at' => $this->input->post('updated_at'),
                );

                $this->Bank_transaction_model->update_bank_transaction($id,$params);            
                redirect('bank_transaction/index');
            }
            else
            {
				
				$data['all_banks'] = $this->Bank_model->get_all_banks();
				$data['all_societies'] = $this->Society_model->get_all_societies();
				$data['all_expenses'] = $this->Expense_model->get_all_expenses();
				$data['all_payments'] = $this->Payment_model->get_all_payments();				
                $data['_view'] = 'bank_transaction/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The bank_transaction you are trying to edit does not exist.');
    } 

    /*
     * Deleting bank_transaction
     */
    function remove($id)
    {
        $bank_transaction = $this->Bank_transaction_model->get_bank_transaction($id);

        // check if the bank_transaction exists before trying to delete it
        if(isset($bank_transaction['id']))
        {
            $this->Bank_transaction_model->delete_bank_transaction($id);
            redirect('bank_transaction/index');
        }
        else
            show_error('The bank_transaction you are trying to delete does not exist.');
    }
    
}
